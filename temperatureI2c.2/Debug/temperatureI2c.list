
temperatureI2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008c98  08008c98  00009c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009160  08009160  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  0000a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009164  08009164  0000a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009168  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001d4  0800933c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800933c  0000b4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d3b  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002848  00000000  00000000  0001df3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00020788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d07  00000000  00000000  00021818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c93  00000000  00000000  0002251f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bea  00000000  00000000  000461b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d57d4  00000000  00000000  0005cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  001325b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00137ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c7c 	.word	0x08008c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008c7c 	.word	0x08008c7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	715a      	strb	r2, [r3, #5]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8af9      	ldrh	r1, [r7, #22]
 8000fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f002 fa3d 	bl	8003460 <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10b      	bne.n	8001004 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fec:	7d7b      	ldrb	r3, [r7, #21]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
		return true;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <read_register16+0x56>
	} else
		return false;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	@ 0x2c
 8001012:	af04      	add	r7, sp, #16
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	8af9      	ldrh	r1, [r7, #22]
 8001038:	f241 3488 	movw	r4, #5000	@ 0x1388
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f002 fa0b 	bl	8003460 <HAL_I2C_Mem_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <read_data+0x46>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <read_data+0x48>
	else
		return 1;
 8001054:	2301      	movs	r3, #1

}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	461a      	mov	r2, r3
 800106a:	2188      	movs	r1, #136	@ 0x88
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff9f 	bl	8000fb0 <read_register16>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	218a      	movs	r1, #138	@ 0x8a
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff95 	bl	8000fb0 <read_register16>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	461a      	mov	r2, r3
 8001092:	218c      	movs	r1, #140	@ 0x8c
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8b 	bl	8000fb0 <read_register16>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	461a      	mov	r2, r3
 80010a6:	218e      	movs	r1, #142	@ 0x8e
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff81 	bl	8000fb0 <read_register16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	2190      	movs	r1, #144	@ 0x90
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff77 	bl	8000fb0 <read_register16>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330a      	adds	r3, #10
 80010cc:	461a      	mov	r2, r3
 80010ce:	2192      	movs	r1, #146	@ 0x92
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff6d 	bl	8000fb0 <read_register16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03d      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	330c      	adds	r3, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff63 	bl	8000fb0 <read_register16>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d033      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330e      	adds	r3, #14
 80010f4:	461a      	mov	r2, r3
 80010f6:	2196      	movs	r1, #150	@ 0x96
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff59 	bl	8000fb0 <read_register16>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	2198      	movs	r1, #152	@ 0x98
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4f 	bl	8000fb0 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	461a      	mov	r2, r3
 800111e:	219a      	movs	r1, #154	@ 0x9a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff45 	bl	8000fb0 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	219c      	movs	r1, #156	@ 0x9c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff3b 	bl	8000fb0 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001144:	461a      	mov	r2, r3
 8001146:	219e      	movs	r1, #158	@ 0x9e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff31 	bl	8000fb0 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <read_calibration_data+0xfa>

		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_calibration_data+0xfc>
	}

	return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0218 	add.w	r2, r3, #24
 8001170:	2301      	movs	r3, #1
 8001172:	21a1      	movs	r1, #161	@ 0xa1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4a 	bl	800100e <read_data>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14b      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331a      	adds	r3, #26
 8001184:	461a      	mov	r2, r3
 8001186:	21e1      	movs	r1, #225	@ 0xe1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff11 	bl	8000fb0 <read_register16>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 021c 	add.w	r2, r3, #28
 800119a:	2301      	movs	r3, #1
 800119c:	21e3      	movs	r1, #227	@ 0xe3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff35 	bl	800100e <read_data>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011aa:	f107 030e 	add.w	r3, r7, #14
 80011ae:	461a      	mov	r2, r3
 80011b0:	21e4      	movs	r1, #228	@ 0xe4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fefc 	bl	8000fb0 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	21e5      	movs	r1, #229	@ 0xe5
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fef2 	bl	8000fb0 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011d8:	2301      	movs	r3, #1
 80011da:	21e7      	movs	r1, #231	@ 0xe7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff16 	bl	800100e <read_data>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	841a      	strh	r2, [r3, #32]

		return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29a      	uxth	r2, r3
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	f002 f80a 	bl	800326c <HAL_I2C_Mem_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <write_register8+0x40>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <write_register8+0x42>
	else
		return true;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800127a:	2b76      	cmp	r3, #118	@ 0x76
 800127c:	d005      	beq.n	800128a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001282:	2b77      	cmp	r3, #119	@ 0x77
 8001284:	d001      	beq.n	800128a <bmp280_init+0x1e>

		return false;
 8001286:	2300      	movs	r3, #0
 8001288:	e099      	b.n	80013be <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001290:	2301      	movs	r3, #1
 8001292:	21d0      	movs	r1, #208	@ 0xd0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff feba 	bl	800100e <read_data>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <bmp280_init+0x38>
		return false;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e08c      	b.n	80013be <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012aa:	2b58      	cmp	r3, #88	@ 0x58
 80012ac:	d006      	beq.n	80012bc <bmp280_init+0x50>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012b4:	2b60      	cmp	r3, #96	@ 0x60
 80012b6:	d001      	beq.n	80012bc <bmp280_init+0x50>

		return false;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e080      	b.n	80013be <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012bc:	22b6      	movs	r2, #182	@ 0xb6
 80012be:	21e0      	movs	r1, #224	@ 0xe0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffae 	bl	8001222 <write_register8>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <bmp280_init+0x64>
		return false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e076      	b.n	80013be <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	2301      	movs	r3, #1
 80012d6:	21f3      	movs	r1, #243	@ 0xf3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fe98 	bl	800100e <read_data>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f5      	bne.n	80012d0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb5 	bl	800105e <read_calibration_data>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d100      	bne.n	8001302 <bmp280_init+0x96>
 8001300:	e001      	b.n	8001306 <bmp280_init+0x9a>
		return false;
 8001302:	2300      	movs	r3, #0
 8001304:	e05b      	b.n	80013be <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800130c:	2b60      	cmp	r3, #96	@ 0x60
 800130e:	d10a      	bne.n	8001326 <bmp280_init+0xba>
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff26 	bl	8001162 <read_hum_calibration_data>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <bmp280_init+0xba>
		return false;
 8001322:	2300      	movs	r3, #0
 8001324:	e04b      	b.n	80013be <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	b25a      	sxtb	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	461a      	mov	r2, r3
 8001340:	21f5      	movs	r1, #245	@ 0xf5
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff6d 	bl	8001222 <write_register8>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <bmp280_init+0xe6>
		return false;
 800134e:	2300      	movs	r3, #0
 8001350:	e035      	b.n	80013be <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	78db      	ldrb	r3, [r3, #3]
 8001364:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001366:	b25a      	sxtb	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25a      	sxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800137e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001386:	2b60      	cmp	r3, #96	@ 0x60
 8001388:	d10d      	bne.n	80013a6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	461a      	mov	r2, r3
 8001394:	21f2      	movs	r1, #242	@ 0xf2
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff43 	bl	8001222 <write_register8>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <bmp280_init+0x13a>
			return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e00b      	b.n	80013be <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	461a      	mov	r2, r3
 80013aa:	21f4      	movs	r1, #244	@ 0xf4
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff38 	bl	8001222 <write_register8>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <bmp280_init+0x150>
		return false;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <bmp280_init+0x152>
	}

	return true;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	10da      	asrs	r2, r3, #3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013e8:	12db      	asrs	r3, r3, #11
 80013ea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	111b      	asrs	r3, r3, #4
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	8812      	ldrh	r2, [r2, #0]
 80013f4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)/*računska kompenzacija mjerenja temperature senzora*/
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	1112      	asrs	r2, r2, #4
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	8809      	ldrh	r1, [r1, #0]
 80013fe:	1a52      	subs	r2, r2, r1
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001410:	139b      	asrs	r3, r3, #14
 8001412:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3380      	adds	r3, #128	@ 0x80
 800142a:	121b      	asrs	r3, r3, #8
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b0cc      	sub	sp, #304	@ 0x130
 800143e:	af00      	add	r7, sp, #0
 8001440:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001444:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001448:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800144c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001450:	17da      	asrs	r2, r3, #31
 8001452:	461c      	mov	r4, r3
 8001454:	4615      	mov	r5, r2
 8001456:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800145a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800145e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001462:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001480:	fba3 8903 	umull	r8, r9, r3, r3
 8001484:	eb02 0309 	add.w	r3, r2, r9
 8001488:	4699      	mov	r9, r3
 800148a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800148e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001492:	b21b      	sxth	r3, r3
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800149a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800149e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014a2:	4603      	mov	r3, r0
 80014a4:	fb03 f209 	mul.w	r2, r3, r9
 80014a8:	460b      	mov	r3, r1
 80014aa:	fb08 f303 	mul.w	r3, r8, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	4602      	mov	r2, r0
 80014b2:	fba8 1202 	umull	r1, r2, r8, r2
 80014b6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014ba:	460a      	mov	r2, r1
 80014bc:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014c4:	4413      	add	r3, r2
 80014c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014ca:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014ce:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80014d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	17da      	asrs	r2, r3, #31
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014e6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80014ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ee:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80014f2:	462a      	mov	r2, r5
 80014f4:	fb02 f203 	mul.w	r2, r2, r3
 80014f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014fc:	4621      	mov	r1, r4
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	441a      	add	r2, r3
 8001504:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001508:	4621      	mov	r1, r4
 800150a:	fba3 1301 	umull	r1, r3, r3, r1
 800150e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001512:	460b      	mov	r3, r1
 8001514:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800151c:	18d3      	adds	r3, r2, r3
 800151e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800152e:	462b      	mov	r3, r5
 8001530:	0459      	lsls	r1, r3, #17
 8001532:	4623      	mov	r3, r4
 8001534:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001538:	4623      	mov	r3, r4
 800153a:	0458      	lsls	r0, r3, #17
 800153c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001540:	1814      	adds	r4, r2, r0
 8001542:	643c      	str	r4, [r7, #64]	@ 0x40
 8001544:	414b      	adcs	r3, r1
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
 8001548:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800154c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001554:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001558:	b21b      	sxth	r3, r3
 800155a:	17da      	asrs	r2, r3, #31
 800155c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001570:	00d9      	lsls	r1, r3, #3
 8001572:	2000      	movs	r0, #0
 8001574:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001578:	1814      	adds	r4, r2, r0
 800157a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800157c:	414b      	adcs	r3, r1
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001580:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001584:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001588:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800158c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001590:	fb03 f102 	mul.w	r1, r3, r2
 8001594:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	18ca      	adds	r2, r1, r3
 80015a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015a6:	fba3 1303 	umull	r1, r3, r3, r3
 80015aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015ae:	460b      	mov	r3, r1
 80015b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	17da      	asrs	r2, r3, #31
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015d2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015d6:	462b      	mov	r3, r5
 80015d8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015dc:	4642      	mov	r2, r8
 80015de:	fb02 f203 	mul.w	r2, r2, r3
 80015e2:	464b      	mov	r3, r9
 80015e4:	4621      	mov	r1, r4
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	4622      	mov	r2, r4
 80015ee:	4641      	mov	r1, r8
 80015f0:	fba2 1201 	umull	r1, r2, r2, r1
 80015f4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80015f8:	460a      	mov	r2, r1
 80015fa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80015fe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001602:	4413      	add	r3, r2
 8001604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001614:	4623      	mov	r3, r4
 8001616:	0a18      	lsrs	r0, r3, #8
 8001618:	462b      	mov	r3, r5
 800161a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800161e:	462b      	mov	r3, r5
 8001620:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800162a:	b21b      	sxth	r3, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001632:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800163a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800163e:	464a      	mov	r2, r9
 8001640:	fb02 f203 	mul.w	r2, r2, r3
 8001644:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001648:	4644      	mov	r4, r8
 800164a:	fb04 f303 	mul.w	r3, r4, r3
 800164e:	441a      	add	r2, r3
 8001650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001654:	4644      	mov	r4, r8
 8001656:	fba3 4304 	umull	r4, r3, r3, r4
 800165a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800165e:	4623      	mov	r3, r4
 8001660:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800167a:	464c      	mov	r4, r9
 800167c:	0323      	lsls	r3, r4, #12
 800167e:	4644      	mov	r4, r8
 8001680:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001684:	4644      	mov	r4, r8
 8001686:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001688:	1884      	adds	r4, r0, r2
 800168a:	633c      	str	r4, [r7, #48]	@ 0x30
 800168c:	eb41 0303 	adc.w	r3, r1, r3
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
 8001692:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001696:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800169a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800169e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016a2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016c0:	462b      	mov	r3, r5
 80016c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016c6:	4642      	mov	r2, r8
 80016c8:	fb02 f203 	mul.w	r2, r2, r3
 80016cc:	464b      	mov	r3, r9
 80016ce:	4621      	mov	r1, r4
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	4622      	mov	r2, r4
 80016d8:	4641      	mov	r1, r8
 80016da:	fba2 1201 	umull	r1, r2, r2, r1
 80016de:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80016e2:	460a      	mov	r2, r1
 80016e4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80016e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80016fe:	4629      	mov	r1, r5
 8001700:	104a      	asrs	r2, r1, #1
 8001702:	4629      	mov	r1, r5
 8001704:	17cb      	asrs	r3, r1, #31
 8001706:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800170a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800170e:	4313      	orrs	r3, r2
 8001710:	d101      	bne.n	8001716 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001712:	2300      	movs	r3, #0
 8001714:	e148      	b.n	80019a8 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800171a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001724:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001728:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800172c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001730:	105b      	asrs	r3, r3, #1
 8001732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001736:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800173a:	07db      	lsls	r3, r3, #31
 800173c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001740:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001744:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001748:	4621      	mov	r1, r4
 800174a:	1a89      	subs	r1, r1, r2
 800174c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800174e:	4629      	mov	r1, r5
 8001750:	eb61 0303 	sbc.w	r3, r1, r3
 8001754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800175a:	4622      	mov	r2, r4
 800175c:	462b      	mov	r3, r5
 800175e:	1891      	adds	r1, r2, r2
 8001760:	6239      	str	r1, [r7, #32]
 8001762:	415b      	adcs	r3, r3
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
 8001766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800176a:	4621      	mov	r1, r4
 800176c:	1851      	adds	r1, r2, r1
 800176e:	61b9      	str	r1, [r7, #24]
 8001770:	4629      	mov	r1, r5
 8001772:	414b      	adcs	r3, r1
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001782:	4649      	mov	r1, r9
 8001784:	018b      	lsls	r3, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178c:	4641      	mov	r1, r8
 800178e:	018a      	lsls	r2, r1, #6
 8001790:	4641      	mov	r1, r8
 8001792:	1889      	adds	r1, r1, r2
 8001794:	6139      	str	r1, [r7, #16]
 8001796:	4649      	mov	r1, r9
 8001798:	eb43 0101 	adc.w	r1, r3, r1
 800179c:	6179      	str	r1, [r7, #20]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017aa:	4649      	mov	r1, r9
 80017ac:	008b      	lsls	r3, r1, #2
 80017ae:	4641      	mov	r1, r8
 80017b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017b4:	4641      	mov	r1, r8
 80017b6:	008a      	lsls	r2, r1, #2
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	4622      	mov	r2, r4
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	460b      	mov	r3, r1
 80017c6:	462a      	mov	r2, r5
 80017c8:	eb42 0303 	adc.w	r3, r2, r3
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017da:	4649      	mov	r1, r9
 80017dc:	008b      	lsls	r3, r1, #2
 80017de:	4641      	mov	r1, r8
 80017e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017e4:	4641      	mov	r1, r8
 80017e6:	008a      	lsls	r2, r1, #2
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	4622      	mov	r2, r4
 80017f0:	189b      	adds	r3, r3, r2
 80017f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f4:	462b      	mov	r3, r5
 80017f6:	460a      	mov	r2, r1
 80017f8:	eb42 0303 	adc.w	r3, r2, r3
 80017fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80017fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001802:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_ldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001816:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001820:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001822:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0b50      	lsrs	r0, r2, #13
 8001830:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001834:	1359      	asrs	r1, r3, #13
 8001836:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800183a:	462b      	mov	r3, r5
 800183c:	fb00 f203 	mul.w	r2, r0, r3
 8001840:	4623      	mov	r3, r4
 8001842:	fb03 f301 	mul.w	r3, r3, r1
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	fba2 1200 	umull	r1, r2, r2, r0
 800184e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001852:	460a      	mov	r2, r1
 8001854:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001858:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800185c:	4413      	add	r3, r2
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001862:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	0b50      	lsrs	r0, r2, #13
 8001870:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001874:	1359      	asrs	r1, r3, #13
 8001876:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800187a:	462b      	mov	r3, r5
 800187c:	fb00 f203 	mul.w	r2, r0, r3
 8001880:	4623      	mov	r3, r4
 8001882:	fb03 f301 	mul.w	r3, r3, r1
 8001886:	4413      	add	r3, r2
 8001888:	4622      	mov	r2, r4
 800188a:	fba2 1200 	umull	r1, r2, r2, r0
 800188e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001892:	460a      	mov	r2, r1
 8001894:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001898:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800189c:	4413      	add	r3, r2
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ae:	4621      	mov	r1, r4
 80018b0:	0e4a      	lsrs	r2, r1, #25
 80018b2:	4629      	mov	r1, r5
 80018b4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018b8:	4629      	mov	r1, r5
 80018ba:	164b      	asrs	r3, r1, #25
 80018bc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	17da      	asrs	r2, r3, #31
 80018cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80018ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80018d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018d8:	462a      	mov	r2, r5
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018e2:	4621      	mov	r1, r4
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018ee:	4621      	mov	r1, r4
 80018f0:	fba2 1201 	umull	r1, r2, r2, r1
 80018f4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018f8:	460a      	mov	r2, r1
 80018fa:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80018fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001902:	4413      	add	r3, r2
 8001904:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001914:	4621      	mov	r1, r4
 8001916:	0cca      	lsrs	r2, r1, #19
 8001918:	4629      	mov	r1, r5
 800191a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800191e:	4629      	mov	r1, r5
 8001920:	14cb      	asrs	r3, r1, #19
 8001922:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001926:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800192a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800192e:	1884      	adds	r4, r0, r2
 8001930:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001932:	eb41 0303 	adc.w	r3, r1, r3
 8001936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001938:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800193c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001940:	4621      	mov	r1, r4
 8001942:	1889      	adds	r1, r1, r2
 8001944:	6539      	str	r1, [r7, #80]	@ 0x50
 8001946:	4629      	mov	r1, r5
 8001948:	eb43 0101 	adc.w	r1, r3, r1
 800194c:	6579      	str	r1, [r7, #84]	@ 0x54
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800195a:	4623      	mov	r3, r4
 800195c:	0a18      	lsrs	r0, r3, #8
 800195e:	462b      	mov	r3, r5
 8001960:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001964:	462b      	mov	r3, r5
 8001966:	1219      	asrs	r1, r3, #8
 8001968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800196c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001970:	b21b      	sxth	r3, r3
 8001972:	17da      	asrs	r2, r3, #31
 8001974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001976:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001984:	464c      	mov	r4, r9
 8001986:	0123      	lsls	r3, r4, #4
 8001988:	4644      	mov	r4, r8
 800198a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800198e:	4644      	mov	r4, r8
 8001990:	0122      	lsls	r2, r4, #4
 8001992:	1884      	adds	r4, r0, r2
 8001994:	603c      	str	r4, [r7, #0]
 8001996:	eb41 0303 	adc.w	r3, r1, r3
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80019a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019b4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80019c6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	039a      	lsls	r2, r3, #14
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d2:	051b      	lsls	r3, r3, #20
 80019d4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019dc:	4619      	mov	r1, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019ea:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80019f2:	4611      	mov	r1, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	fb01 f202 	mul.w	r2, r1, r2
 80019fa:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	7f09      	ldrb	r1, [r1, #28]
 8001a00:	4608      	mov	r0, r1
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	fb00 f101 	mul.w	r1, r0, r1
 8001a08:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a0a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a0e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a12:	1292      	asrs	r2, r2, #10
 8001a14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a1e:	fb01 f202 	mul.w	r2, r1, r2
 8001a22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a26:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	13db      	asrs	r3, r3, #15
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	13d2      	asrs	r2, r2, #15
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	7e12      	ldrb	r2, [r2, #24]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a52:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a5a:	bfa8      	it	ge
 8001a5c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001a60:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	131b      	asrs	r3, r3, #12
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b08c      	sub	sp, #48	@ 0x30
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a86:	2b60      	cmp	r3, #96	@ 0x60
 8001a88:	d007      	beq.n	8001a9a <bmp280_read_fixed+0x28>
		if (humidity)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <bmp280_read_fixed+0x32>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	e000      	b.n	8001aa6 <bmp280_read_fixed+0x34>
 8001aa4:	2306      	movs	r3, #6
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f107 0218 	add.w	r2, r7, #24
 8001ab0:	21f7      	movs	r1, #247	@ 0xf7
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff faab 	bl	800100e <read_data>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <bmp280_read_fixed+0x50>
		return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e038      	b.n	8001b34 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac2:	7e3b      	ldrb	r3, [r7, #24]
 8001ac4:	031a      	lsls	r2, r3, #12
 8001ac6:	7e7b      	ldrb	r3, [r7, #25]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4313      	orrs	r3, r2
 8001acc:	7eba      	ldrb	r2, [r7, #26]
 8001ace:	0912      	lsrs	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ad6:	7efb      	ldrb	r3, [r7, #27]
 8001ad8:	031a      	lsls	r2, r3, #12
 8001ada:	7f3b      	ldrb	r3, [r7, #28]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	0912      	lsrs	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	461a      	mov	r2, r3
 8001af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fc67 	bl	80013c6 <compensate_temperature>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	461a      	mov	r2, r3
 8001b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff fc97 	bl	8001438 <compensate_pressure>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00d      	beq.n	8001b32 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	7ffa      	ldrb	r2, [r7, #31]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff44 	bl	80019b4 <compensate_humidity>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <bmp280_read_float+0x1a>
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	e000      	b.n	8001b58 <bmp280_read_float+0x1c>
 8001b56:	2300      	movs	r3, #0
 8001b58:	f107 0218 	add.w	r2, r7, #24
 8001b5c:	f107 011c 	add.w	r1, r7, #28
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff ff86 	bl	8001a72 <bmp280_read_fixed>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d028      	beq.n	8001bbe <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b76:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001bc8 <bmp280_read_float+0x8c>
 8001b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b8e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001bcc <bmp280_read_float+0x90>
 8001b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bac:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001bd0 <bmp280_read_float+0x94>
 8001bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <bmp280_read_float+0x84>
	}

	return false;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	42c80000 	.word	0x42c80000
 8001bcc:	43800000 	.word	0x43800000
 8001bd0:	44800000 	.word	0x44800000

08001bd4 <initBmpSensor>:
#include <stdio.h>

#include <bmpUtils.h>

BMP280_HandleTypedef initBmpSensor(I2C_HandleTypeDef* hi2c1)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b090      	sub	sp, #64	@ 0x40
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	BMP280_HandleTypedef bmp280;

	// configure settings
	bmp280_init_default_params(&bmp280.params);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	332c      	adds	r3, #44	@ 0x2c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f9c7 	bl	8000f78 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001bea:	2376      	movs	r3, #118	@ 0x76
 8001bec:	863b      	strh	r3, [r7, #48]	@ 0x30
	bmp280.i2c = hi2c1;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34

	// try to connect and initialize
	while (!bmp280_init(&bmp280, &bmp280.params)) {/*čita memoriju radi IDa i zapisuje postavke(mod rada, filtriranje, oversamplamnnje, čekanje između mjerenja)*/
 8001bf2:	e006      	b.n	8001c02 <initBmpSensor+0x2e>
		printf("BMP280 initialization failed\r\n");
 8001bf4:	481d      	ldr	r0, [pc, #116]	@ (8001c6c <initBmpSensor+0x98>)
 8001bf6:	f005 f8d3 	bl	8006da0 <puts>
		HAL_Delay(2000);
 8001bfa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bfe:	f000 fef3 	bl	80029e8 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {/*čita memoriju radi IDa i zapisuje postavke(mod rada, filtriranje, oversamplamnnje, čekanje između mjerenja)*/
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fb2b 	bl	800126c <bmp280_init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f083 0301 	eor.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e8      	bne.n	8001bf4 <initBmpSensor+0x20>
	}

	// print exact detected sensor type
	bmp280.bme280p = bmp280.id == BME280_CHIP_ID;/*uspoređije ID ad bu utvrtili koji je senzor u pitanju*/
 8001c22:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c26:	2b60      	cmp	r3, #96	@ 0x60
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	printf("BMP280: found %s\r\n", bmp280.bme280p ? "BME280" : "BMP280"); /*uspoređuje i ovisno o tome izvršit će "BME280" ili BMP280*/
 8001c34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <initBmpSensor+0x6c>
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <initBmpSensor+0x9c>)
 8001c3e:	e000      	b.n	8001c42 <initBmpSensor+0x6e>
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <initBmpSensor+0xa0>)
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <initBmpSensor+0xa4>)
 8001c46:	f005 f843 	bl	8006cd0 <iprintf>

	return bmp280;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	f107 040c 	add.w	r4, r7, #12
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	602b      	str	r3, [r5, #0]
}
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	3740      	adds	r7, #64	@ 0x40
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08008c98 	.word	0x08008c98
 8001c70:	08008cb8 	.word	0x08008cb8
 8001c74:	08008cc0 	.word	0x08008cc0
 8001c78:	08008cc8 	.word	0x08008cc8

08001c7c <readAndPrintData>:

sensorData readAndPrintData(BMP280_HandleTypedef bmp280)/*Definicija read and print funkcije*/
{
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	b5b0      	push	{r4, r5, r7, lr}
 8001c80:	b088      	sub	sp, #32
 8001c82:	af02      	add	r7, sp, #8
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sensorData s = {0.0, 0.0, 0.0, false}; /*inicijalizacija varijable s-senzor data (3 floata i jedan bool)*/
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
	s.bme280p = bmp280.bme280p;/*s. i bmp280 su strukture koje sadrže boolian a u tom boolianu se nalazi info o tipu senzora*/
 8001c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001ca0:	753b      	strb	r3, [r7, #20]

	// read the data from sensor
	while (!bmp280_read_float(&bmp280, &(s.temperature), &(s.pressure), &(s.humidity))) {/*funkcija readfloat čita navedene podatke*/
 8001ca2:	e009      	b.n	8001cb8 <readAndPrintData+0x3c>
		printf("Temperature/pressure reading failed\r\n");
 8001ca4:	4827      	ldr	r0, [pc, #156]	@ (8001d44 <readAndPrintData+0xc8>)
 8001ca6:	f005 f87b 	bl	8006da0 <puts>
		TIM1->CCR1 = 0; //set PWM to 0 just in case /*stavljamo da PWM duty cycle u 0(gasimo napon) i svrha je da ako pročitamo krivu vrijednost da s njome ne upravljamo PWMom nego da radije uzgasimo ventilator*/
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <readAndPrintData+0xcc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(2000);
 8001cb0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cb4:	f000 fe98 	bl	80029e8 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &(s.temperature), &(s.pressure), &(s.humidity))) {/*funkcija readfloat čita navedene podatke*/
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	f103 0408 	add.w	r4, r3, #8
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	1d1a      	adds	r2, r3, #4
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001cce:	4623      	mov	r3, r4
 8001cd0:	f7ff ff34 	bl	8001b3c <bmp280_read_float>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e1      	bne.n	8001ca4 <readAndPrintData+0x28>
	}

	// print temperature
	// Go to Project/Settings/C/C++ Build/Settings/MCU settings and enable "Use float with printf from newlib-nano (-u _printf_float)
	printf("Pressure: %.2f Pa, Temperature: %.2f C", s.pressure, s.temperature);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc50 	bl	8000588 <__aeabi_f2d>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc4a 	bl	8000588 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	462b      	mov	r3, r5
 8001d00:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <readAndPrintData+0xd0>)
 8001d02:	f004 ffe5 	bl	8006cd0 <iprintf>

	// print humidity if it is available
	if (bmp280.bme280p) {
 8001d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <readAndPrintData+0xa6>
		printf(", Humidity: %.2f\r\n", s.humidity);/*linija 31*/
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc39 	bl	8000588 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <readAndPrintData+0xd4>)
 8001d1c:	f004 ffd8 	bl	8006cd0 <iprintf>
 8001d20:	e002      	b.n	8001d28 <readAndPrintData+0xac>
	}
	else {
		printf("\r\n");
 8001d22:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <readAndPrintData+0xd8>)
 8001d24:	f005 f83c 	bl	8006da0 <puts>
	}

	return s; /**/
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	461c      	mov	r4, r3
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d40:	b004      	add	sp, #16
 8001d42:	4770      	bx	lr
 8001d44:	08008cdc 	.word	0x08008cdc
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	08008d04 	.word	0x08008d04
 8001d50:	08008d2c 	.word	0x08008d2c
 8001d54:	08008d40 	.word	0x08008d40

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	b0a1      	sub	sp, #132	@ 0x84
 8001d5c:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f000 fdd1 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 f85d 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f000 f9c1 	bl	80020ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d6a:	f000 f995 	bl	8002098 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d6e:	f000 f8c5 	bl	8001efc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001d72:	f000 f8f1 	bl	8001f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM3_Init();
 8001d76:	f000 fa27 	bl	80021c8 <MX_TIM3_Init>
  bmp280 = initBmpSensor(&hi2c1);
 8001d7a:	4c22      	ldr	r4, [pc, #136]	@ (8001e04 <main+0xac>)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4922      	ldr	r1, [pc, #136]	@ (8001e08 <main+0xb0>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff27 	bl	8001bd4 <initBmpSensor>
 8001d86:	4625      	mov	r5, r4
 8001d88:	463c      	mov	r4, r7
 8001d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	602b      	str	r3, [r5, #0]
  initPwm(0, htim1); /*obavlja sve operacije koje su potrebne da bi neki komad sklopovlja radio*/
 8001d9a:	4e1c      	ldr	r6, [pc, #112]	@ (8001e0c <main+0xb4>)
 8001d9c:	466d      	mov	r5, sp
 8001d9e:	f106 040c 	add.w	r4, r6, #12
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001db2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001db6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fa58 	bl	8002270 <initPwm>

  int counter = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#ifdef DEMO_PWM
  int pwmValue = 0;
#else

#endif
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001dc4:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <main+0xb8>)
 8001dc6:	f002 ff69 	bl	8004c9c <HAL_TIM_Base_Start_IT>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <main+0x7c>
    {
      /* Starting Error */
      Error_Handler();
 8001dd0:	f000 fa48 	bl	8002264 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Blinky
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	480f      	ldr	r0, [pc, #60]	@ (8001e14 <main+0xbc>)
 8001dd8:	f001 f8e9 	bl	8002fae <HAL_GPIO_TogglePin>

	// Debug print
	printf("Counter=%d \r\n", counter++);
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <main+0xc0>)
 8001de6:	f004 ff73 	bl	8006cd0 <iprintf>

	// adjust PWM value
#ifdef DEMO_PWM
	pwmValue = circularIncrementPwm(pwmValue);
#else
	temperaturePwm(s.temperature); /*iz varijable "s" izvlačimo i čitamo vrijednost temperature*/
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <main+0xc4>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	f000 faaa 	bl	800234c <temperaturePwm>
#endif

	// Wait 2 seconds before each reading
	HAL_Delay(2000);
 8001df8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dfc:	f000 fdf4 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e00:	bf00      	nop
 8001e02:	e7e7      	b.n	8001dd4 <main+0x7c>
 8001e04:	2000031c 	.word	0x2000031c
 8001e08:	200001f0 	.word	0x200001f0
 8001e0c:	20000244 	.word	0x20000244
 8001e10:	200002d4 	.word	0x200002d4
 8001e14:	40020000 	.word	0x40020000
 8001e18:	08008d44 	.word	0x08008d44
 8001e1c:	20000350 	.word	0x20000350

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b094      	sub	sp, #80	@ 0x50
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2234      	movs	r2, #52	@ 0x34
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 f896 	bl	8006f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <SystemClock_Config+0xd4>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ef4 <SystemClock_Config+0xd4>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <SystemClock_Config+0xd4>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <SystemClock_Config+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <SystemClock_Config+0xd8>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <SystemClock_Config+0xd8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e94:	2310      	movs	r3, #16
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fc06 	bl	80046c0 <HAL_RCC_OscConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001eba:	f000 f9d3 	bl	8002264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 f8a6 	bl	800402c <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ee6:	f000 f9bd 	bl	8002264 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_I2C1_Init+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x58>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f3a:	f001 f853 	bl	8002fe4 <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f44:	f000 f98e 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200001f0 	.word	0x200001f0
 8001f50:	40005400 	.word	0x40005400
 8001f54:	000186a0 	.word	0x000186a0

08001f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	@ 0x58
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 ffe5 	bl	8006f60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f96:	4b3e      	ldr	r3, [pc, #248]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001f98:	4a3e      	ldr	r2, [pc, #248]	@ (8002094 <MX_TIM1_Init+0x13c>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001f9e:	2253      	movs	r2, #83	@ 0x53
 8001fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001faa:	2263      	movs	r2, #99	@ 0x63
 8001fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc0:	4833      	ldr	r0, [pc, #204]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fc2:	f002 fe1b 	bl	8004bfc <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fcc:	f000 f94a 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fda:	4619      	mov	r1, r3
 8001fdc:	482c      	ldr	r0, [pc, #176]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fde:	f003 f9a1 	bl	8005324 <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fe8:	f000 f93c 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fec:	4828      	ldr	r0, [pc, #160]	@ (8002090 <MX_TIM1_Init+0x138>)
 8001fee:	f002 fec5 	bl	8004d7c <HAL_TIM_PWM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ff8:	f000 f934 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002004:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002008:	4619      	mov	r1, r3
 800200a:	4821      	ldr	r0, [pc, #132]	@ (8002090 <MX_TIM1_Init+0x138>)
 800200c:	f003 fda0 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002016:	f000 f925 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002040:	f003 f8ae 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800204a:	f000 f90b 	bl	8002264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002072:	f003 fde9 	bl	8005c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800207c:	f000 f8f2 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <MX_TIM1_Init+0x138>)
 8002082:	f000 fa37 	bl	80024f4 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3758      	adds	r7, #88	@ 0x58
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000244 	.word	0x20000244
 8002094:	40010000 	.word	0x40010000

08002098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <MX_USART2_UART_Init+0x50>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020d0:	f003 fe20 	bl	8005d14 <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020da:	f000 f8c3 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000028c 	.word	0x2000028c
 80020e8:	40004400 	.word	0x40004400

080020ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a2c      	ldr	r2, [pc, #176]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2120      	movs	r1, #32
 8002176:	4812      	ldr	r0, [pc, #72]	@ (80021c0 <MX_GPIO_Init+0xd4>)
 8002178:	f000 ff00 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800217c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002182:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <MX_GPIO_Init+0xd8>)
 8002194:	f000 fd5e 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002198:	2320      	movs	r3, #32
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <MX_GPIO_Init+0xd4>)
 80021b0:	f000 fd50 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	@ 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020800 	.word	0x40020800

080021c8 <MX_TIM3_Init>:

/* USER CODE BEGIN 4 */
static void MX_TIM3_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	463b      	mov	r3, r7
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <MX_TIM3_Init+0x94>)
 80021e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002260 <MX_TIM3_Init+0x98>)
 80021e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <MX_TIM3_Init+0x94>)
 80021ec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80021f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <MX_TIM3_Init+0x94>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <MX_TIM3_Init+0x94>)
 80021fa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_TIM3_Init+0x94>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <MX_TIM3_Init+0x94>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800220c:	4813      	ldr	r0, [pc, #76]	@ (800225c <MX_TIM3_Init+0x94>)
 800220e:	f002 fcf5 	bl	8004bfc <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002218:	f000 f824 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	4619      	mov	r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <MX_TIM3_Init+0x94>)
 800222a:	f003 f87b 	bl	8005324 <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002234:	f000 f816 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_TIM3_Init+0x94>)
 8002246:	f003 fc83 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002250:	f000 f808 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200002d4 	.word	0x200002d4
 8002260:	40000400 	.word	0x40000400

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Error_Handler+0x8>

08002270 <initPwm>:
#include "stm32f4xx_hal.h"

#include "pwmUtils.h"

void initPwm(int startingPercentage, TIM_HandleTypeDef htim1)
{
 8002270:	b084      	sub	sp, #16
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	f107 0014 	add.w	r0, r7, #20
 800227e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if ((startingPercentage < 0) | (startingPercentage > 100))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0fdb      	lsrs	r3, r3, #31
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	bfcc      	ite	gt
 800228e:	2301      	movgt	r3, #1
 8002290:	2300      	movle	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <initPwm+0x38>
	{
		printf("PWM duty=%d is invalid, using 0 instead\r\n", startingPercentage);
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	480a      	ldr	r0, [pc, #40]	@ (80022c8 <initPwm+0x58>)
 80022a0:	f004 fd16 	bl	8006cd0 <iprintf>
		startingPercentage = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
	}

	TIM1->CCR1 = startingPercentage; // set capture-compare register for channel (ARR is 100, so this is a direct percentage)
 80022a8:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <initPwm+0x5c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6353      	str	r3, [r2, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // starting the TIM1 in PWM mode
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fdbb 	bl	8004e30 <HAL_TIM_PWM_Start>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022c4:	b004      	add	sp, #16
 80022c6:	4770      	bx	lr
 80022c8:	08008d54 	.word	0x08008d54
 80022cc:	40010000 	.word	0x40010000

080022d0 <mapToPwm>:

int mapToPwm(float temperature, float lowerBound, float upperBound)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80022da:	edc7 0a02 	vstr	s1, [r7, #8]
 80022de:	ed87 1a01 	vstr	s2, [r7, #4]
    if (temperature <= lowerBound)
 80022e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80022e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	d801      	bhi.n	80022f8 <mapToPwm+0x28>
    {
    	return 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e020      	b.n	800233a <mapToPwm+0x6a>
    }
    else if (temperature >= upperBound)//račun pretvaranja u PWM vrijednost, tj. koliko će biti postotak PWM-a
 80022f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	db01      	blt.n	800230e <mapToPwm+0x3e>
    {
    	return 100;
 800230a:	2364      	movs	r3, #100	@ 0x64
 800230c:	e015      	b.n	800233a <mapToPwm+0x6a>
    }
    else
    {
    	return (int)(((temperature - lowerBound) * 100) / (upperBound - lowerBound) );
 800230e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002312:	edd7 7a02 	vldr	s15, [r7, #8]
 8002316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002348 <mapToPwm+0x78>
 800231e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002322:	ed97 7a01 	vldr	s14, [r7, #4]
 8002326:	edd7 7a02 	vldr	s15, [r7, #8]
 800232a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002336:	ee17 3a90 	vmov	r3, s15
    }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	42c80000 	.word	0x42c80000

0800234c <temperaturePwm>:

	return newPwmValue;
}

int temperaturePwm(float temperature)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	ed87 0a01 	vstr	s0, [r7, #4]
	int newPwmValue = mapToPwm(temperature, TEMP_MIN, TEMP_MAX);
 8002356:	eeb3 1a0c 	vmov.f32	s2, #60	@ 0x41e00000  28.0
 800235a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800238c <temperaturePwm+0x40>
 800235e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002362:	f7ff ffb5 	bl	80022d0 <mapToPwm>
 8002366:	60f8      	str	r0, [r7, #12]
	printf("For measured T=%.2f C, setting PWM duty to=%d\r\n", temperature, newPwmValue);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe f90d 	bl	8000588 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	9100      	str	r1, [sp, #0]
 8002376:	4806      	ldr	r0, [pc, #24]	@ (8002390 <temperaturePwm+0x44>)
 8002378:	f004 fcaa 	bl	8006cd0 <iprintf>
	TIM1->CCR1 = newPwmValue;
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <temperaturePwm+0x48>)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6353      	str	r3, [r2, #52]	@ 0x34

	return newPwmValue;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	41cc0000 	.word	0x41cc0000
 8002390:	08008d9c 	.word	0x08008d9c
 8002394:	40010000 	.word	0x40010000

08002398 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_MspInit+0x4c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023d6:	2007      	movs	r0, #7
 80023d8:	f000 fbfa 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a19      	ldr	r2, [pc, #100]	@ (800246c <HAL_I2C_MspInit+0x84>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12c      	bne.n	8002464 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002426:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242c:	2312      	movs	r3, #18
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002438:	2304      	movs	r3, #4
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	480c      	ldr	r0, [pc, #48]	@ (8002474 <HAL_I2C_MspInit+0x8c>)
 8002444:	f000 fc06 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 8002452:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_I2C_MspInit+0x88>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	@ 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40005400 	.word	0x40005400
 8002470:	40023800 	.word	0x40023800
 8002474:	40020400 	.word	0x40020400

08002478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_TIM_Base_MspInit+0x70>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a16      	ldr	r2, [pc, #88]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
    }
}
 80024a6:	e01a      	b.n	80024de <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d115      	bne.n	80024de <HAL_TIM_Base_MspInit+0x66>
      __HAL_RCC_TIM3_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_TIM_Base_MspInit+0x74>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	201d      	movs	r0, #29
 80024d4:	f000 fb87 	bl	8002be6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024d8:	201d      	movs	r0, #29
 80024da:	f000 fba0 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40000400 	.word	0x40000400

080024f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a12      	ldr	r2, [pc, #72]	@ (800255c <HAL_TIM_MspPostInit+0x68>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d11e      	bne.n	8002554 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002536:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002544:	2301      	movs	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_TIM_MspPostInit+0x70>)
 8002550:	f000 fb80 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40010000 	.word	0x40010000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_UART_MspInit+0x84>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12b      	bne.n	80025e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002598:	6413      	str	r3, [r2, #64]	@ 0x40
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025c2:	230c      	movs	r3, #12
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d2:	2307      	movs	r3, #7
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <HAL_UART_MspInit+0x8c>)
 80025de:	f000 fb39 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <NMI_Handler+0x4>

08002600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <MemManage_Handler+0x4>

08002610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <UsageFault_Handler+0x4>

08002620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264e:	f000 f9ab 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <TIM3_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles Debug monitor.
  */
void TIM3_IRQHandler(void)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	b091      	sub	sp, #68	@ 0x44
 800265c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
	s = readAndPrintData(bmp280);
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <TIM3_IRQHandler+0x4c>)
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f107 0c08 	add.w	ip, r7, #8
 8002666:	4e10      	ldr	r6, [pc, #64]	@ (80026a8 <TIM3_IRQHandler+0x50>)
 8002668:	466d      	mov	r5, sp
 800266a:	f106 040c 	add.w	r4, r6, #12
 800266e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267a:	e885 0003 	stmia.w	r5, {r0, r1}
 800267e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002682:	4660      	mov	r0, ip
 8002684:	f7ff fafa 	bl	8001c7c <readAndPrintData>
 8002688:	687c      	ldr	r4, [r7, #4]
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_IRQHandler(&htim3);
 8002694:	4805      	ldr	r0, [pc, #20]	@ (80026ac <TIM3_IRQHandler+0x54>)
 8002696:	f002 fc93 	bl	8004fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000350 	.word	0x20000350
 80026a8:	2000031c 	.word	0x2000031c
 80026ac:	200002d4 	.word	0x200002d4

080026b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ca:	f004 fc9b 	bl	8007004 <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2216      	movs	r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
  return -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe7 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <_exit+0x12>

080026f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e00a      	b.n	800271e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002708:	f3af 8000 	nop.w
 800270c:	4601      	mov	r1, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	b2ca      	uxtb	r2, r1
 8002716:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	dbf0      	blt.n	8002708 <_read+0x12>
  }

  return len;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002758:	605a      	str	r2, [r3, #4]
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_isatty>:

int _isatty(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	@ (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f004 fc1c 	bl	8007004 <__errno>
 80027cc:	4603      	mov	r3, r0
 80027ce:	220c      	movs	r2, #12
 80027d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <_sbrk+0x64>)
 80027e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20020000 	.word	0x20020000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	20000360 	.word	0x20000360
 8002800:	200004b8 	.word	0x200004b8

08002804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <SystemInit+0x20>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <SystemInit+0x20>)
 8002810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002834:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002840:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002844:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002848:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002850:	e000      	b.n	8002854 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002852:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002854:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f9      	beq.n	8002852 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800285e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_write>:
#include "stm32f4xx_hal.h"

// overloaded write function for redirecting output to SWV
int _write(int file, char *ptr, int len)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e009      	b.n	800289c <_write+0x26>
  {
	ITM_SendChar(*ptr++);	// print to debug port instead
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	60ba      	str	r2, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ffc9 	bl	8002828 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbf1      	blt.n	8002888 <_write+0x12>
  }
  return len;
 80028a4:	687b      	ldr	r3, [r7, #4]
  // then enable the SWD, default clock of 84 is okay

  // to see the output, in Window/Show View/SWV enable the data console
  // start the debug, go to Data Console tab, click the settings icon, put a check on port 0, click ok
  // then enable the trace with the red circle button and resume the program
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028b4:	f7ff ffa6 	bl	8002804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	@ (80028ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	@ (80028f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	@ (80028fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028de:	f004 fb97 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7ff fa39 	bl	8001d58 <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028f4:	08009168 	.word	0x08009168
  ldr r2, =_sbss
 80028f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028fc:	200004b4 	.word	0x200004b4

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_Init+0x40>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_Init+0x40>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_Init+0x40>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 f94f 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002932:	2000      	movs	r0, #0
 8002934:	f000 f808 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002938:	f7ff fd2e 	bl	8002398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f967 	bl	8002c3a <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f000 f92f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000008 	.word	0x20000008
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000364 	.word	0x20000364

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000364 	.word	0x20000364

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000008 	.word	0x20000008

08002a30 <__NVIC_SetPriorityGrouping>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e165      	b.n	8002f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8154 	bne.w	8002f36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80ae 	beq.w	8002f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dea:	4b5a      	ldr	r3, [pc, #360]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a58      	ldr	r2, [pc, #352]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x308>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d025      	beq.n	8002e6e <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_GPIO_Init+0x30c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01f      	beq.n	8002e6a <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_GPIO_Init+0x310>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d019      	beq.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_GPIO_Init+0x314>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f6c <HAL_GPIO_Init+0x318>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00d      	beq.n	8002e5e <HAL_GPIO_Init+0x20a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	@ (8002f70 <HAL_GPIO_Init+0x31c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <HAL_GPIO_Init+0x206>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a49      	ldr	r2, [pc, #292]	@ (8002f74 <HAL_GPIO_Init+0x320>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_GPIO_Init+0x202>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00c      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e56:	2307      	movs	r3, #7
 8002e58:	e00a      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	e008      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e62:	2303      	movs	r3, #3
 8002e64:	e004      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f002 0203 	and.w	r2, r2, #3
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	4093      	lsls	r3, r2
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e80:	4935      	ldr	r1, [pc, #212]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	3302      	adds	r3, #2
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a26      	ldr	r2, [pc, #152]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee2:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f06:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f30:	4a11      	ldr	r2, [pc, #68]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	f67f ae96 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3724      	adds	r7, #36	@ 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40021400 	.word	0x40021400
 8002f74:	40021800 	.word	0x40021800
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc0:	887a      	ldrh	r2, [r7, #2]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	041a      	lsls	r2, r3, #16
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	400b      	ands	r3, r1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e12b      	b.n	800324e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f9ec 	bl	80023e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	@ 0x24
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003048:	f001 f8e2 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a81      	ldr	r2, [pc, #516]	@ (8003258 <HAL_I2C_Init+0x274>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d807      	bhi.n	8003068 <HAL_I2C_Init+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a80      	ldr	r2, [pc, #512]	@ (800325c <HAL_I2C_Init+0x278>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e006      	b.n	8003076 <HAL_I2C_Init+0x92>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a7d      	ldr	r2, [pc, #500]	@ (8003260 <HAL_I2C_Init+0x27c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0e7      	b.n	800324e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a78      	ldr	r2, [pc, #480]	@ (8003264 <HAL_I2C_Init+0x280>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9b      	lsrs	r3, r3, #18
 8003088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003258 <HAL_I2C_Init+0x274>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d802      	bhi.n	80030b8 <HAL_I2C_Init+0xd4>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3301      	adds	r3, #1
 80030b6:	e009      	b.n	80030cc <HAL_I2C_Init+0xe8>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a69      	ldr	r2, [pc, #420]	@ (8003268 <HAL_I2C_Init+0x284>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	3301      	adds	r3, #1
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	495c      	ldr	r1, [pc, #368]	@ (8003258 <HAL_I2C_Init+0x274>)
 80030e8:	428b      	cmp	r3, r1
 80030ea:	d819      	bhi.n	8003120 <HAL_I2C_Init+0x13c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e59      	subs	r1, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003100:	400b      	ands	r3, r1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_I2C_Init+0x138>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e59      	subs	r1, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fbb1 f3f3 	udiv	r3, r1, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	e051      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800311c:	2304      	movs	r3, #4
 800311e:	e04f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d111      	bne.n	800314c <HAL_I2C_Init+0x168>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e012      	b.n	8003172 <HAL_I2C_Init+0x18e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x196>
 8003176:	2301      	movs	r3, #1
 8003178:	e022      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10e      	bne.n	80031a0 <HAL_I2C_Init+0x1bc>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e58      	subs	r0, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	fbb0 f3f3 	udiv	r3, r0, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Init+0x1dc>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6809      	ldr	r1, [r1, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6911      	ldr	r1, [r2, #16]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	000186a0 	.word	0x000186a0
 800325c:	001e847f 	.word	0x001e847f
 8003260:	003d08ff 	.word	0x003d08ff
 8003264:	431bde83 	.word	0x431bde83
 8003268:	10624dd3 	.word	0x10624dd3

0800326c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	460b      	mov	r3, r1
 8003280:	813b      	strh	r3, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003286:	f7ff fba3 	bl	80029d0 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b20      	cmp	r3, #32
 8003296:	f040 80d9 	bne.w	800344c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2319      	movs	r3, #25
 80032a0:	2201      	movs	r2, #1
 80032a2:	496d      	ldr	r1, [pc, #436]	@ (8003458 <HAL_I2C_Mem_Write+0x1ec>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fc8b 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cc      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Mem_Write+0x56>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0c5      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2221      	movs	r2, #33	@ 0x21
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a4d      	ldr	r2, [pc, #308]	@ (800345c <HAL_I2C_Mem_Write+0x1f0>)
 8003328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800332a:	88f8      	ldrh	r0, [r7, #6]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fac2 	bl	80038c4 <I2C_RequestMemoryWrite>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d052      	beq.n	80033ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e081      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fd50 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_I2C_Mem_Write+0x180>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1aa      	bne.n	800334a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fd43 	bl	8003e84 <I2C_WaitOnBTFFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e016      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	@ 0x30
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7ff faa9 	bl	80029d0 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 8214 	bne.w	80038b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	497b      	ldr	r1, [pc, #492]	@ (8003684 <HAL_I2C_Mem_Read+0x224>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb91 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	e207      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x56>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e200      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2222      	movs	r2, #34	@ 0x22
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	@ 0x40
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800350c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a5b      	ldr	r2, [pc, #364]	@ (8003688 <HAL_I2C_Mem_Read+0x228>)
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa5e 	bl	80039f0 <I2C_RequestMemoryRead>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1bc      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e190      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11b      	bne.n	80035ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e170      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11b      	bne.n	80035ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	e150      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003604:	e144      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80f1 	bhi.w	80037f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b01      	cmp	r3, #1
 8003616:	d123      	bne.n	8003660 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc79 	bl	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e145      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800365e:	e117      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	2b02      	cmp	r3, #2
 8003666:	d14e      	bne.n	8003706 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	2200      	movs	r2, #0
 8003670:	4906      	ldr	r1, [pc, #24]	@ (800368c <HAL_I2C_Mem_Read+0x22c>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 faa4 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e11a      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
 8003682:	bf00      	nop
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000
 800368c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003704:	e0c4      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	2200      	movs	r2, #0
 800370e:	496c      	ldr	r1, [pc, #432]	@ (80038c0 <HAL_I2C_Mem_Read+0x460>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa55 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0cb      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003768:	2200      	movs	r2, #0
 800376a:	4955      	ldr	r1, [pc, #340]	@ (80038c0 <HAL_I2C_Mem_Read+0x460>)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fa27 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e09d      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037f0:	e04e      	b.n	8003890 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fb8c 	bl	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e058      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d124      	bne.n	8003890 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f aeb6 	bne.w	8003606 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	@ 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010004 	.word	0x00010004

080038c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f960 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003914:	d103      	bne.n	800391e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e05f      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	492d      	ldr	r1, [pc, #180]	@ (80039ec <I2C_RequestMemoryWrite+0x128>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f9bb 	bl	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e04c      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa46 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02b      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	611a      	str	r2, [r3, #16]
 800399a:	e021      	b.n	80039e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fa20 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d107      	bne.n	80039d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e005      	b.n	80039e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d6:	893b      	ldrh	r3, [r7, #8]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	00010002 	.word	0x00010002

080039f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8c2 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a50:	d103      	bne.n	8003a5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0aa      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	4952      	ldr	r1, [pc, #328]	@ (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f91d 	bl	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e097      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f9a8 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e076      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e021      	b.n	8003b1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f982 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e050      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f967 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d107      	bne.n	8003b44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e035      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f82b 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b7e:	d103      	bne.n	8003b88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e013      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b8c:	897b      	ldrh	r3, [r7, #10]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	4906      	ldr	r1, [pc, #24]	@ (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f886 	bl	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	00010002 	.word	0x00010002

08003bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	e048      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d044      	beq.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fef9 	bl	80029d0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d139      	bne.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10d      	bne.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	e00c      	b.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d116      	bne.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e023      	b.n	8003cac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	e00c      	b.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d093      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cc2:	e071      	b.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd2:	d123      	bne.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e067      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d041      	beq.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d24:	f7fe fe54 	bl	80029d0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d136      	bne.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf14      	ite	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	2300      	moveq	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	e00b      	b.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e021      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10c      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	43da      	mvns	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e00b      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f af6d 	bne.w	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e00:	e034      	b.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f8e3 	bl	8003fce <I2C_IsAcknowledgeFailed>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e034      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d028      	beq.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fe fdd9 	bl	80029d0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b80      	cmp	r3, #128	@ 0x80
 8003e3c:	d016      	beq.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	2b80      	cmp	r3, #128	@ 0x80
 8003e78:	d1c3      	bne.n	8003e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e90:	e034      	b.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f89b 	bl	8003fce <I2C_IsAcknowledgeFailed>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e034      	b.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d028      	beq.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fe fd91 	bl	80029d0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11d      	bne.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d016      	beq.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e007      	b.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d1c3      	bne.n	8003e92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f20:	e049      	b.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d119      	bne.n	8003f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0210 	mvn.w	r2, #16
 8003f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e030      	b.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f64:	f7fe fd34 	bl	80029d0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d302      	bcc.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11d      	bne.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b40      	cmp	r3, #64	@ 0x40
 8003f86:	d016      	beq.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e007      	b.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d1ae      	bne.n	8003f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe4:	d11b      	bne.n	800401e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	f043 0204 	orr.w	r2, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fe fc58 	bl	80029d0 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe fc54 	bl	80029d0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f855 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490a      	ldr	r1, [pc, #40]	@ (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fbb8 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08008dcc 	.word	0x08008dcc
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	@ (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000000 	.word	0x20000000

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	@ (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	08008ddc 	.word	0x08008ddc

08004238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800423c:	f7ff ffdc 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0b5b      	lsrs	r3, r3, #13
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	08008ddc 	.word	0x08008ddc

08004260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0ae      	sub	sp, #184	@ 0xb8
 8004266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004286:	4bcb      	ldr	r3, [pc, #812]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b0c      	cmp	r3, #12
 8004290:	f200 8206 	bhi.w	80046a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004294:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080046a1 	.word	0x080046a1
 80042a4:	080046a1 	.word	0x080046a1
 80042a8:	080046a1 	.word	0x080046a1
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080046a1 	.word	0x080046a1
 80042b4:	080046a1 	.word	0x080046a1
 80042b8:	080046a1 	.word	0x080046a1
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080046a1 	.word	0x080046a1
 80042c4:	080046a1 	.word	0x080046a1
 80042c8:	080046a1 	.word	0x080046a1
 80042cc:	080044d1 	.word	0x080044d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4bb9      	ldr	r3, [pc, #740]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80042d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80042d6:	e1e7      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d8:	4bb8      	ldr	r3, [pc, #736]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80042da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042de:	e1e3      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e0:	4bb4      	ldr	r3, [pc, #720]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ec:	4bb1      	ldr	r3, [pc, #708]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d071      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4bae      	ldr	r3, [pc, #696]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004304:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800431a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	0159      	lsls	r1, r3, #5
 800432c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004330:	0150      	lsls	r0, r2, #5
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4621      	mov	r1, r4
 8004338:	1a51      	subs	r1, r2, r1
 800433a:	6439      	str	r1, [r7, #64]	@ 0x40
 800433c:	4629      	mov	r1, r5
 800433e:	eb63 0301 	sbc.w	r3, r3, r1
 8004342:	647b      	str	r3, [r7, #68]	@ 0x44
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004350:	4649      	mov	r1, r9
 8004352:	018b      	lsls	r3, r1, #6
 8004354:	4641      	mov	r1, r8
 8004356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800435a:	4641      	mov	r1, r8
 800435c:	018a      	lsls	r2, r1, #6
 800435e:	4641      	mov	r1, r8
 8004360:	1a51      	subs	r1, r2, r1
 8004362:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004364:	4649      	mov	r1, r9
 8004366:	eb63 0301 	sbc.w	r3, r3, r1
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004378:	4649      	mov	r1, r9
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4641      	mov	r1, r8
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4622      	mov	r2, r4
 800438e:	189b      	adds	r3, r3, r2
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
 8004392:	462b      	mov	r3, r5
 8004394:	460a      	mov	r2, r1
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043a8:	4629      	mov	r1, r5
 80043aa:	024b      	lsls	r3, r1, #9
 80043ac:	4621      	mov	r1, r4
 80043ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b2:	4621      	mov	r1, r4
 80043b4:	024a      	lsls	r2, r1, #9
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043cc:	f7fc fc5c 	bl	8000c88 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043da:	e067      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043dc:	4b75      	ldr	r3, [pc, #468]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80043ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f6:	2300      	movs	r3, #0
 80043f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	0159      	lsls	r1, r3, #5
 800440c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004410:	0150      	lsls	r0, r2, #5
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4621      	mov	r1, r4
 8004418:	1a51      	subs	r1, r2, r1
 800441a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800441c:	4629      	mov	r1, r5
 800441e:	eb63 0301 	sbc.w	r3, r3, r1
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004430:	4649      	mov	r1, r9
 8004432:	018b      	lsls	r3, r1, #6
 8004434:	4641      	mov	r1, r8
 8004436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443a:	4641      	mov	r1, r8
 800443c:	018a      	lsls	r2, r1, #6
 800443e:	4641      	mov	r1, r8
 8004440:	ebb2 0a01 	subs.w	sl, r2, r1
 8004444:	4649      	mov	r1, r9
 8004446:	eb63 0b01 	sbc.w	fp, r3, r1
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004456:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800445a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445e:	4692      	mov	sl, r2
 8004460:	469b      	mov	fp, r3
 8004462:	4623      	mov	r3, r4
 8004464:	eb1a 0303 	adds.w	r3, sl, r3
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	462b      	mov	r3, r5
 800446c:	eb4b 0303 	adc.w	r3, fp, r3
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004494:	2200      	movs	r2, #0
 8004496:	673b      	str	r3, [r7, #112]	@ 0x70
 8004498:	677a      	str	r2, [r7, #116]	@ 0x74
 800449a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800449e:	f7fc fbf3 	bl	8000c88 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ac:	4b41      	ldr	r3, [pc, #260]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80044be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044ce:	e0eb      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d0:	4b38      	ldr	r3, [pc, #224]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044dc:	4b35      	ldr	r3, [pc, #212]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d06b      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e8:	4b32      	ldr	r3, [pc, #200]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	2200      	movs	r2, #0
 80044f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80044fc:	2300      	movs	r3, #0
 80044fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004500:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004504:	4622      	mov	r2, r4
 8004506:	462b      	mov	r3, r5
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0159      	lsls	r1, r3, #5
 8004512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004516:	0150      	lsls	r0, r2, #5
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4621      	mov	r1, r4
 800451e:	1a51      	subs	r1, r2, r1
 8004520:	61b9      	str	r1, [r7, #24]
 8004522:	4629      	mov	r1, r5
 8004524:	eb63 0301 	sbc.w	r3, r3, r1
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004536:	4659      	mov	r1, fp
 8004538:	018b      	lsls	r3, r1, #6
 800453a:	4651      	mov	r1, sl
 800453c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004540:	4651      	mov	r1, sl
 8004542:	018a      	lsls	r2, r1, #6
 8004544:	4651      	mov	r1, sl
 8004546:	ebb2 0801 	subs.w	r8, r2, r1
 800454a:	4659      	mov	r1, fp
 800454c:	eb63 0901 	sbc.w	r9, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004564:	4690      	mov	r8, r2
 8004566:	4699      	mov	r9, r3
 8004568:	4623      	mov	r3, r4
 800456a:	eb18 0303 	adds.w	r3, r8, r3
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	462b      	mov	r3, r5
 8004572:	eb49 0303 	adc.w	r3, r9, r3
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004584:	4629      	mov	r1, r5
 8004586:	024b      	lsls	r3, r1, #9
 8004588:	4621      	mov	r1, r4
 800458a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800458e:	4621      	mov	r1, r4
 8004590:	024a      	lsls	r2, r1, #9
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800459a:	2200      	movs	r2, #0
 800459c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800459e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045a4:	f7fc fb70 	bl	8000c88 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b2:	e065      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x420>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c0:	4b3d      	ldr	r3, [pc, #244]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	2200      	movs	r2, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	4611      	mov	r1, r2
 80045cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d2:	2300      	movs	r3, #0
 80045d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80045da:	4642      	mov	r2, r8
 80045dc:	464b      	mov	r3, r9
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	0159      	lsls	r1, r3, #5
 80045e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ec:	0150      	lsls	r0, r2, #5
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4641      	mov	r1, r8
 80045f4:	1a51      	subs	r1, r2, r1
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	4649      	mov	r1, r9
 80045fa:	eb63 0301 	sbc.w	r3, r3, r1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800460c:	4659      	mov	r1, fp
 800460e:	018b      	lsls	r3, r1, #6
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004616:	4651      	mov	r1, sl
 8004618:	018a      	lsls	r2, r1, #6
 800461a:	4651      	mov	r1, sl
 800461c:	1a54      	subs	r4, r2, r1
 800461e:	4659      	mov	r1, fp
 8004620:	eb63 0501 	sbc.w	r5, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	00eb      	lsls	r3, r5, #3
 800462e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004632:	00e2      	lsls	r2, r4, #3
 8004634:	4614      	mov	r4, r2
 8004636:	461d      	mov	r5, r3
 8004638:	4643      	mov	r3, r8
 800463a:	18e3      	adds	r3, r4, r3
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	464b      	mov	r3, r9
 8004640:	eb45 0303 	adc.w	r3, r5, r3
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004652:	4629      	mov	r1, r5
 8004654:	028b      	lsls	r3, r1, #10
 8004656:	4621      	mov	r1, r4
 8004658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800465c:	4621      	mov	r1, r4
 800465e:	028a      	lsls	r2, r1, #10
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004668:	2200      	movs	r2, #0
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800466c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800466e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004672:	f7fc fb09 	bl	8000c88 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4613      	mov	r3, r2
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004680:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0f1b      	lsrs	r3, r3, #28
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800468e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800469e:	e003      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80046a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	37b8      	adds	r7, #184	@ 0xb8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400

080046c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e28d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8083 	beq.w	80047e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046e0:	4b94      	ldr	r3, [pc, #592]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046ec:	4b91      	ldr	r3, [pc, #580]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b8b      	ldr	r3, [pc, #556]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b84      	ldr	r3, [pc, #528]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x124>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e25a      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x90>
 8004742:	4b7c      	ldr	r3, [pc, #496]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7b      	ldr	r2, [pc, #492]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xb4>
 800475a:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b73      	ldr	r3, [pc, #460]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a72      	ldr	r2, [pc, #456]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xcc>
 8004774:	4b6f      	ldr	r3, [pc, #444]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6c      	ldr	r3, [pc, #432]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6b      	ldr	r2, [pc, #428]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe f91c 	bl	80029d0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe f918 	bl	80029d0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21f      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b61      	ldr	r3, [pc, #388]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xdc>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f908 	bl	80029d0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe f904 	bl	80029d0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e20b      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b57      	ldr	r3, [pc, #348]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x104>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06f      	beq.n	80048d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047f2:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800480a:	4b4a      	ldr	r3, [pc, #296]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b44      	ldr	r3, [pc, #272]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b41      	ldr	r3, [pc, #260]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1d3      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4937      	ldr	r1, [pc, #220]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b34      	ldr	r3, [pc, #208]	@ (8004938 <HAL_RCC_OscConfig+0x278>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe f8b1 	bl	80029d0 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004872:	f7fe f8ad 	bl	80029d0 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1b4      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4925      	ldr	r1, [pc, #148]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	@ (8004938 <HAL_RCC_OscConfig+0x278>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fe f890 	bl	80029d0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fe f88c 	bl	80029d0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e193      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	@ (800493c <HAL_RCC_OscConfig+0x27c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fe f870 	bl	80029d0 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fe f86c 	bl	80029d0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e173      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_OscConfig+0x274>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x234>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0x27c>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fe f859 	bl	80029d0 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00e      	b.n	8004940 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004922:	f7fe f855 	bl	80029d0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e15c      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004934:	40023800 	.word	0x40023800
 8004938:	42470000 	.word	0x42470000
 800493c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b8a      	ldr	r3, [pc, #552]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ea      	bne.n	8004922 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8097 	beq.w	8004a88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b83      	ldr	r3, [pc, #524]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	4a7e      	ldr	r2, [pc, #504]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	@ 0x40
 800497a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b79      	ldr	r3, [pc, #484]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b76      	ldr	r3, [pc, #472]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fe f815 	bl	80029d0 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fe f811 	bl	80029d0 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e118      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b70 <HAL_RCC_OscConfig+0x4b0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x31e>
 80049d0:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x340>
 80049e6:	4b61      	ldr	r3, [pc, #388]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a5d      	ldr	r2, [pc, #372]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x358>
 8004a00:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a59      	ldr	r2, [pc, #356]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0c:	4b57      	ldr	r3, [pc, #348]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	4a56      	ldr	r2, [pc, #344]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd ffd6 	bl	80029d0 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd ffd2 	bl	80029d0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0d7      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x368>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd ffc0 	bl	80029d0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fd ffbc 	bl	80029d0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0c1      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	4b40      	ldr	r3, [pc, #256]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	4a3a      	ldr	r2, [pc, #232]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80ad 	beq.w	8004bec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a92:	4b36      	ldr	r3, [pc, #216]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d060      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d145      	bne.n	8004b32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd ff90 	bl	80029d0 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd ff8c 	bl	80029d0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e093      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	491b      	ldr	r1, [pc, #108]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd ff61 	bl	80029d0 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd ff5d 	bl	80029d0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e064      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x452>
 8004b30:	e05c      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_RCC_OscConfig+0x4b4>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd ff4a 	bl	80029d0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd ff46 	bl	80029d0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04d      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x480>
 8004b5e:	e045      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e040      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40007000 	.word	0x40007000
 8004b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b78:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <HAL_RCC_OscConfig+0x538>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d129      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d122      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d119      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d10f      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800

08004bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e041      	b.n	8004c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd fc28 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f000 fc6c 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d001      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e04e      	b.n	8004d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a23      	ldr	r2, [pc, #140]	@ (8004d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cde:	d01d      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1e      	ldr	r2, [pc, #120]	@ (8004d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1b      	ldr	r2, [pc, #108]	@ (8004d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x80>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a18      	ldr	r2, [pc, #96]	@ (8004d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d010      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	e007      	b.n	8004d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40010400 	.word	0x40010400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40001800 	.word	0x40001800

08004d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e041      	b.n	8004e12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f839 	bl	8004e1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fbac 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <HAL_TIM_PWM_Start+0x24>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	e022      	b.n	8004e9a <HAL_TIM_PWM_Start+0x6a>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d109      	bne.n	8004e6e <HAL_TIM_PWM_Start+0x3e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e015      	b.n	8004e9a <HAL_TIM_PWM_Start+0x6a>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d109      	bne.n	8004e88 <HAL_TIM_PWM_Start+0x58>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e008      	b.n	8004e9a <HAL_TIM_PWM_Start+0x6a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07c      	b.n	8004f9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0x82>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_PWM_Start+0xaa>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x92>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_PWM_Start+0xaa>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_PWM_Start+0xaa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fe0e 	bl	8005b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <HAL_TIM_PWM_Start+0x174>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_PWM_Start+0xcc>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <HAL_TIM_PWM_Start+0x178>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_TIM_PWM_Start+0xd0>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_PWM_Start+0xd2>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <HAL_TIM_PWM_Start+0x174>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_TIM_PWM_Start+0x17c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <HAL_TIM_PWM_Start+0x180>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_TIM_PWM_Start+0x184>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a16      	ldr	r2, [pc, #88]	@ (8004fa8 <HAL_TIM_PWM_Start+0x178>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	@ (8004fb8 <HAL_TIM_PWM_Start+0x188>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x136>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a16      	ldr	r2, [pc, #88]	@ (8004fbc <HAL_TIM_PWM_Start+0x18c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d010      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e007      	b.n	8004f9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40001800 	.word	0x40001800

08004fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0202 	mvn.w	r2, #2
 8004ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa65 	bl	80054da <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa57 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa68 	bl	80054ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0204 	mvn.w	r2, #4
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa3f 	bl	80054da <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa31 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fa42 	bl	80054ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0208 	mvn.w	r2, #8
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2204      	movs	r2, #4
 8005092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa19 	bl	80054da <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa0b 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fa1c 	bl	80054ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0210 	mvn.w	r2, #16
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2208      	movs	r2, #8
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9f3 	bl	80054da <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9e5 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9f6 	bl	80054ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0201 	mvn.w	r2, #1
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f9c3 	bl	80054b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fdd8 	bl	8005d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9c7 	bl	8005502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0220 	mvn.w	r2, #32
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fdaa 	bl	8005cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e0ae      	b.n	800531c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	f200 809f 	bhi.w	800530c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051ce:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005209 	.word	0x08005209
 80051d8:	0800530d 	.word	0x0800530d
 80051dc:	0800530d 	.word	0x0800530d
 80051e0:	0800530d 	.word	0x0800530d
 80051e4:	08005249 	.word	0x08005249
 80051e8:	0800530d 	.word	0x0800530d
 80051ec:	0800530d 	.word	0x0800530d
 80051f0:	0800530d 	.word	0x0800530d
 80051f4:	0800528b 	.word	0x0800528b
 80051f8:	0800530d 	.word	0x0800530d
 80051fc:	0800530d 	.word	0x0800530d
 8005200:	0800530d 	.word	0x0800530d
 8005204:	080052cb 	.word	0x080052cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fa2e 	bl	8005670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0208 	orr.w	r2, r2, #8
 8005222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
      break;
 8005246:	e064      	b.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fa7e 	bl	8005750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	619a      	str	r2, [r3, #24]
      break;
 8005288:	e043      	b.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fad3 	bl	800583c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0208 	orr.w	r2, r2, #8
 80052a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0204 	bic.w	r2, r2, #4
 80052b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69d9      	ldr	r1, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	61da      	str	r2, [r3, #28]
      break;
 80052c8:	e023      	b.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fb27 	bl	8005924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	021a      	lsls	r2, r3, #8
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	61da      	str	r2, [r3, #28]
      break;
 800530a:	e002      	b.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIM_ConfigClockSource+0x1c>
 800533c:	2302      	movs	r3, #2
 800533e:	e0b4      	b.n	80054aa <HAL_TIM_ConfigClockSource+0x186>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005378:	d03e      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xd4>
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537e:	f200 8087 	bhi.w	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	f000 8086 	beq.w	8005496 <HAL_TIM_ConfigClockSource+0x172>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538e:	d87f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b70      	cmp	r3, #112	@ 0x70
 8005392:	d01a      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0xa6>
 8005394:	2b70      	cmp	r3, #112	@ 0x70
 8005396:	d87b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b60      	cmp	r3, #96	@ 0x60
 800539a:	d050      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x11a>
 800539c:	2b60      	cmp	r3, #96	@ 0x60
 800539e:	d877      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b50      	cmp	r3, #80	@ 0x50
 80053a2:	d03c      	beq.n	800541e <HAL_TIM_ConfigClockSource+0xfa>
 80053a4:	2b50      	cmp	r3, #80	@ 0x50
 80053a6:	d873      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d058      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x13a>
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d86f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b30      	cmp	r3, #48	@ 0x30
 80053b2:	d064      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	2b30      	cmp	r3, #48	@ 0x30
 80053b6:	d86b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d060      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d867      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d05a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	e062      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	f000 fb73 	bl	8005ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	609a      	str	r2, [r3, #8]
      break;
 80053f6:	e04f      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	f000 fb5c 	bl	8005ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800541a:	609a      	str	r2, [r3, #8]
      break;
 800541c:	e03c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	461a      	mov	r2, r3
 800542c:	f000 fad0 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2150      	movs	r1, #80	@ 0x50
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fb29 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800543c:	e02c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	461a      	mov	r2, r3
 800544c:	f000 faef 	bl	8005a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2160      	movs	r1, #96	@ 0x60
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb19 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800545c:	e01c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fab0 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fb09 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800547c:	e00c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 fb00 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800548e:	e003      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e000      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a46      	ldr	r2, [pc, #280]	@ (8005644 <TIM_Base_SetConfig+0x12c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a43      	ldr	r2, [pc, #268]	@ (8005648 <TIM_Base_SetConfig+0x130>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a42      	ldr	r2, [pc, #264]	@ (800564c <TIM_Base_SetConfig+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a41      	ldr	r2, [pc, #260]	@ (8005650 <TIM_Base_SetConfig+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a40      	ldr	r2, [pc, #256]	@ (8005654 <TIM_Base_SetConfig+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a35      	ldr	r2, [pc, #212]	@ (8005644 <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d027      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a32      	ldr	r2, [pc, #200]	@ (8005648 <TIM_Base_SetConfig+0x130>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d023      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a31      	ldr	r2, [pc, #196]	@ (800564c <TIM_Base_SetConfig+0x134>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a30      	ldr	r2, [pc, #192]	@ (8005650 <TIM_Base_SetConfig+0x138>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2f      	ldr	r2, [pc, #188]	@ (8005654 <TIM_Base_SetConfig+0x13c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2e      	ldr	r2, [pc, #184]	@ (8005658 <TIM_Base_SetConfig+0x140>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2d      	ldr	r2, [pc, #180]	@ (800565c <TIM_Base_SetConfig+0x144>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005660 <TIM_Base_SetConfig+0x148>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005664 <TIM_Base_SetConfig+0x14c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <TIM_Base_SetConfig+0x150>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a29      	ldr	r2, [pc, #164]	@ (800566c <TIM_Base_SetConfig+0x154>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d108      	bne.n	80055dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a10      	ldr	r2, [pc, #64]	@ (8005644 <TIM_Base_SetConfig+0x12c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <TIM_Base_SetConfig+0x13c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d103      	bne.n	8005618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]
  }
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800
 8005664:	40001800 	.word	0x40001800
 8005668:	40001c00 	.word	0x40001c00
 800566c:	40002000 	.word	0x40002000

08005670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 0201 	bic.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 0302 	bic.w	r3, r3, #2
 80056b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a20      	ldr	r2, [pc, #128]	@ (8005748 <TIM_OC1_SetConfig+0xd8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC1_SetConfig+0x64>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <TIM_OC1_SetConfig+0xdc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10c      	bne.n	80056ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0308 	bic.w	r3, r3, #8
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0304 	bic.w	r3, r3, #4
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <TIM_OC1_SetConfig+0xd8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC1_SetConfig+0x8e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a14      	ldr	r2, [pc, #80]	@ (800574c <TIM_OC1_SetConfig+0xdc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d111      	bne.n	8005722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f023 0210 	bic.w	r2, r3, #16
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0320 	bic.w	r3, r3, #32
 800579a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <TIM_OC2_SetConfig+0xe4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC2_SetConfig+0x68>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <TIM_OC2_SetConfig+0xe8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10d      	bne.n	80057d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a17      	ldr	r2, [pc, #92]	@ (8005834 <TIM_OC2_SetConfig+0xe4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC2_SetConfig+0x94>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <TIM_OC2_SetConfig+0xe8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d113      	bne.n	800580c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400

0800583c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a21      	ldr	r2, [pc, #132]	@ (800591c <TIM_OC3_SetConfig+0xe0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_OC3_SetConfig+0x66>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a20      	ldr	r2, [pc, #128]	@ (8005920 <TIM_OC3_SetConfig+0xe4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10d      	bne.n	80058be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a16      	ldr	r2, [pc, #88]	@ (800591c <TIM_OC3_SetConfig+0xe0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC3_SetConfig+0x92>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <TIM_OC3_SetConfig+0xe4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d113      	bne.n	80058f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400

08005924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800596e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <TIM_OC4_SetConfig+0xa4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC4_SetConfig+0x68>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a11      	ldr	r2, [pc, #68]	@ (80059cc <TIM_OC4_SetConfig+0xa8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40010400 	.word	0x40010400

080059d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 030a 	bic.w	r3, r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f023 0210 	bic.w	r2, r3, #16
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f043 0307 	orr.w	r3, r3, #7
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2201      	movs	r2, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e05a      	b.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a21      	ldr	r2, [pc, #132]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1d      	ldr	r2, [pc, #116]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1a      	ldr	r2, [pc, #104]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a15      	ldr	r2, [pc, #84]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10c      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40001800 	.word	0x40001800

08005c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e03d      	b.n	8005ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e042      	b.n	8005dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fc fc14 	bl	8002568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2224      	movs	r2, #36	@ 0x24
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f82b 	bl	8005db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db8:	b0c0      	sub	sp, #256	@ 0x100
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	ea40 0301 	orr.w	r3, r0, r1
 8005ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e0c:	f021 010c 	bic.w	r1, r1, #12
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2e:	6999      	ldr	r1, [r3, #24]
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	ea40 0301 	orr.w	r3, r0, r1
 8005e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b8f      	ldr	r3, [pc, #572]	@ (8006080 <UART_SetConfig+0x2cc>)
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d005      	beq.n	8005e54 <UART_SetConfig+0xa0>
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006084 <UART_SetConfig+0x2d0>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d104      	bne.n	8005e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fe f9f0 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 8005e58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e5c:	e003      	b.n	8005e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e5e:	f7fe f9d7 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8005e62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e70:	f040 810c 	bne.w	800608c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	1891      	adds	r1, r2, r2
 8005e8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e96:	4621      	mov	r1, r4
 8005e98:	eb12 0801 	adds.w	r8, r2, r1
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	eb43 0901 	adc.w	r9, r3, r1
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	4699      	mov	r9, r3
 8005eba:	4623      	mov	r3, r4
 8005ebc:	eb18 0303 	adds.w	r3, r8, r3
 8005ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	eb49 0303 	adc.w	r3, r9, r3
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	18db      	adds	r3, r3, r3
 8005ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ee8:	4613      	mov	r3, r2
 8005eea:	eb42 0303 	adc.w	r3, r2, r3
 8005eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ef8:	f7fa fec6 	bl	8000c88 <__aeabi_uldivmod>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4b61      	ldr	r3, [pc, #388]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005f02:	fba3 2302 	umull	r2, r3, r3, r2
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	011c      	lsls	r4, r3, #4
 8005f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	1891      	adds	r1, r2, r2
 8005f22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f24:	415b      	adcs	r3, r3
 8005f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f32:	4649      	mov	r1, r9
 8005f34:	eb43 0b01 	adc.w	fp, r3, r1
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f4c:	4692      	mov	sl, r2
 8005f4e:	469b      	mov	fp, r3
 8005f50:	4643      	mov	r3, r8
 8005f52:	eb1a 0303 	adds.w	r3, sl, r3
 8005f56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	18db      	adds	r3, r3, r3
 8005f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7e:	4613      	mov	r3, r2
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f8e:	f7fa fe7b 	bl	8000c88 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	4b3b      	ldr	r3, [pc, #236]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2264      	movs	r2, #100	@ 0x64
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	1acb      	subs	r3, r1, r3
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fae:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fbc:	441c      	add	r4, r3
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	1851      	adds	r1, r2, r1
 8005fe4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	414b      	adcs	r3, r1
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ff8:	4659      	mov	r1, fp
 8005ffa:	00cb      	lsls	r3, r1, #3
 8005ffc:	4651      	mov	r1, sl
 8005ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006002:	4651      	mov	r1, sl
 8006004:	00ca      	lsls	r2, r1, #3
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	4603      	mov	r3, r0
 800600c:	4642      	mov	r2, r8
 800600e:	189b      	adds	r3, r3, r2
 8006010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006014:	464b      	mov	r3, r9
 8006016:	460a      	mov	r2, r1
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800602c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006034:	460b      	mov	r3, r1
 8006036:	18db      	adds	r3, r3, r3
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800603a:	4613      	mov	r3, r2
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800604a:	f7fa fe1d 	bl	8000c88 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <UART_SetConfig+0x2d4>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	2164      	movs	r1, #100	@ 0x64
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	3332      	adds	r3, #50	@ 0x32
 8006066:	4a08      	ldr	r2, [pc, #32]	@ (8006088 <UART_SetConfig+0x2d4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f003 0207 	and.w	r2, r3, #7
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4422      	add	r2, r4
 800607a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800607c:	e106      	b.n	800628c <UART_SetConfig+0x4d8>
 800607e:	bf00      	nop
 8006080:	40011000 	.word	0x40011000
 8006084:	40011400 	.word	0x40011400
 8006088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800608c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006096:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800609a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	6239      	str	r1, [r7, #32]
 80060a6:	415b      	adcs	r3, r3
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ae:	4641      	mov	r1, r8
 80060b0:	1854      	adds	r4, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb43 0501 	adc.w	r5, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	00eb      	lsls	r3, r5, #3
 80060c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c6:	00e2      	lsls	r2, r4, #3
 80060c8:	4614      	mov	r4, r2
 80060ca:	461d      	mov	r5, r3
 80060cc:	4643      	mov	r3, r8
 80060ce:	18e3      	adds	r3, r4, r3
 80060d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060d4:	464b      	mov	r3, r9
 80060d6:	eb45 0303 	adc.w	r3, r5, r3
 80060da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060fa:	4629      	mov	r1, r5
 80060fc:	008b      	lsls	r3, r1, #2
 80060fe:	4621      	mov	r1, r4
 8006100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006104:	4621      	mov	r1, r4
 8006106:	008a      	lsls	r2, r1, #2
 8006108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800610c:	f7fa fdbc 	bl	8000c88 <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006116:	fba3 2302 	umull	r2, r3, r3, r2
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	011c      	lsls	r4, r3, #4
 800611e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800612c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	1891      	adds	r1, r2, r2
 8006136:	61b9      	str	r1, [r7, #24]
 8006138:	415b      	adcs	r3, r3
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006140:	4641      	mov	r1, r8
 8006142:	1851      	adds	r1, r2, r1
 8006144:	6139      	str	r1, [r7, #16]
 8006146:	4649      	mov	r1, r9
 8006148:	414b      	adcs	r3, r1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006158:	4659      	mov	r1, fp
 800615a:	00cb      	lsls	r3, r1, #3
 800615c:	4651      	mov	r1, sl
 800615e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006162:	4651      	mov	r1, sl
 8006164:	00ca      	lsls	r2, r1, #3
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	4603      	mov	r3, r0
 800616c:	4642      	mov	r2, r8
 800616e:	189b      	adds	r3, r3, r2
 8006170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006174:	464b      	mov	r3, r9
 8006176:	460a      	mov	r2, r1
 8006178:	eb42 0303 	adc.w	r3, r2, r3
 800617c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800618a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006198:	4649      	mov	r1, r9
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	4641      	mov	r1, r8
 800619e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a2:	4641      	mov	r1, r8
 80061a4:	008a      	lsls	r2, r1, #2
 80061a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061aa:	f7fa fd6d 	bl	8000c88 <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	4b38      	ldr	r3, [pc, #224]	@ (8006298 <UART_SetConfig+0x4e4>)
 80061b6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2264      	movs	r2, #100	@ 0x64
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	1acb      	subs	r3, r1, r3
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	3332      	adds	r3, #50	@ 0x32
 80061c8:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <UART_SetConfig+0x4e4>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061d4:	441c      	add	r4, r3
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80061de:	677a      	str	r2, [r7, #116]	@ 0x74
 80061e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	415b      	adcs	r3, r3
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061f4:	4641      	mov	r1, r8
 80061f6:	1851      	adds	r1, r2, r1
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	4649      	mov	r1, r9
 80061fc:	414b      	adcs	r3, r1
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800620c:	4659      	mov	r1, fp
 800620e:	00cb      	lsls	r3, r1, #3
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006216:	4651      	mov	r1, sl
 8006218:	00ca      	lsls	r2, r1, #3
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	4603      	mov	r3, r0
 8006220:	4642      	mov	r2, r8
 8006222:	189b      	adds	r3, r3, r2
 8006224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006226:	464b      	mov	r3, r9
 8006228:	460a      	mov	r2, r1
 800622a:	eb42 0303 	adc.w	r3, r2, r3
 800622e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	663b      	str	r3, [r7, #96]	@ 0x60
 800623a:	667a      	str	r2, [r7, #100]	@ 0x64
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006248:	4649      	mov	r1, r9
 800624a:	008b      	lsls	r3, r1, #2
 800624c:	4641      	mov	r1, r8
 800624e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006252:	4641      	mov	r1, r8
 8006254:	008a      	lsls	r2, r1, #2
 8006256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800625a:	f7fa fd15 	bl	8000c88 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	@ 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	3332      	adds	r3, #50	@ 0x32
 8006276:	4a08      	ldr	r2, [pc, #32]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4422      	add	r2, r4
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006292:	46bd      	mov	sp, r7
 8006294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006298:	51eb851f 	.word	0x51eb851f

0800629c <__cvt>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	ec57 6b10 	vmov	r6, r7, d0
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	460c      	mov	r4, r1
 80062a8:	4619      	mov	r1, r3
 80062aa:	463b      	mov	r3, r7
 80062ac:	bfbb      	ittet	lt
 80062ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062b2:	461f      	movlt	r7, r3
 80062b4:	2300      	movge	r3, #0
 80062b6:	232d      	movlt	r3, #45	@ 0x2d
 80062b8:	700b      	strb	r3, [r1, #0]
 80062ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062c0:	4691      	mov	r9, r2
 80062c2:	f023 0820 	bic.w	r8, r3, #32
 80062c6:	bfbc      	itt	lt
 80062c8:	4632      	movlt	r2, r6
 80062ca:	4616      	movlt	r6, r2
 80062cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062d0:	d005      	beq.n	80062de <__cvt+0x42>
 80062d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062d6:	d100      	bne.n	80062da <__cvt+0x3e>
 80062d8:	3401      	adds	r4, #1
 80062da:	2102      	movs	r1, #2
 80062dc:	e000      	b.n	80062e0 <__cvt+0x44>
 80062de:	2103      	movs	r1, #3
 80062e0:	ab03      	add	r3, sp, #12
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	ab02      	add	r3, sp, #8
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	ec47 6b10 	vmov	d0, r6, r7
 80062ec:	4653      	mov	r3, sl
 80062ee:	4622      	mov	r2, r4
 80062f0:	f000 ff3e 	bl	8007170 <_dtoa_r>
 80062f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062f8:	4605      	mov	r5, r0
 80062fa:	d119      	bne.n	8006330 <__cvt+0x94>
 80062fc:	f019 0f01 	tst.w	r9, #1
 8006300:	d00e      	beq.n	8006320 <__cvt+0x84>
 8006302:	eb00 0904 	add.w	r9, r0, r4
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 8006312:	b108      	cbz	r0, 8006318 <__cvt+0x7c>
 8006314:	f8cd 900c 	str.w	r9, [sp, #12]
 8006318:	2230      	movs	r2, #48	@ 0x30
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	454b      	cmp	r3, r9
 800631e:	d31e      	bcc.n	800635e <__cvt+0xc2>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006324:	1b5b      	subs	r3, r3, r5
 8006326:	4628      	mov	r0, r5
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	b004      	add	sp, #16
 800632c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006334:	eb00 0904 	add.w	r9, r0, r4
 8006338:	d1e5      	bne.n	8006306 <__cvt+0x6a>
 800633a:	7803      	ldrb	r3, [r0, #0]
 800633c:	2b30      	cmp	r3, #48	@ 0x30
 800633e:	d10a      	bne.n	8006356 <__cvt+0xba>
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f7fa fbde 	bl	8000b08 <__aeabi_dcmpeq>
 800634c:	b918      	cbnz	r0, 8006356 <__cvt+0xba>
 800634e:	f1c4 0401 	rsb	r4, r4, #1
 8006352:	f8ca 4000 	str.w	r4, [sl]
 8006356:	f8da 3000 	ldr.w	r3, [sl]
 800635a:	4499      	add	r9, r3
 800635c:	e7d3      	b.n	8006306 <__cvt+0x6a>
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	9103      	str	r1, [sp, #12]
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e7d9      	b.n	800631a <__cvt+0x7e>

08006366 <__exponent>:
 8006366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006368:	2900      	cmp	r1, #0
 800636a:	bfba      	itte	lt
 800636c:	4249      	neglt	r1, r1
 800636e:	232d      	movlt	r3, #45	@ 0x2d
 8006370:	232b      	movge	r3, #43	@ 0x2b
 8006372:	2909      	cmp	r1, #9
 8006374:	7002      	strb	r2, [r0, #0]
 8006376:	7043      	strb	r3, [r0, #1]
 8006378:	dd29      	ble.n	80063ce <__exponent+0x68>
 800637a:	f10d 0307 	add.w	r3, sp, #7
 800637e:	461d      	mov	r5, r3
 8006380:	270a      	movs	r7, #10
 8006382:	461a      	mov	r2, r3
 8006384:	fbb1 f6f7 	udiv	r6, r1, r7
 8006388:	fb07 1416 	mls	r4, r7, r6, r1
 800638c:	3430      	adds	r4, #48	@ 0x30
 800638e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006392:	460c      	mov	r4, r1
 8006394:	2c63      	cmp	r4, #99	@ 0x63
 8006396:	f103 33ff 	add.w	r3, r3, #4294967295
 800639a:	4631      	mov	r1, r6
 800639c:	dcf1      	bgt.n	8006382 <__exponent+0x1c>
 800639e:	3130      	adds	r1, #48	@ 0x30
 80063a0:	1e94      	subs	r4, r2, #2
 80063a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063a6:	1c41      	adds	r1, r0, #1
 80063a8:	4623      	mov	r3, r4
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	d30a      	bcc.n	80063c4 <__exponent+0x5e>
 80063ae:	f10d 0309 	add.w	r3, sp, #9
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	42ac      	cmp	r4, r5
 80063b6:	bf88      	it	hi
 80063b8:	2300      	movhi	r3, #0
 80063ba:	3302      	adds	r3, #2
 80063bc:	4403      	add	r3, r0
 80063be:	1a18      	subs	r0, r3, r0
 80063c0:	b003      	add	sp, #12
 80063c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063cc:	e7ed      	b.n	80063aa <__exponent+0x44>
 80063ce:	2330      	movs	r3, #48	@ 0x30
 80063d0:	3130      	adds	r1, #48	@ 0x30
 80063d2:	7083      	strb	r3, [r0, #2]
 80063d4:	70c1      	strb	r1, [r0, #3]
 80063d6:	1d03      	adds	r3, r0, #4
 80063d8:	e7f1      	b.n	80063be <__exponent+0x58>
	...

080063dc <_printf_float>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	b08d      	sub	sp, #52	@ 0x34
 80063e2:	460c      	mov	r4, r1
 80063e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063e8:	4616      	mov	r6, r2
 80063ea:	461f      	mov	r7, r3
 80063ec:	4605      	mov	r5, r0
 80063ee:	f000 fdbf 	bl	8006f70 <_localeconv_r>
 80063f2:	6803      	ldr	r3, [r0, #0]
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7f9 ff5a 	bl	80002b0 <strlen>
 80063fc:	2300      	movs	r3, #0
 80063fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006400:	f8d8 3000 	ldr.w	r3, [r8]
 8006404:	9005      	str	r0, [sp, #20]
 8006406:	3307      	adds	r3, #7
 8006408:	f023 0307 	bic.w	r3, r3, #7
 800640c:	f103 0208 	add.w	r2, r3, #8
 8006410:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006414:	f8d4 b000 	ldr.w	fp, [r4]
 8006418:	f8c8 2000 	str.w	r2, [r8]
 800641c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006420:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006424:	9307      	str	r3, [sp, #28]
 8006426:	f8cd 8018 	str.w	r8, [sp, #24]
 800642a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800642e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006432:	4b9c      	ldr	r3, [pc, #624]	@ (80066a4 <_printf_float+0x2c8>)
 8006434:	f04f 32ff 	mov.w	r2, #4294967295
 8006438:	f7fa fb98 	bl	8000b6c <__aeabi_dcmpun>
 800643c:	bb70      	cbnz	r0, 800649c <_printf_float+0xc0>
 800643e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006442:	4b98      	ldr	r3, [pc, #608]	@ (80066a4 <_printf_float+0x2c8>)
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	f7fa fb72 	bl	8000b30 <__aeabi_dcmple>
 800644c:	bb30      	cbnz	r0, 800649c <_printf_float+0xc0>
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7fa fb61 	bl	8000b1c <__aeabi_dcmplt>
 800645a:	b110      	cbz	r0, 8006462 <_printf_float+0x86>
 800645c:	232d      	movs	r3, #45	@ 0x2d
 800645e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006462:	4a91      	ldr	r2, [pc, #580]	@ (80066a8 <_printf_float+0x2cc>)
 8006464:	4b91      	ldr	r3, [pc, #580]	@ (80066ac <_printf_float+0x2d0>)
 8006466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800646a:	bf94      	ite	ls
 800646c:	4690      	movls	r8, r2
 800646e:	4698      	movhi	r8, r3
 8006470:	2303      	movs	r3, #3
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	f02b 0304 	bic.w	r3, fp, #4
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	9700      	str	r7, [sp, #0]
 8006480:	4633      	mov	r3, r6
 8006482:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f9d2 	bl	8006830 <_printf_common>
 800648c:	3001      	adds	r0, #1
 800648e:	f040 808d 	bne.w	80065ac <_printf_float+0x1d0>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	b00d      	add	sp, #52	@ 0x34
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	4649      	mov	r1, r9
 80064a4:	f7fa fb62 	bl	8000b6c <__aeabi_dcmpun>
 80064a8:	b140      	cbz	r0, 80064bc <_printf_float+0xe0>
 80064aa:	464b      	mov	r3, r9
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfbc      	itt	lt
 80064b0:	232d      	movlt	r3, #45	@ 0x2d
 80064b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064b6:	4a7e      	ldr	r2, [pc, #504]	@ (80066b0 <_printf_float+0x2d4>)
 80064b8:	4b7e      	ldr	r3, [pc, #504]	@ (80066b4 <_printf_float+0x2d8>)
 80064ba:	e7d4      	b.n	8006466 <_printf_float+0x8a>
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064c2:	9206      	str	r2, [sp, #24]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	d13b      	bne.n	8006540 <_printf_float+0x164>
 80064c8:	2306      	movs	r3, #6
 80064ca:	6063      	str	r3, [r4, #4]
 80064cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064d0:	2300      	movs	r3, #0
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80064d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064dc:	ab09      	add	r3, sp, #36	@ 0x24
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	ec49 8b10 	vmov	d0, r8, r9
 80064e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7ff fed6 	bl	800629c <__cvt>
 80064f0:	9b06      	ldr	r3, [sp, #24]
 80064f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064f4:	2b47      	cmp	r3, #71	@ 0x47
 80064f6:	4680      	mov	r8, r0
 80064f8:	d129      	bne.n	800654e <_printf_float+0x172>
 80064fa:	1cc8      	adds	r0, r1, #3
 80064fc:	db02      	blt.n	8006504 <_printf_float+0x128>
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	4299      	cmp	r1, r3
 8006502:	dd41      	ble.n	8006588 <_printf_float+0x1ac>
 8006504:	f1aa 0a02 	sub.w	sl, sl, #2
 8006508:	fa5f fa8a 	uxtb.w	sl, sl
 800650c:	3901      	subs	r1, #1
 800650e:	4652      	mov	r2, sl
 8006510:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006514:	9109      	str	r1, [sp, #36]	@ 0x24
 8006516:	f7ff ff26 	bl	8006366 <__exponent>
 800651a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800651c:	1813      	adds	r3, r2, r0
 800651e:	2a01      	cmp	r2, #1
 8006520:	4681      	mov	r9, r0
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	dc02      	bgt.n	800652c <_printf_float+0x150>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	07d2      	lsls	r2, r2, #31
 800652a:	d501      	bpl.n	8006530 <_printf_float+0x154>
 800652c:	3301      	adds	r3, #1
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0a2      	beq.n	800647e <_printf_float+0xa2>
 8006538:	232d      	movs	r3, #45	@ 0x2d
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653e:	e79e      	b.n	800647e <_printf_float+0xa2>
 8006540:	9a06      	ldr	r2, [sp, #24]
 8006542:	2a47      	cmp	r2, #71	@ 0x47
 8006544:	d1c2      	bne.n	80064cc <_printf_float+0xf0>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1c0      	bne.n	80064cc <_printf_float+0xf0>
 800654a:	2301      	movs	r3, #1
 800654c:	e7bd      	b.n	80064ca <_printf_float+0xee>
 800654e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006552:	d9db      	bls.n	800650c <_printf_float+0x130>
 8006554:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006558:	d118      	bne.n	800658c <_printf_float+0x1b0>
 800655a:	2900      	cmp	r1, #0
 800655c:	6863      	ldr	r3, [r4, #4]
 800655e:	dd0b      	ble.n	8006578 <_printf_float+0x19c>
 8006560:	6121      	str	r1, [r4, #16]
 8006562:	b913      	cbnz	r3, 800656a <_printf_float+0x18e>
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	07d0      	lsls	r0, r2, #31
 8006568:	d502      	bpl.n	8006570 <_printf_float+0x194>
 800656a:	3301      	adds	r3, #1
 800656c:	440b      	add	r3, r1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	e7db      	b.n	8006530 <_printf_float+0x154>
 8006578:	b913      	cbnz	r3, 8006580 <_printf_float+0x1a4>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	07d2      	lsls	r2, r2, #31
 800657e:	d501      	bpl.n	8006584 <_printf_float+0x1a8>
 8006580:	3302      	adds	r3, #2
 8006582:	e7f4      	b.n	800656e <_printf_float+0x192>
 8006584:	2301      	movs	r3, #1
 8006586:	e7f2      	b.n	800656e <_printf_float+0x192>
 8006588:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	4299      	cmp	r1, r3
 8006590:	db05      	blt.n	800659e <_printf_float+0x1c2>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	6121      	str	r1, [r4, #16]
 8006596:	07d8      	lsls	r0, r3, #31
 8006598:	d5ea      	bpl.n	8006570 <_printf_float+0x194>
 800659a:	1c4b      	adds	r3, r1, #1
 800659c:	e7e7      	b.n	800656e <_printf_float+0x192>
 800659e:	2900      	cmp	r1, #0
 80065a0:	bfd4      	ite	le
 80065a2:	f1c1 0202 	rsble	r2, r1, #2
 80065a6:	2201      	movgt	r2, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	e7e0      	b.n	800656e <_printf_float+0x192>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	055a      	lsls	r2, r3, #21
 80065b0:	d407      	bmi.n	80065c2 <_printf_float+0x1e6>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	4642      	mov	r2, r8
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	d12b      	bne.n	8006618 <_printf_float+0x23c>
 80065c0:	e767      	b.n	8006492 <_printf_float+0xb6>
 80065c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065c6:	f240 80dd 	bls.w	8006784 <_printf_float+0x3a8>
 80065ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065ce:	2200      	movs	r2, #0
 80065d0:	2300      	movs	r3, #0
 80065d2:	f7fa fa99 	bl	8000b08 <__aeabi_dcmpeq>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d033      	beq.n	8006642 <_printf_float+0x266>
 80065da:	4a37      	ldr	r2, [pc, #220]	@ (80066b8 <_printf_float+0x2dc>)
 80065dc:	2301      	movs	r3, #1
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f af54 	beq.w	8006492 <_printf_float+0xb6>
 80065ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065ee:	4543      	cmp	r3, r8
 80065f0:	db02      	blt.n	80065f8 <_printf_float+0x21c>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	07d8      	lsls	r0, r3, #31
 80065f6:	d50f      	bpl.n	8006618 <_printf_float+0x23c>
 80065f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af45 	beq.w	8006492 <_printf_float+0xb6>
 8006608:	f04f 0900 	mov.w	r9, #0
 800660c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006610:	f104 0a1a 	add.w	sl, r4, #26
 8006614:	45c8      	cmp	r8, r9
 8006616:	dc09      	bgt.n	800662c <_printf_float+0x250>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	079b      	lsls	r3, r3, #30
 800661c:	f100 8103 	bmi.w	8006826 <_printf_float+0x44a>
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006624:	4298      	cmp	r0, r3
 8006626:	bfb8      	it	lt
 8006628:	4618      	movlt	r0, r3
 800662a:	e734      	b.n	8006496 <_printf_float+0xba>
 800662c:	2301      	movs	r3, #1
 800662e:	4652      	mov	r2, sl
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af2b 	beq.w	8006492 <_printf_float+0xb6>
 800663c:	f109 0901 	add.w	r9, r9, #1
 8006640:	e7e8      	b.n	8006614 <_printf_float+0x238>
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc39      	bgt.n	80066bc <_printf_float+0x2e0>
 8006648:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <_printf_float+0x2dc>)
 800664a:	2301      	movs	r3, #1
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f af1d 	beq.w	8006492 <_printf_float+0xb6>
 8006658:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800665c:	ea59 0303 	orrs.w	r3, r9, r3
 8006660:	d102      	bne.n	8006668 <_printf_float+0x28c>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	07d9      	lsls	r1, r3, #31
 8006666:	d5d7      	bpl.n	8006618 <_printf_float+0x23c>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af0d 	beq.w	8006492 <_printf_float+0xb6>
 8006678:	f04f 0a00 	mov.w	sl, #0
 800667c:	f104 0b1a 	add.w	fp, r4, #26
 8006680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006682:	425b      	negs	r3, r3
 8006684:	4553      	cmp	r3, sl
 8006686:	dc01      	bgt.n	800668c <_printf_float+0x2b0>
 8006688:	464b      	mov	r3, r9
 800668a:	e793      	b.n	80065b4 <_printf_float+0x1d8>
 800668c:	2301      	movs	r3, #1
 800668e:	465a      	mov	r2, fp
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f aefb 	beq.w	8006492 <_printf_float+0xb6>
 800669c:	f10a 0a01 	add.w	sl, sl, #1
 80066a0:	e7ee      	b.n	8006680 <_printf_float+0x2a4>
 80066a2:	bf00      	nop
 80066a4:	7fefffff 	.word	0x7fefffff
 80066a8:	08008de4 	.word	0x08008de4
 80066ac:	08008de8 	.word	0x08008de8
 80066b0:	08008dec 	.word	0x08008dec
 80066b4:	08008df0 	.word	0x08008df0
 80066b8:	08008df4 	.word	0x08008df4
 80066bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066c2:	4553      	cmp	r3, sl
 80066c4:	bfa8      	it	ge
 80066c6:	4653      	movge	r3, sl
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	4699      	mov	r9, r3
 80066cc:	dc36      	bgt.n	800673c <_printf_float+0x360>
 80066ce:	f04f 0b00 	mov.w	fp, #0
 80066d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066d6:	f104 021a 	add.w	r2, r4, #26
 80066da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066dc:	9306      	str	r3, [sp, #24]
 80066de:	eba3 0309 	sub.w	r3, r3, r9
 80066e2:	455b      	cmp	r3, fp
 80066e4:	dc31      	bgt.n	800674a <_printf_float+0x36e>
 80066e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e8:	459a      	cmp	sl, r3
 80066ea:	dc3a      	bgt.n	8006762 <_printf_float+0x386>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	07da      	lsls	r2, r3, #31
 80066f0:	d437      	bmi.n	8006762 <_printf_float+0x386>
 80066f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f4:	ebaa 0903 	sub.w	r9, sl, r3
 80066f8:	9b06      	ldr	r3, [sp, #24]
 80066fa:	ebaa 0303 	sub.w	r3, sl, r3
 80066fe:	4599      	cmp	r9, r3
 8006700:	bfa8      	it	ge
 8006702:	4699      	movge	r9, r3
 8006704:	f1b9 0f00 	cmp.w	r9, #0
 8006708:	dc33      	bgt.n	8006772 <_printf_float+0x396>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006712:	f104 0b1a 	add.w	fp, r4, #26
 8006716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006718:	ebaa 0303 	sub.w	r3, sl, r3
 800671c:	eba3 0309 	sub.w	r3, r3, r9
 8006720:	4543      	cmp	r3, r8
 8006722:	f77f af79 	ble.w	8006618 <_printf_float+0x23c>
 8006726:	2301      	movs	r3, #1
 8006728:	465a      	mov	r2, fp
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	f43f aeae 	beq.w	8006492 <_printf_float+0xb6>
 8006736:	f108 0801 	add.w	r8, r8, #1
 800673a:	e7ec      	b.n	8006716 <_printf_float+0x33a>
 800673c:	4642      	mov	r2, r8
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	47b8      	blx	r7
 8006744:	3001      	adds	r0, #1
 8006746:	d1c2      	bne.n	80066ce <_printf_float+0x2f2>
 8006748:	e6a3      	b.n	8006492 <_printf_float+0xb6>
 800674a:	2301      	movs	r3, #1
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	9206      	str	r2, [sp, #24]
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	f43f ae9c 	beq.w	8006492 <_printf_float+0xb6>
 800675a:	9a06      	ldr	r2, [sp, #24]
 800675c:	f10b 0b01 	add.w	fp, fp, #1
 8006760:	e7bb      	b.n	80066da <_printf_float+0x2fe>
 8006762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	d1c0      	bne.n	80066f2 <_printf_float+0x316>
 8006770:	e68f      	b.n	8006492 <_printf_float+0xb6>
 8006772:	9a06      	ldr	r2, [sp, #24]
 8006774:	464b      	mov	r3, r9
 8006776:	4442      	add	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d1c3      	bne.n	800670a <_printf_float+0x32e>
 8006782:	e686      	b.n	8006492 <_printf_float+0xb6>
 8006784:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006788:	f1ba 0f01 	cmp.w	sl, #1
 800678c:	dc01      	bgt.n	8006792 <_printf_float+0x3b6>
 800678e:	07db      	lsls	r3, r3, #31
 8006790:	d536      	bpl.n	8006800 <_printf_float+0x424>
 8006792:	2301      	movs	r3, #1
 8006794:	4642      	mov	r2, r8
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f ae78 	beq.w	8006492 <_printf_float+0xb6>
 80067a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae70 	beq.w	8006492 <_printf_float+0xb6>
 80067b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067be:	f7fa f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 80067c2:	b9c0      	cbnz	r0, 80067f6 <_printf_float+0x41a>
 80067c4:	4653      	mov	r3, sl
 80067c6:	f108 0201 	add.w	r2, r8, #1
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	d10c      	bne.n	80067ee <_printf_float+0x412>
 80067d4:	e65d      	b.n	8006492 <_printf_float+0xb6>
 80067d6:	2301      	movs	r3, #1
 80067d8:	465a      	mov	r2, fp
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae56 	beq.w	8006492 <_printf_float+0xb6>
 80067e6:	f108 0801 	add.w	r8, r8, #1
 80067ea:	45d0      	cmp	r8, sl
 80067ec:	dbf3      	blt.n	80067d6 <_printf_float+0x3fa>
 80067ee:	464b      	mov	r3, r9
 80067f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067f4:	e6df      	b.n	80065b6 <_printf_float+0x1da>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0b1a 	add.w	fp, r4, #26
 80067fe:	e7f4      	b.n	80067ea <_printf_float+0x40e>
 8006800:	2301      	movs	r3, #1
 8006802:	4642      	mov	r2, r8
 8006804:	e7e1      	b.n	80067ca <_printf_float+0x3ee>
 8006806:	2301      	movs	r3, #1
 8006808:	464a      	mov	r2, r9
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae3e 	beq.w	8006492 <_printf_float+0xb6>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	4543      	cmp	r3, r8
 8006822:	dcf0      	bgt.n	8006806 <_printf_float+0x42a>
 8006824:	e6fc      	b.n	8006620 <_printf_float+0x244>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0919 	add.w	r9, r4, #25
 800682e:	e7f4      	b.n	800681a <_printf_float+0x43e>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4698      	mov	r8, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	3b00      	subs	r3, #0
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800688c:	4641      	mov	r1, r8
 800688e:	4638      	mov	r0, r7
 8006890:	47c8      	blx	r9
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6922      	ldr	r2, [r4, #16]
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	2b04      	cmp	r3, #4
 80068a0:	bf02      	ittt	eq
 80068a2:	68e5      	ldreq	r5, [r4, #12]
 80068a4:	6833      	ldreq	r3, [r6, #0]
 80068a6:	1aed      	subeq	r5, r5, r3
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4641      	mov	r1, r8
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c8      	blx	r9
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	@ 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4641      	mov	r1, r8
 80068fe:	4638      	mov	r0, r7
 8006900:	47c8      	blx	r9
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	7e0f      	ldrb	r7, [r1, #24]
 8006912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006914:	2f78      	cmp	r7, #120	@ 0x78
 8006916:	4691      	mov	r9, r2
 8006918:	4680      	mov	r8, r0
 800691a:	460c      	mov	r4, r1
 800691c:	469a      	mov	sl, r3
 800691e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	@ 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d2 	beq.w	8006ad2 <_printf_i+0x1c6>
 800692e:	2f58      	cmp	r7, #88	@ 0x58
 8006930:	f000 80b9 	beq.w	8006aa6 <_printf_i+0x19a>
 8006934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a101      	add	r1, pc, #4	@ (adr r1, 800694c <_printf_i+0x40>)
 8006948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006ab9 	.word	0x08006ab9
 800697c:	080069e3 	.word	0x080069e3
 8006980:	08006a73 	.word	0x08006a73
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006adb 	.word	0x08006adb
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e3 	.word	0x080069e3
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006a7b 	.word	0x08006a7b
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6032      	str	r2, [r6, #0]
 80069ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e09d      	b.n	8006af4 <_printf_i+0x1e8>
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	1d19      	adds	r1, r3, #4
 80069be:	6031      	str	r1, [r6, #0]
 80069c0:	0606      	lsls	r6, r0, #24
 80069c2:	d501      	bpl.n	80069c8 <_printf_i+0xbc>
 80069c4:	681d      	ldr	r5, [r3, #0]
 80069c6:	e003      	b.n	80069d0 <_printf_i+0xc4>
 80069c8:	0645      	lsls	r5, r0, #25
 80069ca:	d5fb      	bpl.n	80069c4 <_printf_i+0xb8>
 80069cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	da03      	bge.n	80069dc <_printf_i+0xd0>
 80069d4:	232d      	movs	r3, #45	@ 0x2d
 80069d6:	426d      	negs	r5, r5
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069dc:	4859      	ldr	r0, [pc, #356]	@ (8006b44 <_printf_i+0x238>)
 80069de:	230a      	movs	r3, #10
 80069e0:	e011      	b.n	8006a06 <_printf_i+0xfa>
 80069e2:	6821      	ldr	r1, [r4, #0]
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	0608      	lsls	r0, r1, #24
 80069e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069ec:	d402      	bmi.n	80069f4 <_printf_i+0xe8>
 80069ee:	0649      	lsls	r1, r1, #25
 80069f0:	bf48      	it	mi
 80069f2:	b2ad      	uxthmi	r5, r5
 80069f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069f6:	4853      	ldr	r0, [pc, #332]	@ (8006b44 <_printf_i+0x238>)
 80069f8:	6033      	str	r3, [r6, #0]
 80069fa:	bf14      	ite	ne
 80069fc:	230a      	movne	r3, #10
 80069fe:	2308      	moveq	r3, #8
 8006a00:	2100      	movs	r1, #0
 8006a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a06:	6866      	ldr	r6, [r4, #4]
 8006a08:	60a6      	str	r6, [r4, #8]
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	bfa2      	ittt	ge
 8006a0e:	6821      	ldrge	r1, [r4, #0]
 8006a10:	f021 0104 	bicge.w	r1, r1, #4
 8006a14:	6021      	strge	r1, [r4, #0]
 8006a16:	b90d      	cbnz	r5, 8006a1c <_printf_i+0x110>
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d04b      	beq.n	8006ab4 <_printf_i+0x1a8>
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a22:	fb03 5711 	mls	r7, r3, r1, r5
 8006a26:	5dc7      	ldrb	r7, [r0, r7]
 8006a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a2c:	462f      	mov	r7, r5
 8006a2e:	42bb      	cmp	r3, r7
 8006a30:	460d      	mov	r5, r1
 8006a32:	d9f4      	bls.n	8006a1e <_printf_i+0x112>
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d10b      	bne.n	8006a50 <_printf_i+0x144>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	07df      	lsls	r7, r3, #31
 8006a3c:	d508      	bpl.n	8006a50 <_printf_i+0x144>
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	6861      	ldr	r1, [r4, #4]
 8006a42:	4299      	cmp	r1, r3
 8006a44:	bfde      	ittt	le
 8006a46:	2330      	movle	r3, #48	@ 0x30
 8006a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a50:	1b92      	subs	r2, r2, r6
 8006a52:	6122      	str	r2, [r4, #16]
 8006a54:	f8cd a000 	str.w	sl, [sp]
 8006a58:	464b      	mov	r3, r9
 8006a5a:	aa03      	add	r2, sp, #12
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7ff fee6 	bl	8006830 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d14a      	bne.n	8006afe <_printf_i+0x1f2>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b004      	add	sp, #16
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	f043 0320 	orr.w	r3, r3, #32
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	4833      	ldr	r0, [pc, #204]	@ (8006b48 <_printf_i+0x23c>)
 8006a7c:	2778      	movs	r7, #120	@ 0x78
 8006a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6831      	ldr	r1, [r6, #0]
 8006a86:	061f      	lsls	r7, r3, #24
 8006a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a8c:	d402      	bmi.n	8006a94 <_printf_i+0x188>
 8006a8e:	065f      	lsls	r7, r3, #25
 8006a90:	bf48      	it	mi
 8006a92:	b2ad      	uxthmi	r5, r5
 8006a94:	6031      	str	r1, [r6, #0]
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	bf44      	itt	mi
 8006a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a9e:	6023      	strmi	r3, [r4, #0]
 8006aa0:	b11d      	cbz	r5, 8006aaa <_printf_i+0x19e>
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e7ac      	b.n	8006a00 <_printf_i+0xf4>
 8006aa6:	4827      	ldr	r0, [pc, #156]	@ (8006b44 <_printf_i+0x238>)
 8006aa8:	e7e9      	b.n	8006a7e <_printf_i+0x172>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f023 0320 	bic.w	r3, r3, #32
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	e7f6      	b.n	8006aa2 <_printf_i+0x196>
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	e7bd      	b.n	8006a34 <_printf_i+0x128>
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	6961      	ldr	r1, [r4, #20]
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	062e      	lsls	r6, r5, #24
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0x1c0>
 8006ac8:	6019      	str	r1, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <_printf_i+0x1c6>
 8006acc:	0668      	lsls	r0, r5, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0x1bc>
 8006ad0:	8019      	strh	r1, [r3, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	e7bc      	b.n	8006a54 <_printf_i+0x148>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	681e      	ldr	r6, [r3, #0]
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7f9 fb92 	bl	8000210 <memchr>
 8006aec:	b108      	cbz	r0, 8006af2 <_printf_i+0x1e6>
 8006aee:	1b80      	subs	r0, r0, r6
 8006af0:	6060      	str	r0, [r4, #4]
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afc:	e7aa      	b.n	8006a54 <_printf_i+0x148>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	4632      	mov	r2, r6
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	47d0      	blx	sl
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d0ad      	beq.n	8006a68 <_printf_i+0x15c>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	079b      	lsls	r3, r3, #30
 8006b10:	d413      	bmi.n	8006b3a <_printf_i+0x22e>
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bfb8      	it	lt
 8006b1a:	4618      	movlt	r0, r3
 8006b1c:	e7a6      	b.n	8006a6c <_printf_i+0x160>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4632      	mov	r2, r6
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d09d      	beq.n	8006a68 <_printf_i+0x15c>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9903      	ldr	r1, [sp, #12]
 8006b32:	1a5b      	subs	r3, r3, r1
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dcf2      	bgt.n	8006b1e <_printf_i+0x212>
 8006b38:	e7eb      	b.n	8006b12 <_printf_i+0x206>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	f104 0619 	add.w	r6, r4, #25
 8006b40:	e7f5      	b.n	8006b2e <_printf_i+0x222>
 8006b42:	bf00      	nop
 8006b44:	08008df6 	.word	0x08008df6
 8006b48:	08008e07 	.word	0x08008e07

08006b4c <std>:
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	4604      	mov	r4, r0
 8006b52:	e9c0 3300 	strd	r3, r3, [r0]
 8006b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b5a:	6083      	str	r3, [r0, #8]
 8006b5c:	8181      	strh	r1, [r0, #12]
 8006b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b60:	81c2      	strh	r2, [r0, #14]
 8006b62:	6183      	str	r3, [r0, #24]
 8006b64:	4619      	mov	r1, r3
 8006b66:	2208      	movs	r2, #8
 8006b68:	305c      	adds	r0, #92	@ 0x5c
 8006b6a:	f000 f9f9 	bl	8006f60 <memset>
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <std+0x58>)
 8006b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <std+0x5c>)
 8006b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b76:	4b0d      	ldr	r3, [pc, #52]	@ (8006bac <std+0x60>)
 8006b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb0 <std+0x64>)
 8006b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <std+0x68>)
 8006b80:	6224      	str	r4, [r4, #32]
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d006      	beq.n	8006b94 <std+0x48>
 8006b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b8a:	4294      	cmp	r4, r2
 8006b8c:	d002      	beq.n	8006b94 <std+0x48>
 8006b8e:	33d0      	adds	r3, #208	@ 0xd0
 8006b90:	429c      	cmp	r4, r3
 8006b92:	d105      	bne.n	8006ba0 <std+0x54>
 8006b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f000 ba5c 	b.w	8007058 <__retarget_lock_init_recursive>
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08006db1 	.word	0x08006db1
 8006ba8:	08006dd3 	.word	0x08006dd3
 8006bac:	08006e0b 	.word	0x08006e0b
 8006bb0:	08006e2f 	.word	0x08006e2f
 8006bb4:	20000368 	.word	0x20000368

08006bb8 <stdio_exit_handler>:
 8006bb8:	4a02      	ldr	r2, [pc, #8]	@ (8006bc4 <stdio_exit_handler+0xc>)
 8006bba:	4903      	ldr	r1, [pc, #12]	@ (8006bc8 <stdio_exit_handler+0x10>)
 8006bbc:	4803      	ldr	r0, [pc, #12]	@ (8006bcc <stdio_exit_handler+0x14>)
 8006bbe:	f000 b869 	b.w	8006c94 <_fwalk_sglue>
 8006bc2:	bf00      	nop
 8006bc4:	2000000c 	.word	0x2000000c
 8006bc8:	08008989 	.word	0x08008989
 8006bcc:	2000001c 	.word	0x2000001c

08006bd0 <cleanup_stdio>:
 8006bd0:	6841      	ldr	r1, [r0, #4]
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <cleanup_stdio+0x34>)
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	4604      	mov	r4, r0
 8006bda:	d001      	beq.n	8006be0 <cleanup_stdio+0x10>
 8006bdc:	f001 fed4 	bl	8008988 <_fflush_r>
 8006be0:	68a1      	ldr	r1, [r4, #8]
 8006be2:	4b09      	ldr	r3, [pc, #36]	@ (8006c08 <cleanup_stdio+0x38>)
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d002      	beq.n	8006bee <cleanup_stdio+0x1e>
 8006be8:	4620      	mov	r0, r4
 8006bea:	f001 fecd 	bl	8008988 <_fflush_r>
 8006bee:	68e1      	ldr	r1, [r4, #12]
 8006bf0:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <cleanup_stdio+0x3c>)
 8006bf2:	4299      	cmp	r1, r3
 8006bf4:	d004      	beq.n	8006c00 <cleanup_stdio+0x30>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f001 bec4 	b.w	8008988 <_fflush_r>
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	bf00      	nop
 8006c04:	20000368 	.word	0x20000368
 8006c08:	200003d0 	.word	0x200003d0
 8006c0c:	20000438 	.word	0x20000438

08006c10 <global_stdio_init.part.0>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <global_stdio_init.part.0+0x30>)
 8006c14:	4c0b      	ldr	r4, [pc, #44]	@ (8006c44 <global_stdio_init.part.0+0x34>)
 8006c16:	4a0c      	ldr	r2, [pc, #48]	@ (8006c48 <global_stdio_init.part.0+0x38>)
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2104      	movs	r1, #4
 8006c20:	f7ff ff94 	bl	8006b4c <std>
 8006c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c28:	2201      	movs	r2, #1
 8006c2a:	2109      	movs	r1, #9
 8006c2c:	f7ff ff8e 	bl	8006b4c <std>
 8006c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c34:	2202      	movs	r2, #2
 8006c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3a:	2112      	movs	r1, #18
 8006c3c:	f7ff bf86 	b.w	8006b4c <std>
 8006c40:	200004a0 	.word	0x200004a0
 8006c44:	20000368 	.word	0x20000368
 8006c48:	08006bb9 	.word	0x08006bb9

08006c4c <__sfp_lock_acquire>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	@ (8006c54 <__sfp_lock_acquire+0x8>)
 8006c4e:	f000 ba04 	b.w	800705a <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	200004a9 	.word	0x200004a9

08006c58 <__sfp_lock_release>:
 8006c58:	4801      	ldr	r0, [pc, #4]	@ (8006c60 <__sfp_lock_release+0x8>)
 8006c5a:	f000 b9ff 	b.w	800705c <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	200004a9 	.word	0x200004a9

08006c64 <__sinit>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4604      	mov	r4, r0
 8006c68:	f7ff fff0 	bl	8006c4c <__sfp_lock_acquire>
 8006c6c:	6a23      	ldr	r3, [r4, #32]
 8006c6e:	b11b      	cbz	r3, 8006c78 <__sinit+0x14>
 8006c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c74:	f7ff bff0 	b.w	8006c58 <__sfp_lock_release>
 8006c78:	4b04      	ldr	r3, [pc, #16]	@ (8006c8c <__sinit+0x28>)
 8006c7a:	6223      	str	r3, [r4, #32]
 8006c7c:	4b04      	ldr	r3, [pc, #16]	@ (8006c90 <__sinit+0x2c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f5      	bne.n	8006c70 <__sinit+0xc>
 8006c84:	f7ff ffc4 	bl	8006c10 <global_stdio_init.part.0>
 8006c88:	e7f2      	b.n	8006c70 <__sinit+0xc>
 8006c8a:	bf00      	nop
 8006c8c:	08006bd1 	.word	0x08006bd1
 8006c90:	200004a0 	.word	0x200004a0

08006c94 <_fwalk_sglue>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	4607      	mov	r7, r0
 8006c9a:	4688      	mov	r8, r1
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ca8:	d505      	bpl.n	8006cb6 <_fwalk_sglue+0x22>
 8006caa:	6824      	ldr	r4, [r4, #0]
 8006cac:	2c00      	cmp	r4, #0
 8006cae:	d1f7      	bne.n	8006ca0 <_fwalk_sglue+0xc>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d907      	bls.n	8006ccc <_fwalk_sglue+0x38>
 8006cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	d003      	beq.n	8006ccc <_fwalk_sglue+0x38>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	47c0      	blx	r8
 8006cca:	4306      	orrs	r6, r0
 8006ccc:	3568      	adds	r5, #104	@ 0x68
 8006cce:	e7e9      	b.n	8006ca4 <_fwalk_sglue+0x10>

08006cd0 <iprintf>:
 8006cd0:	b40f      	push	{r0, r1, r2, r3}
 8006cd2:	b507      	push	{r0, r1, r2, lr}
 8006cd4:	4906      	ldr	r1, [pc, #24]	@ (8006cf0 <iprintf+0x20>)
 8006cd6:	ab04      	add	r3, sp, #16
 8006cd8:	6808      	ldr	r0, [r1, #0]
 8006cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cde:	6881      	ldr	r1, [r0, #8]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	f001 fcb5 	bl	8008650 <_vfiprintf_r>
 8006ce6:	b003      	add	sp, #12
 8006ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cec:	b004      	add	sp, #16
 8006cee:	4770      	bx	lr
 8006cf0:	20000018 	.word	0x20000018

08006cf4 <_puts_r>:
 8006cf4:	6a03      	ldr	r3, [r0, #32]
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	6884      	ldr	r4, [r0, #8]
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	b90b      	cbnz	r3, 8006d04 <_puts_r+0x10>
 8006d00:	f7ff ffb0 	bl	8006c64 <__sinit>
 8006d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d405      	bmi.n	8006d16 <_puts_r+0x22>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	0598      	lsls	r0, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_puts_r+0x22>
 8006d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d12:	f000 f9a2 	bl	800705a <__retarget_lock_acquire_recursive>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	0719      	lsls	r1, r3, #28
 8006d1a:	d502      	bpl.n	8006d22 <_puts_r+0x2e>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d135      	bne.n	8006d8e <_puts_r+0x9a>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 f8c5 	bl	8006eb4 <__swsetup_r>
 8006d2a:	b380      	cbz	r0, 8006d8e <_puts_r+0x9a>
 8006d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d32:	07da      	lsls	r2, r3, #31
 8006d34:	d405      	bmi.n	8006d42 <_puts_r+0x4e>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	059b      	lsls	r3, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_puts_r+0x4e>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d3e:	f000 f98d 	bl	800705c <__retarget_lock_release_recursive>
 8006d42:	4628      	mov	r0, r5
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da04      	bge.n	8006d54 <_puts_r+0x60>
 8006d4a:	69a2      	ldr	r2, [r4, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	dc17      	bgt.n	8006d80 <_puts_r+0x8c>
 8006d50:	290a      	cmp	r1, #10
 8006d52:	d015      	beq.n	8006d80 <_puts_r+0x8c>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	7019      	strb	r1, [r3, #0]
 8006d5c:	68a3      	ldr	r3, [r4, #8]
 8006d5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d62:	3b01      	subs	r3, #1
 8006d64:	60a3      	str	r3, [r4, #8]
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d1ed      	bne.n	8006d46 <_puts_r+0x52>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da11      	bge.n	8006d92 <_puts_r+0x9e>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	210a      	movs	r1, #10
 8006d72:	4628      	mov	r0, r5
 8006d74:	f000 f85f 	bl	8006e36 <__swbuf_r>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0d7      	beq.n	8006d2c <_puts_r+0x38>
 8006d7c:	250a      	movs	r5, #10
 8006d7e:	e7d7      	b.n	8006d30 <_puts_r+0x3c>
 8006d80:	4622      	mov	r2, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 f857 	bl	8006e36 <__swbuf_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d1e7      	bne.n	8006d5c <_puts_r+0x68>
 8006d8c:	e7ce      	b.n	8006d2c <_puts_r+0x38>
 8006d8e:	3e01      	subs	r6, #1
 8006d90:	e7e4      	b.n	8006d5c <_puts_r+0x68>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	220a      	movs	r2, #10
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e7ee      	b.n	8006d7c <_puts_r+0x88>
	...

08006da0 <puts>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	@ (8006dac <puts+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f7ff bfa5 	b.w	8006cf4 <_puts_r>
 8006daa:	bf00      	nop
 8006dac:	20000018 	.word	0x20000018

08006db0 <__sread>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	f000 f900 	bl	8006fbc <_read_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	bfab      	itete	ge
 8006dc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc4:	181b      	addge	r3, r3, r0
 8006dc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dca:	bfac      	ite	ge
 8006dcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dce:	81a3      	strhlt	r3, [r4, #12]
 8006dd0:	bd10      	pop	{r4, pc}

08006dd2 <__swrite>:
 8006dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	898b      	ldrh	r3, [r1, #12]
 8006dda:	05db      	lsls	r3, r3, #23
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	4616      	mov	r6, r2
 8006de2:	d505      	bpl.n	8006df0 <__swrite+0x1e>
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	2302      	movs	r3, #2
 8006dea:	2200      	movs	r2, #0
 8006dec:	f000 f8d4 	bl	8006f98 <_lseek_r>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	463b      	mov	r3, r7
 8006e00:	4628      	mov	r0, r5
 8006e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	f000 b8eb 	b.w	8006fe0 <_write_r>

08006e0a <__sseek>:
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e12:	f000 f8c1 	bl	8006f98 <_lseek_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	bf15      	itete	ne
 8006e1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e26:	81a3      	strheq	r3, [r4, #12]
 8006e28:	bf18      	it	ne
 8006e2a:	81a3      	strhne	r3, [r4, #12]
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <__sclose>:
 8006e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e32:	f000 b8a1 	b.w	8006f78 <_close_r>

08006e36 <__swbuf_r>:
 8006e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e38:	460e      	mov	r6, r1
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	b118      	cbz	r0, 8006e48 <__swbuf_r+0x12>
 8006e40:	6a03      	ldr	r3, [r0, #32]
 8006e42:	b90b      	cbnz	r3, 8006e48 <__swbuf_r+0x12>
 8006e44:	f7ff ff0e 	bl	8006c64 <__sinit>
 8006e48:	69a3      	ldr	r3, [r4, #24]
 8006e4a:	60a3      	str	r3, [r4, #8]
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	071a      	lsls	r2, r3, #28
 8006e50:	d501      	bpl.n	8006e56 <__swbuf_r+0x20>
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	b943      	cbnz	r3, 8006e68 <__swbuf_r+0x32>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f82b 	bl	8006eb4 <__swsetup_r>
 8006e5e:	b118      	cbz	r0, 8006e68 <__swbuf_r+0x32>
 8006e60:	f04f 37ff 	mov.w	r7, #4294967295
 8006e64:	4638      	mov	r0, r7
 8006e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	6922      	ldr	r2, [r4, #16]
 8006e6c:	1a98      	subs	r0, r3, r2
 8006e6e:	6963      	ldr	r3, [r4, #20]
 8006e70:	b2f6      	uxtb	r6, r6
 8006e72:	4283      	cmp	r3, r0
 8006e74:	4637      	mov	r7, r6
 8006e76:	dc05      	bgt.n	8006e84 <__swbuf_r+0x4e>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f001 fd84 	bl	8008988 <_fflush_r>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d1ed      	bne.n	8006e60 <__swbuf_r+0x2a>
 8006e84:	68a3      	ldr	r3, [r4, #8]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	6022      	str	r2, [r4, #0]
 8006e90:	701e      	strb	r6, [r3, #0]
 8006e92:	6962      	ldr	r2, [r4, #20]
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d004      	beq.n	8006ea4 <__swbuf_r+0x6e>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	07db      	lsls	r3, r3, #31
 8006e9e:	d5e1      	bpl.n	8006e64 <__swbuf_r+0x2e>
 8006ea0:	2e0a      	cmp	r6, #10
 8006ea2:	d1df      	bne.n	8006e64 <__swbuf_r+0x2e>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f001 fd6e 	bl	8008988 <_fflush_r>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d0d9      	beq.n	8006e64 <__swbuf_r+0x2e>
 8006eb0:	e7d6      	b.n	8006e60 <__swbuf_r+0x2a>
	...

08006eb4 <__swsetup_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <__swsetup_r+0xa8>)
 8006eb8:	4605      	mov	r5, r0
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	b118      	cbz	r0, 8006ec8 <__swsetup_r+0x14>
 8006ec0:	6a03      	ldr	r3, [r0, #32]
 8006ec2:	b90b      	cbnz	r3, 8006ec8 <__swsetup_r+0x14>
 8006ec4:	f7ff fece 	bl	8006c64 <__sinit>
 8006ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ecc:	0719      	lsls	r1, r3, #28
 8006ece:	d422      	bmi.n	8006f16 <__swsetup_r+0x62>
 8006ed0:	06da      	lsls	r2, r3, #27
 8006ed2:	d407      	bmi.n	8006ee4 <__swsetup_r+0x30>
 8006ed4:	2209      	movs	r2, #9
 8006ed6:	602a      	str	r2, [r5, #0]
 8006ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	e033      	b.n	8006f4c <__swsetup_r+0x98>
 8006ee4:	0758      	lsls	r0, r3, #29
 8006ee6:	d512      	bpl.n	8006f0e <__swsetup_r+0x5a>
 8006ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eea:	b141      	cbz	r1, 8006efe <__swsetup_r+0x4a>
 8006eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	d002      	beq.n	8006efa <__swsetup_r+0x46>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 feff 	bl	8007cf8 <_free_r>
 8006efa:	2300      	movs	r3, #0
 8006efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	2300      	movs	r3, #0
 8006f08:	6063      	str	r3, [r4, #4]
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	b94b      	cbnz	r3, 8006f2e <__swsetup_r+0x7a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f24:	d003      	beq.n	8006f2e <__swsetup_r+0x7a>
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f001 fd7b 	bl	8008a24 <__smakebuf_r>
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	f013 0201 	ands.w	r2, r3, #1
 8006f36:	d00a      	beq.n	8006f4e <__swsetup_r+0x9a>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60a2      	str	r2, [r4, #8]
 8006f3c:	6962      	ldr	r2, [r4, #20]
 8006f3e:	4252      	negs	r2, r2
 8006f40:	61a2      	str	r2, [r4, #24]
 8006f42:	6922      	ldr	r2, [r4, #16]
 8006f44:	b942      	cbnz	r2, 8006f58 <__swsetup_r+0xa4>
 8006f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f4a:	d1c5      	bne.n	8006ed8 <__swsetup_r+0x24>
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	0799      	lsls	r1, r3, #30
 8006f50:	bf58      	it	pl
 8006f52:	6962      	ldrpl	r2, [r4, #20]
 8006f54:	60a2      	str	r2, [r4, #8]
 8006f56:	e7f4      	b.n	8006f42 <__swsetup_r+0x8e>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	e7f7      	b.n	8006f4c <__swsetup_r+0x98>
 8006f5c:	20000018 	.word	0x20000018

08006f60 <memset>:
 8006f60:	4402      	add	r2, r0
 8006f62:	4603      	mov	r3, r0
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d100      	bne.n	8006f6a <memset+0xa>
 8006f68:	4770      	bx	lr
 8006f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6e:	e7f9      	b.n	8006f64 <memset+0x4>

08006f70 <_localeconv_r>:
 8006f70:	4800      	ldr	r0, [pc, #0]	@ (8006f74 <_localeconv_r+0x4>)
 8006f72:	4770      	bx	lr
 8006f74:	20000158 	.word	0x20000158

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d06      	ldr	r5, [pc, #24]	@ (8006f94 <_close_r+0x1c>)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb fbd4 	bl	8002730 <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200004a4 	.word	0x200004a4

08006f98 <_lseek_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	@ (8006fb8 <_lseek_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fbe9 	bl	800277e <_lseek>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_lseek_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_lseek_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200004a4 	.word	0x200004a4

08006fbc <_read_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	@ (8006fdc <_read_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7fb fb93 	bl	80026f6 <_read>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_read_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_read_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	200004a4 	.word	0x200004a4

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	@ (8007000 <_write_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fb fc41 	bl	8002876 <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	200004a4 	.word	0x200004a4

08007004 <__errno>:
 8007004:	4b01      	ldr	r3, [pc, #4]	@ (800700c <__errno+0x8>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000018 	.word	0x20000018

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4d0d      	ldr	r5, [pc, #52]	@ (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	@ (800704c <__libc_init_array+0x3c>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2600      	movs	r6, #0
 800701c:	42a6      	cmp	r6, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4d0b      	ldr	r5, [pc, #44]	@ (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	@ (8007054 <__libc_init_array+0x44>)
 8007024:	f001 fe2a 	bl	8008c7c <_init>
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2600      	movs	r6, #0
 800702e:	42a6      	cmp	r6, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f855 3b04 	ldr.w	r3, [r5], #4
 8007038:	4798      	blx	r3
 800703a:	3601      	adds	r6, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007042:	4798      	blx	r3
 8007044:	3601      	adds	r6, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	08009160 	.word	0x08009160
 800704c:	08009160 	.word	0x08009160
 8007050:	08009160 	.word	0x08009160
 8007054:	08009164 	.word	0x08009164

08007058 <__retarget_lock_init_recursive>:
 8007058:	4770      	bx	lr

0800705a <__retarget_lock_acquire_recursive>:
 800705a:	4770      	bx	lr

0800705c <__retarget_lock_release_recursive>:
 800705c:	4770      	bx	lr

0800705e <quorem>:
 800705e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007062:	6903      	ldr	r3, [r0, #16]
 8007064:	690c      	ldr	r4, [r1, #16]
 8007066:	42a3      	cmp	r3, r4
 8007068:	4607      	mov	r7, r0
 800706a:	db7e      	blt.n	800716a <quorem+0x10c>
 800706c:	3c01      	subs	r4, #1
 800706e:	f101 0814 	add.w	r8, r1, #20
 8007072:	00a3      	lsls	r3, r4, #2
 8007074:	f100 0514 	add.w	r5, r0, #20
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007088:	3301      	adds	r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007090:	fbb2 f6f3 	udiv	r6, r2, r3
 8007094:	d32e      	bcc.n	80070f4 <quorem+0x96>
 8007096:	f04f 0a00 	mov.w	sl, #0
 800709a:	46c4      	mov	ip, r8
 800709c:	46ae      	mov	lr, r5
 800709e:	46d3      	mov	fp, sl
 80070a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070a4:	b298      	uxth	r0, r3
 80070a6:	fb06 a000 	mla	r0, r6, r0, sl
 80070aa:	0c02      	lsrs	r2, r0, #16
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	fb06 2303 	mla	r3, r6, r3, r2
 80070b2:	f8de 2000 	ldr.w	r2, [lr]
 80070b6:	b280      	uxth	r0, r0
 80070b8:	b292      	uxth	r2, r2
 80070ba:	1a12      	subs	r2, r2, r0
 80070bc:	445a      	add	r2, fp
 80070be:	f8de 0000 	ldr.w	r0, [lr]
 80070c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070d0:	b292      	uxth	r2, r2
 80070d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070d6:	45e1      	cmp	r9, ip
 80070d8:	f84e 2b04 	str.w	r2, [lr], #4
 80070dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070e0:	d2de      	bcs.n	80070a0 <quorem+0x42>
 80070e2:	9b00      	ldr	r3, [sp, #0]
 80070e4:	58eb      	ldr	r3, [r5, r3]
 80070e6:	b92b      	cbnz	r3, 80070f4 <quorem+0x96>
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	3b04      	subs	r3, #4
 80070ec:	429d      	cmp	r5, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	d32f      	bcc.n	8007152 <quorem+0xf4>
 80070f2:	613c      	str	r4, [r7, #16]
 80070f4:	4638      	mov	r0, r7
 80070f6:	f001 f979 	bl	80083ec <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	db25      	blt.n	800714a <quorem+0xec>
 80070fe:	4629      	mov	r1, r5
 8007100:	2000      	movs	r0, #0
 8007102:	f858 2b04 	ldr.w	r2, [r8], #4
 8007106:	f8d1 c000 	ldr.w	ip, [r1]
 800710a:	fa1f fe82 	uxth.w	lr, r2
 800710e:	fa1f f38c 	uxth.w	r3, ip
 8007112:	eba3 030e 	sub.w	r3, r3, lr
 8007116:	4403      	add	r3, r0
 8007118:	0c12      	lsrs	r2, r2, #16
 800711a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800711e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007122:	b29b      	uxth	r3, r3
 8007124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007128:	45c1      	cmp	r9, r8
 800712a:	f841 3b04 	str.w	r3, [r1], #4
 800712e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007132:	d2e6      	bcs.n	8007102 <quorem+0xa4>
 8007134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007138:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800713c:	b922      	cbnz	r2, 8007148 <quorem+0xea>
 800713e:	3b04      	subs	r3, #4
 8007140:	429d      	cmp	r5, r3
 8007142:	461a      	mov	r2, r3
 8007144:	d30b      	bcc.n	800715e <quorem+0x100>
 8007146:	613c      	str	r4, [r7, #16]
 8007148:	3601      	adds	r6, #1
 800714a:	4630      	mov	r0, r6
 800714c:	b003      	add	sp, #12
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	3b04      	subs	r3, #4
 8007156:	2a00      	cmp	r2, #0
 8007158:	d1cb      	bne.n	80070f2 <quorem+0x94>
 800715a:	3c01      	subs	r4, #1
 800715c:	e7c6      	b.n	80070ec <quorem+0x8e>
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	3b04      	subs	r3, #4
 8007162:	2a00      	cmp	r2, #0
 8007164:	d1ef      	bne.n	8007146 <quorem+0xe8>
 8007166:	3c01      	subs	r4, #1
 8007168:	e7ea      	b.n	8007140 <quorem+0xe2>
 800716a:	2000      	movs	r0, #0
 800716c:	e7ee      	b.n	800714c <quorem+0xee>
	...

08007170 <_dtoa_r>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	69c7      	ldr	r7, [r0, #28]
 8007176:	b099      	sub	sp, #100	@ 0x64
 8007178:	ed8d 0b02 	vstr	d0, [sp, #8]
 800717c:	ec55 4b10 	vmov	r4, r5, d0
 8007180:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007182:	9109      	str	r1, [sp, #36]	@ 0x24
 8007184:	4683      	mov	fp, r0
 8007186:	920e      	str	r2, [sp, #56]	@ 0x38
 8007188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800718a:	b97f      	cbnz	r7, 80071ac <_dtoa_r+0x3c>
 800718c:	2010      	movs	r0, #16
 800718e:	f000 fdfd 	bl	8007d8c <malloc>
 8007192:	4602      	mov	r2, r0
 8007194:	f8cb 001c 	str.w	r0, [fp, #28]
 8007198:	b920      	cbnz	r0, 80071a4 <_dtoa_r+0x34>
 800719a:	4ba7      	ldr	r3, [pc, #668]	@ (8007438 <_dtoa_r+0x2c8>)
 800719c:	21ef      	movs	r1, #239	@ 0xef
 800719e:	48a7      	ldr	r0, [pc, #668]	@ (800743c <_dtoa_r+0x2cc>)
 80071a0:	f001 fcbc 	bl	8008b1c <__assert_func>
 80071a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071a8:	6007      	str	r7, [r0, #0]
 80071aa:	60c7      	str	r7, [r0, #12]
 80071ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	b159      	cbz	r1, 80071cc <_dtoa_r+0x5c>
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	604a      	str	r2, [r1, #4]
 80071b8:	2301      	movs	r3, #1
 80071ba:	4093      	lsls	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
 80071be:	4658      	mov	r0, fp
 80071c0:	f000 feda 	bl	8007f78 <_Bfree>
 80071c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	1e2b      	subs	r3, r5, #0
 80071ce:	bfb9      	ittee	lt
 80071d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071d4:	9303      	strlt	r3, [sp, #12]
 80071d6:	2300      	movge	r3, #0
 80071d8:	6033      	strge	r3, [r6, #0]
 80071da:	9f03      	ldr	r7, [sp, #12]
 80071dc:	4b98      	ldr	r3, [pc, #608]	@ (8007440 <_dtoa_r+0x2d0>)
 80071de:	bfbc      	itt	lt
 80071e0:	2201      	movlt	r2, #1
 80071e2:	6032      	strlt	r2, [r6, #0]
 80071e4:	43bb      	bics	r3, r7
 80071e6:	d112      	bne.n	800720e <_dtoa_r+0x9e>
 80071e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071f4:	4323      	orrs	r3, r4
 80071f6:	f000 854d 	beq.w	8007c94 <_dtoa_r+0xb24>
 80071fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007454 <_dtoa_r+0x2e4>
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 854f 	beq.w	8007ca4 <_dtoa_r+0xb34>
 8007206:	f10a 0303 	add.w	r3, sl, #3
 800720a:	f000 bd49 	b.w	8007ca0 <_dtoa_r+0xb30>
 800720e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	ec51 0b17 	vmov	r0, r1, d7
 8007218:	2300      	movs	r3, #0
 800721a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800721e:	f7f9 fc73 	bl	8000b08 <__aeabi_dcmpeq>
 8007222:	4680      	mov	r8, r0
 8007224:	b158      	cbz	r0, 800723e <_dtoa_r+0xce>
 8007226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007228:	2301      	movs	r3, #1
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800722e:	b113      	cbz	r3, 8007236 <_dtoa_r+0xc6>
 8007230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007232:	4b84      	ldr	r3, [pc, #528]	@ (8007444 <_dtoa_r+0x2d4>)
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007458 <_dtoa_r+0x2e8>
 800723a:	f000 bd33 	b.w	8007ca4 <_dtoa_r+0xb34>
 800723e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007242:	aa16      	add	r2, sp, #88	@ 0x58
 8007244:	a917      	add	r1, sp, #92	@ 0x5c
 8007246:	4658      	mov	r0, fp
 8007248:	f001 f980 	bl	800854c <__d2b>
 800724c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007250:	4681      	mov	r9, r0
 8007252:	2e00      	cmp	r6, #0
 8007254:	d077      	beq.n	8007346 <_dtoa_r+0x1d6>
 8007256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007258:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800725c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800726c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007270:	4619      	mov	r1, r3
 8007272:	2200      	movs	r2, #0
 8007274:	4b74      	ldr	r3, [pc, #464]	@ (8007448 <_dtoa_r+0x2d8>)
 8007276:	f7f9 f827 	bl	80002c8 <__aeabi_dsub>
 800727a:	a369      	add	r3, pc, #420	@ (adr r3, 8007420 <_dtoa_r+0x2b0>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f9 f9da 	bl	8000638 <__aeabi_dmul>
 8007284:	a368      	add	r3, pc, #416	@ (adr r3, 8007428 <_dtoa_r+0x2b8>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f81f 	bl	80002cc <__adddf3>
 800728e:	4604      	mov	r4, r0
 8007290:	4630      	mov	r0, r6
 8007292:	460d      	mov	r5, r1
 8007294:	f7f9 f966 	bl	8000564 <__aeabi_i2d>
 8007298:	a365      	add	r3, pc, #404	@ (adr r3, 8007430 <_dtoa_r+0x2c0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 f9cb 	bl	8000638 <__aeabi_dmul>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7f9 f80f 	bl	80002cc <__adddf3>
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	f7f9 fc71 	bl	8000b98 <__aeabi_d2iz>
 80072b6:	2200      	movs	r2, #0
 80072b8:	4607      	mov	r7, r0
 80072ba:	2300      	movs	r3, #0
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f9 fc2c 	bl	8000b1c <__aeabi_dcmplt>
 80072c4:	b140      	cbz	r0, 80072d8 <_dtoa_r+0x168>
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7f9 f94c 	bl	8000564 <__aeabi_i2d>
 80072cc:	4622      	mov	r2, r4
 80072ce:	462b      	mov	r3, r5
 80072d0:	f7f9 fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 80072d4:	b900      	cbnz	r0, 80072d8 <_dtoa_r+0x168>
 80072d6:	3f01      	subs	r7, #1
 80072d8:	2f16      	cmp	r7, #22
 80072da:	d851      	bhi.n	8007380 <_dtoa_r+0x210>
 80072dc:	4b5b      	ldr	r3, [pc, #364]	@ (800744c <_dtoa_r+0x2dc>)
 80072de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ea:	f7f9 fc17 	bl	8000b1c <__aeabi_dcmplt>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d048      	beq.n	8007384 <_dtoa_r+0x214>
 80072f2:	3f01      	subs	r7, #1
 80072f4:	2300      	movs	r3, #0
 80072f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80072f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	bf44      	itt	mi
 8007300:	f1c3 0801 	rsbmi	r8, r3, #1
 8007304:	2300      	movmi	r3, #0
 8007306:	9208      	str	r2, [sp, #32]
 8007308:	bf54      	ite	pl
 800730a:	f04f 0800 	movpl.w	r8, #0
 800730e:	9308      	strmi	r3, [sp, #32]
 8007310:	2f00      	cmp	r7, #0
 8007312:	db39      	blt.n	8007388 <_dtoa_r+0x218>
 8007314:	9b08      	ldr	r3, [sp, #32]
 8007316:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007318:	443b      	add	r3, r7
 800731a:	9308      	str	r3, [sp, #32]
 800731c:	2300      	movs	r3, #0
 800731e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007322:	2b09      	cmp	r3, #9
 8007324:	d864      	bhi.n	80073f0 <_dtoa_r+0x280>
 8007326:	2b05      	cmp	r3, #5
 8007328:	bfc4      	itt	gt
 800732a:	3b04      	subgt	r3, #4
 800732c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800732e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007330:	f1a3 0302 	sub.w	r3, r3, #2
 8007334:	bfcc      	ite	gt
 8007336:	2400      	movgt	r4, #0
 8007338:	2401      	movle	r4, #1
 800733a:	2b03      	cmp	r3, #3
 800733c:	d863      	bhi.n	8007406 <_dtoa_r+0x296>
 800733e:	e8df f003 	tbb	[pc, r3]
 8007342:	372a      	.short	0x372a
 8007344:	5535      	.short	0x5535
 8007346:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800734a:	441e      	add	r6, r3
 800734c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007350:	2b20      	cmp	r3, #32
 8007352:	bfc1      	itttt	gt
 8007354:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007358:	409f      	lslgt	r7, r3
 800735a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800735e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007362:	bfd6      	itet	le
 8007364:	f1c3 0320 	rsble	r3, r3, #32
 8007368:	ea47 0003 	orrgt.w	r0, r7, r3
 800736c:	fa04 f003 	lslle.w	r0, r4, r3
 8007370:	f7f9 f8e8 	bl	8000544 <__aeabi_ui2d>
 8007374:	2201      	movs	r2, #1
 8007376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800737a:	3e01      	subs	r6, #1
 800737c:	9214      	str	r2, [sp, #80]	@ 0x50
 800737e:	e777      	b.n	8007270 <_dtoa_r+0x100>
 8007380:	2301      	movs	r3, #1
 8007382:	e7b8      	b.n	80072f6 <_dtoa_r+0x186>
 8007384:	9012      	str	r0, [sp, #72]	@ 0x48
 8007386:	e7b7      	b.n	80072f8 <_dtoa_r+0x188>
 8007388:	427b      	negs	r3, r7
 800738a:	930a      	str	r3, [sp, #40]	@ 0x28
 800738c:	2300      	movs	r3, #0
 800738e:	eba8 0807 	sub.w	r8, r8, r7
 8007392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007394:	e7c4      	b.n	8007320 <_dtoa_r+0x1b0>
 8007396:	2300      	movs	r3, #0
 8007398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	dc35      	bgt.n	800740c <_dtoa_r+0x29c>
 80073a0:	2301      	movs	r3, #1
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	461a      	mov	r2, r3
 80073a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073aa:	e00b      	b.n	80073c4 <_dtoa_r+0x254>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e7f3      	b.n	8007398 <_dtoa_r+0x228>
 80073b0:	2300      	movs	r3, #0
 80073b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	3301      	adds	r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	bfb8      	it	lt
 80073c2:	2301      	movlt	r3, #1
 80073c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80073c8:	2100      	movs	r1, #0
 80073ca:	2204      	movs	r2, #4
 80073cc:	f102 0514 	add.w	r5, r2, #20
 80073d0:	429d      	cmp	r5, r3
 80073d2:	d91f      	bls.n	8007414 <_dtoa_r+0x2a4>
 80073d4:	6041      	str	r1, [r0, #4]
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 fd8e 	bl	8007ef8 <_Balloc>
 80073dc:	4682      	mov	sl, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	d13c      	bne.n	800745c <_dtoa_r+0x2ec>
 80073e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007450 <_dtoa_r+0x2e0>)
 80073e4:	4602      	mov	r2, r0
 80073e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80073ea:	e6d8      	b.n	800719e <_dtoa_r+0x2e>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e7e0      	b.n	80073b2 <_dtoa_r+0x242>
 80073f0:	2401      	movs	r4, #1
 80073f2:	2300      	movs	r3, #0
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	9307      	str	r3, [sp, #28]
 8007400:	2200      	movs	r2, #0
 8007402:	2312      	movs	r3, #18
 8007404:	e7d0      	b.n	80073a8 <_dtoa_r+0x238>
 8007406:	2301      	movs	r3, #1
 8007408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800740a:	e7f5      	b.n	80073f8 <_dtoa_r+0x288>
 800740c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	e7d7      	b.n	80073c4 <_dtoa_r+0x254>
 8007414:	3101      	adds	r1, #1
 8007416:	0052      	lsls	r2, r2, #1
 8007418:	e7d8      	b.n	80073cc <_dtoa_r+0x25c>
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	08008e25 	.word	0x08008e25
 800743c:	08008e3c 	.word	0x08008e3c
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	08008df5 	.word	0x08008df5
 8007448:	3ff80000 	.word	0x3ff80000
 800744c:	08008f38 	.word	0x08008f38
 8007450:	08008e94 	.word	0x08008e94
 8007454:	08008e21 	.word	0x08008e21
 8007458:	08008df4 	.word	0x08008df4
 800745c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007460:	6018      	str	r0, [r3, #0]
 8007462:	9b07      	ldr	r3, [sp, #28]
 8007464:	2b0e      	cmp	r3, #14
 8007466:	f200 80a4 	bhi.w	80075b2 <_dtoa_r+0x442>
 800746a:	2c00      	cmp	r4, #0
 800746c:	f000 80a1 	beq.w	80075b2 <_dtoa_r+0x442>
 8007470:	2f00      	cmp	r7, #0
 8007472:	dd33      	ble.n	80074dc <_dtoa_r+0x36c>
 8007474:	4bad      	ldr	r3, [pc, #692]	@ (800772c <_dtoa_r+0x5bc>)
 8007476:	f007 020f 	and.w	r2, r7, #15
 800747a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800747e:	ed93 7b00 	vldr	d7, [r3]
 8007482:	05f8      	lsls	r0, r7, #23
 8007484:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007488:	ea4f 1427 	mov.w	r4, r7, asr #4
 800748c:	d516      	bpl.n	80074bc <_dtoa_r+0x34c>
 800748e:	4ba8      	ldr	r3, [pc, #672]	@ (8007730 <_dtoa_r+0x5c0>)
 8007490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007498:	f7f9 f9f8 	bl	800088c <__aeabi_ddiv>
 800749c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a0:	f004 040f 	and.w	r4, r4, #15
 80074a4:	2603      	movs	r6, #3
 80074a6:	4da2      	ldr	r5, [pc, #648]	@ (8007730 <_dtoa_r+0x5c0>)
 80074a8:	b954      	cbnz	r4, 80074c0 <_dtoa_r+0x350>
 80074aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b2:	f7f9 f9eb 	bl	800088c <__aeabi_ddiv>
 80074b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ba:	e028      	b.n	800750e <_dtoa_r+0x39e>
 80074bc:	2602      	movs	r6, #2
 80074be:	e7f2      	b.n	80074a6 <_dtoa_r+0x336>
 80074c0:	07e1      	lsls	r1, r4, #31
 80074c2:	d508      	bpl.n	80074d6 <_dtoa_r+0x366>
 80074c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074cc:	f7f9 f8b4 	bl	8000638 <__aeabi_dmul>
 80074d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074d4:	3601      	adds	r6, #1
 80074d6:	1064      	asrs	r4, r4, #1
 80074d8:	3508      	adds	r5, #8
 80074da:	e7e5      	b.n	80074a8 <_dtoa_r+0x338>
 80074dc:	f000 80d2 	beq.w	8007684 <_dtoa_r+0x514>
 80074e0:	427c      	negs	r4, r7
 80074e2:	4b92      	ldr	r3, [pc, #584]	@ (800772c <_dtoa_r+0x5bc>)
 80074e4:	4d92      	ldr	r5, [pc, #584]	@ (8007730 <_dtoa_r+0x5c0>)
 80074e6:	f004 020f 	and.w	r2, r4, #15
 80074ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074f6:	f7f9 f89f 	bl	8000638 <__aeabi_dmul>
 80074fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074fe:	1124      	asrs	r4, r4, #4
 8007500:	2300      	movs	r3, #0
 8007502:	2602      	movs	r6, #2
 8007504:	2c00      	cmp	r4, #0
 8007506:	f040 80b2 	bne.w	800766e <_dtoa_r+0x4fe>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1d3      	bne.n	80074b6 <_dtoa_r+0x346>
 800750e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007510:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80b7 	beq.w	8007688 <_dtoa_r+0x518>
 800751a:	4b86      	ldr	r3, [pc, #536]	@ (8007734 <_dtoa_r+0x5c4>)
 800751c:	2200      	movs	r2, #0
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f9 fafb 	bl	8000b1c <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	f000 80ae 	beq.w	8007688 <_dtoa_r+0x518>
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80aa 	beq.w	8007688 <_dtoa_r+0x518>
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd37      	ble.n	80075aa <_dtoa_r+0x43a>
 800753a:	1e7b      	subs	r3, r7, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	4620      	mov	r0, r4
 8007540:	4b7d      	ldr	r3, [pc, #500]	@ (8007738 <_dtoa_r+0x5c8>)
 8007542:	2200      	movs	r2, #0
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 f877 	bl	8000638 <__aeabi_dmul>
 800754a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754e:	9c00      	ldr	r4, [sp, #0]
 8007550:	3601      	adds	r6, #1
 8007552:	4630      	mov	r0, r6
 8007554:	f7f9 f806 	bl	8000564 <__aeabi_i2d>
 8007558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800755c:	f7f9 f86c 	bl	8000638 <__aeabi_dmul>
 8007560:	4b76      	ldr	r3, [pc, #472]	@ (800773c <_dtoa_r+0x5cc>)
 8007562:	2200      	movs	r2, #0
 8007564:	f7f8 feb2 	bl	80002cc <__adddf3>
 8007568:	4605      	mov	r5, r0
 800756a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800756e:	2c00      	cmp	r4, #0
 8007570:	f040 808d 	bne.w	800768e <_dtoa_r+0x51e>
 8007574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007578:	4b71      	ldr	r3, [pc, #452]	@ (8007740 <_dtoa_r+0x5d0>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f8 fea4 	bl	80002c8 <__aeabi_dsub>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007588:	462a      	mov	r2, r5
 800758a:	4633      	mov	r3, r6
 800758c:	f7f9 fae4 	bl	8000b58 <__aeabi_dcmpgt>
 8007590:	2800      	cmp	r0, #0
 8007592:	f040 828b 	bne.w	8007aac <_dtoa_r+0x93c>
 8007596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759a:	462a      	mov	r2, r5
 800759c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075a0:	f7f9 fabc 	bl	8000b1c <__aeabi_dcmplt>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f040 8128 	bne.w	80077fa <_dtoa_r+0x68a>
 80075aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80075ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80075b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f2c0 815a 	blt.w	800786e <_dtoa_r+0x6fe>
 80075ba:	2f0e      	cmp	r7, #14
 80075bc:	f300 8157 	bgt.w	800786e <_dtoa_r+0x6fe>
 80075c0:	4b5a      	ldr	r3, [pc, #360]	@ (800772c <_dtoa_r+0x5bc>)
 80075c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075c6:	ed93 7b00 	vldr	d7, [r3]
 80075ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	ed8d 7b00 	vstr	d7, [sp]
 80075d2:	da03      	bge.n	80075dc <_dtoa_r+0x46c>
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f340 8101 	ble.w	80077de <_dtoa_r+0x66e>
 80075dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075e0:	4656      	mov	r6, sl
 80075e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f9 f94f 	bl	800088c <__aeabi_ddiv>
 80075ee:	f7f9 fad3 	bl	8000b98 <__aeabi_d2iz>
 80075f2:	4680      	mov	r8, r0
 80075f4:	f7f8 ffb6 	bl	8000564 <__aeabi_i2d>
 80075f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075fc:	f7f9 f81c 	bl	8000638 <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800760c:	f7f8 fe5c 	bl	80002c8 <__aeabi_dsub>
 8007610:	f806 4b01 	strb.w	r4, [r6], #1
 8007614:	9d07      	ldr	r5, [sp, #28]
 8007616:	eba6 040a 	sub.w	r4, r6, sl
 800761a:	42a5      	cmp	r5, r4
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	f040 8117 	bne.w	8007852 <_dtoa_r+0x6e2>
 8007624:	f7f8 fe52 	bl	80002cc <__adddf3>
 8007628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	f7f9 fa92 	bl	8000b58 <__aeabi_dcmpgt>
 8007634:	2800      	cmp	r0, #0
 8007636:	f040 80f9 	bne.w	800782c <_dtoa_r+0x6bc>
 800763a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa61 	bl	8000b08 <__aeabi_dcmpeq>
 8007646:	b118      	cbz	r0, 8007650 <_dtoa_r+0x4e0>
 8007648:	f018 0f01 	tst.w	r8, #1
 800764c:	f040 80ee 	bne.w	800782c <_dtoa_r+0x6bc>
 8007650:	4649      	mov	r1, r9
 8007652:	4658      	mov	r0, fp
 8007654:	f000 fc90 	bl	8007f78 <_Bfree>
 8007658:	2300      	movs	r3, #0
 800765a:	7033      	strb	r3, [r6, #0]
 800765c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800765e:	3701      	adds	r7, #1
 8007660:	601f      	str	r7, [r3, #0]
 8007662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 831d 	beq.w	8007ca4 <_dtoa_r+0xb34>
 800766a:	601e      	str	r6, [r3, #0]
 800766c:	e31a      	b.n	8007ca4 <_dtoa_r+0xb34>
 800766e:	07e2      	lsls	r2, r4, #31
 8007670:	d505      	bpl.n	800767e <_dtoa_r+0x50e>
 8007672:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007676:	f7f8 ffdf 	bl	8000638 <__aeabi_dmul>
 800767a:	3601      	adds	r6, #1
 800767c:	2301      	movs	r3, #1
 800767e:	1064      	asrs	r4, r4, #1
 8007680:	3508      	adds	r5, #8
 8007682:	e73f      	b.n	8007504 <_dtoa_r+0x394>
 8007684:	2602      	movs	r6, #2
 8007686:	e742      	b.n	800750e <_dtoa_r+0x39e>
 8007688:	9c07      	ldr	r4, [sp, #28]
 800768a:	9704      	str	r7, [sp, #16]
 800768c:	e761      	b.n	8007552 <_dtoa_r+0x3e2>
 800768e:	4b27      	ldr	r3, [pc, #156]	@ (800772c <_dtoa_r+0x5bc>)
 8007690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800769a:	4454      	add	r4, sl
 800769c:	2900      	cmp	r1, #0
 800769e:	d053      	beq.n	8007748 <_dtoa_r+0x5d8>
 80076a0:	4928      	ldr	r1, [pc, #160]	@ (8007744 <_dtoa_r+0x5d4>)
 80076a2:	2000      	movs	r0, #0
 80076a4:	f7f9 f8f2 	bl	800088c <__aeabi_ddiv>
 80076a8:	4633      	mov	r3, r6
 80076aa:	462a      	mov	r2, r5
 80076ac:	f7f8 fe0c 	bl	80002c8 <__aeabi_dsub>
 80076b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076b4:	4656      	mov	r6, sl
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	f7f9 fa6d 	bl	8000b98 <__aeabi_d2iz>
 80076be:	4605      	mov	r5, r0
 80076c0:	f7f8 ff50 	bl	8000564 <__aeabi_i2d>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f8 fdfc 	bl	80002c8 <__aeabi_dsub>
 80076d0:	3530      	adds	r5, #48	@ 0x30
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076da:	f806 5b01 	strb.w	r5, [r6], #1
 80076de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076e2:	f7f9 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d171      	bne.n	80077ce <_dtoa_r+0x65e>
 80076ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076ee:	4911      	ldr	r1, [pc, #68]	@ (8007734 <_dtoa_r+0x5c4>)
 80076f0:	2000      	movs	r0, #0
 80076f2:	f7f8 fde9 	bl	80002c8 <__aeabi_dsub>
 80076f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076fa:	f7f9 fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f040 8095 	bne.w	800782e <_dtoa_r+0x6be>
 8007704:	42a6      	cmp	r6, r4
 8007706:	f43f af50 	beq.w	80075aa <_dtoa_r+0x43a>
 800770a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800770e:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <_dtoa_r+0x5c8>)
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff91 	bl	8000638 <__aeabi_dmul>
 8007716:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <_dtoa_r+0x5c8>)
 8007718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800771c:	2200      	movs	r2, #0
 800771e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772a:	e7c4      	b.n	80076b6 <_dtoa_r+0x546>
 800772c:	08008f38 	.word	0x08008f38
 8007730:	08008f10 	.word	0x08008f10
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	40240000 	.word	0x40240000
 800773c:	401c0000 	.word	0x401c0000
 8007740:	40140000 	.word	0x40140000
 8007744:	3fe00000 	.word	0x3fe00000
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	f7f8 ff74 	bl	8000638 <__aeabi_dmul>
 8007750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007754:	9415      	str	r4, [sp, #84]	@ 0x54
 8007756:	4656      	mov	r6, sl
 8007758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775c:	f7f9 fa1c 	bl	8000b98 <__aeabi_d2iz>
 8007760:	4605      	mov	r5, r0
 8007762:	f7f8 feff 	bl	8000564 <__aeabi_i2d>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800776e:	f7f8 fdab 	bl	80002c8 <__aeabi_dsub>
 8007772:	3530      	adds	r5, #48	@ 0x30
 8007774:	f806 5b01 	strb.w	r5, [r6], #1
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	42a6      	cmp	r6, r4
 800777e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	d124      	bne.n	80077d2 <_dtoa_r+0x662>
 8007788:	4bac      	ldr	r3, [pc, #688]	@ (8007a3c <_dtoa_r+0x8cc>)
 800778a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800778e:	f7f8 fd9d 	bl	80002cc <__adddf3>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f9 f9dd 	bl	8000b58 <__aeabi_dcmpgt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d145      	bne.n	800782e <_dtoa_r+0x6be>
 80077a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077a6:	49a5      	ldr	r1, [pc, #660]	@ (8007a3c <_dtoa_r+0x8cc>)
 80077a8:	2000      	movs	r0, #0
 80077aa:	f7f8 fd8d 	bl	80002c8 <__aeabi_dsub>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b6:	f7f9 f9b1 	bl	8000b1c <__aeabi_dcmplt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aef5 	beq.w	80075aa <_dtoa_r+0x43a>
 80077c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80077c2:	1e73      	subs	r3, r6, #1
 80077c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80077c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ca:	2b30      	cmp	r3, #48	@ 0x30
 80077cc:	d0f8      	beq.n	80077c0 <_dtoa_r+0x650>
 80077ce:	9f04      	ldr	r7, [sp, #16]
 80077d0:	e73e      	b.n	8007650 <_dtoa_r+0x4e0>
 80077d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007a40 <_dtoa_r+0x8d0>)
 80077d4:	f7f8 ff30 	bl	8000638 <__aeabi_dmul>
 80077d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077dc:	e7bc      	b.n	8007758 <_dtoa_r+0x5e8>
 80077de:	d10c      	bne.n	80077fa <_dtoa_r+0x68a>
 80077e0:	4b98      	ldr	r3, [pc, #608]	@ (8007a44 <_dtoa_r+0x8d4>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e8:	f7f8 ff26 	bl	8000638 <__aeabi_dmul>
 80077ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077f0:	f7f9 f9a8 	bl	8000b44 <__aeabi_dcmpge>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f000 8157 	beq.w	8007aa8 <_dtoa_r+0x938>
 80077fa:	2400      	movs	r4, #0
 80077fc:	4625      	mov	r5, r4
 80077fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007800:	43db      	mvns	r3, r3
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	4656      	mov	r6, sl
 8007806:	2700      	movs	r7, #0
 8007808:	4621      	mov	r1, r4
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fbb4 	bl	8007f78 <_Bfree>
 8007810:	2d00      	cmp	r5, #0
 8007812:	d0dc      	beq.n	80077ce <_dtoa_r+0x65e>
 8007814:	b12f      	cbz	r7, 8007822 <_dtoa_r+0x6b2>
 8007816:	42af      	cmp	r7, r5
 8007818:	d003      	beq.n	8007822 <_dtoa_r+0x6b2>
 800781a:	4639      	mov	r1, r7
 800781c:	4658      	mov	r0, fp
 800781e:	f000 fbab 	bl	8007f78 <_Bfree>
 8007822:	4629      	mov	r1, r5
 8007824:	4658      	mov	r0, fp
 8007826:	f000 fba7 	bl	8007f78 <_Bfree>
 800782a:	e7d0      	b.n	80077ce <_dtoa_r+0x65e>
 800782c:	9704      	str	r7, [sp, #16]
 800782e:	4633      	mov	r3, r6
 8007830:	461e      	mov	r6, r3
 8007832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007836:	2a39      	cmp	r2, #57	@ 0x39
 8007838:	d107      	bne.n	800784a <_dtoa_r+0x6da>
 800783a:	459a      	cmp	sl, r3
 800783c:	d1f8      	bne.n	8007830 <_dtoa_r+0x6c0>
 800783e:	9a04      	ldr	r2, [sp, #16]
 8007840:	3201      	adds	r2, #1
 8007842:	9204      	str	r2, [sp, #16]
 8007844:	2230      	movs	r2, #48	@ 0x30
 8007846:	f88a 2000 	strb.w	r2, [sl]
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	3201      	adds	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e7bd      	b.n	80077ce <_dtoa_r+0x65e>
 8007852:	4b7b      	ldr	r3, [pc, #492]	@ (8007a40 <_dtoa_r+0x8d0>)
 8007854:	2200      	movs	r2, #0
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	460d      	mov	r5, r1
 8007862:	f7f9 f951 	bl	8000b08 <__aeabi_dcmpeq>
 8007866:	2800      	cmp	r0, #0
 8007868:	f43f aebb 	beq.w	80075e2 <_dtoa_r+0x472>
 800786c:	e6f0      	b.n	8007650 <_dtoa_r+0x4e0>
 800786e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007870:	2a00      	cmp	r2, #0
 8007872:	f000 80db 	beq.w	8007a2c <_dtoa_r+0x8bc>
 8007876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007878:	2a01      	cmp	r2, #1
 800787a:	f300 80bf 	bgt.w	80079fc <_dtoa_r+0x88c>
 800787e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007880:	2a00      	cmp	r2, #0
 8007882:	f000 80b7 	beq.w	80079f4 <_dtoa_r+0x884>
 8007886:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800788a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800788c:	4646      	mov	r6, r8
 800788e:	9a08      	ldr	r2, [sp, #32]
 8007890:	2101      	movs	r1, #1
 8007892:	441a      	add	r2, r3
 8007894:	4658      	mov	r0, fp
 8007896:	4498      	add	r8, r3
 8007898:	9208      	str	r2, [sp, #32]
 800789a:	f000 fc21 	bl	80080e0 <__i2b>
 800789e:	4605      	mov	r5, r0
 80078a0:	b15e      	cbz	r6, 80078ba <_dtoa_r+0x74a>
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd08      	ble.n	80078ba <_dtoa_r+0x74a>
 80078a8:	42b3      	cmp	r3, r6
 80078aa:	9a08      	ldr	r2, [sp, #32]
 80078ac:	bfa8      	it	ge
 80078ae:	4633      	movge	r3, r6
 80078b0:	eba8 0803 	sub.w	r8, r8, r3
 80078b4:	1af6      	subs	r6, r6, r3
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078bc:	b1f3      	cbz	r3, 80078fc <_dtoa_r+0x78c>
 80078be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80b7 	beq.w	8007a34 <_dtoa_r+0x8c4>
 80078c6:	b18c      	cbz	r4, 80078ec <_dtoa_r+0x77c>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4622      	mov	r2, r4
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fcc7 	bl	8008260 <__pow5mult>
 80078d2:	464a      	mov	r2, r9
 80078d4:	4601      	mov	r1, r0
 80078d6:	4605      	mov	r5, r0
 80078d8:	4658      	mov	r0, fp
 80078da:	f000 fc17 	bl	800810c <__multiply>
 80078de:	4649      	mov	r1, r9
 80078e0:	9004      	str	r0, [sp, #16]
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 fb48 	bl	8007f78 <_Bfree>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	4699      	mov	r9, r3
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	1b1a      	subs	r2, r3, r4
 80078f0:	d004      	beq.n	80078fc <_dtoa_r+0x78c>
 80078f2:	4649      	mov	r1, r9
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fcb3 	bl	8008260 <__pow5mult>
 80078fa:	4681      	mov	r9, r0
 80078fc:	2101      	movs	r1, #1
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 fbee 	bl	80080e0 <__i2b>
 8007904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007906:	4604      	mov	r4, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 81cf 	beq.w	8007cac <_dtoa_r+0xb3c>
 800790e:	461a      	mov	r2, r3
 8007910:	4601      	mov	r1, r0
 8007912:	4658      	mov	r0, fp
 8007914:	f000 fca4 	bl	8008260 <__pow5mult>
 8007918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791a:	2b01      	cmp	r3, #1
 800791c:	4604      	mov	r4, r0
 800791e:	f300 8095 	bgt.w	8007a4c <_dtoa_r+0x8dc>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 8087 	bne.w	8007a38 <_dtoa_r+0x8c8>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 8089 	bne.w	8007a48 <_dtoa_r+0x8d8>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800793c:	0d1b      	lsrs	r3, r3, #20
 800793e:	051b      	lsls	r3, r3, #20
 8007940:	b12b      	cbz	r3, 800794e <_dtoa_r+0x7de>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	3301      	adds	r3, #1
 8007946:	9308      	str	r3, [sp, #32]
 8007948:	f108 0801 	add.w	r8, r8, #1
 800794c:	2301      	movs	r3, #1
 800794e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 81b0 	beq.w	8007cb8 <_dtoa_r+0xb48>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800795e:	6918      	ldr	r0, [r3, #16]
 8007960:	f000 fb72 	bl	8008048 <__hi0bits>
 8007964:	f1c0 0020 	rsb	r0, r0, #32
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	4418      	add	r0, r3
 800796c:	f010 001f 	ands.w	r0, r0, #31
 8007970:	d077      	beq.n	8007a62 <_dtoa_r+0x8f2>
 8007972:	f1c0 0320 	rsb	r3, r0, #32
 8007976:	2b04      	cmp	r3, #4
 8007978:	dd6b      	ble.n	8007a52 <_dtoa_r+0x8e2>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	f1c0 001c 	rsb	r0, r0, #28
 8007980:	4403      	add	r3, r0
 8007982:	4480      	add	r8, r0
 8007984:	4406      	add	r6, r0
 8007986:	9308      	str	r3, [sp, #32]
 8007988:	f1b8 0f00 	cmp.w	r8, #0
 800798c:	dd05      	ble.n	800799a <_dtoa_r+0x82a>
 800798e:	4649      	mov	r1, r9
 8007990:	4642      	mov	r2, r8
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fcbe 	bl	8008314 <__lshift>
 8007998:	4681      	mov	r9, r0
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd05      	ble.n	80079ac <_dtoa_r+0x83c>
 80079a0:	4621      	mov	r1, r4
 80079a2:	461a      	mov	r2, r3
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fcb5 	bl	8008314 <__lshift>
 80079aa:	4604      	mov	r4, r0
 80079ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d059      	beq.n	8007a66 <_dtoa_r+0x8f6>
 80079b2:	4621      	mov	r1, r4
 80079b4:	4648      	mov	r0, r9
 80079b6:	f000 fd19 	bl	80083ec <__mcmp>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	da53      	bge.n	8007a66 <_dtoa_r+0x8f6>
 80079be:	1e7b      	subs	r3, r7, #1
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	4649      	mov	r1, r9
 80079c4:	2300      	movs	r3, #0
 80079c6:	220a      	movs	r2, #10
 80079c8:	4658      	mov	r0, fp
 80079ca:	f000 faf7 	bl	8007fbc <__multadd>
 80079ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d0:	4681      	mov	r9, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8172 	beq.w	8007cbc <_dtoa_r+0xb4c>
 80079d8:	2300      	movs	r3, #0
 80079da:	4629      	mov	r1, r5
 80079dc:	220a      	movs	r2, #10
 80079de:	4658      	mov	r0, fp
 80079e0:	f000 faec 	bl	8007fbc <__multadd>
 80079e4:	9b00      	ldr	r3, [sp, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	4605      	mov	r5, r0
 80079ea:	dc67      	bgt.n	8007abc <_dtoa_r+0x94c>
 80079ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	dc41      	bgt.n	8007a76 <_dtoa_r+0x906>
 80079f2:	e063      	b.n	8007abc <_dtoa_r+0x94c>
 80079f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079fa:	e746      	b.n	800788a <_dtoa_r+0x71a>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	1e5c      	subs	r4, r3, #1
 8007a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	bfbf      	itttt	lt
 8007a06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a0c:	1ae3      	sublt	r3, r4, r3
 8007a0e:	bfb4      	ite	lt
 8007a10:	18d2      	addlt	r2, r2, r3
 8007a12:	1b1c      	subge	r4, r3, r4
 8007a14:	9b07      	ldr	r3, [sp, #28]
 8007a16:	bfbc      	itt	lt
 8007a18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a1a:	2400      	movlt	r4, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bfb5      	itete	lt
 8007a20:	eba8 0603 	sublt.w	r6, r8, r3
 8007a24:	9b07      	ldrge	r3, [sp, #28]
 8007a26:	2300      	movlt	r3, #0
 8007a28:	4646      	movge	r6, r8
 8007a2a:	e730      	b.n	800788e <_dtoa_r+0x71e>
 8007a2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a30:	4646      	mov	r6, r8
 8007a32:	e735      	b.n	80078a0 <_dtoa_r+0x730>
 8007a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a36:	e75c      	b.n	80078f2 <_dtoa_r+0x782>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e788      	b.n	800794e <_dtoa_r+0x7de>
 8007a3c:	3fe00000 	.word	0x3fe00000
 8007a40:	40240000 	.word	0x40240000
 8007a44:	40140000 	.word	0x40140000
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	e780      	b.n	800794e <_dtoa_r+0x7de>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a50:	e782      	b.n	8007958 <_dtoa_r+0x7e8>
 8007a52:	d099      	beq.n	8007988 <_dtoa_r+0x818>
 8007a54:	9a08      	ldr	r2, [sp, #32]
 8007a56:	331c      	adds	r3, #28
 8007a58:	441a      	add	r2, r3
 8007a5a:	4498      	add	r8, r3
 8007a5c:	441e      	add	r6, r3
 8007a5e:	9208      	str	r2, [sp, #32]
 8007a60:	e792      	b.n	8007988 <_dtoa_r+0x818>
 8007a62:	4603      	mov	r3, r0
 8007a64:	e7f6      	b.n	8007a54 <_dtoa_r+0x8e4>
 8007a66:	9b07      	ldr	r3, [sp, #28]
 8007a68:	9704      	str	r7, [sp, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dc20      	bgt.n	8007ab0 <_dtoa_r+0x940>
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	dd1e      	ble.n	8007ab4 <_dtoa_r+0x944>
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f47f aec0 	bne.w	80077fe <_dtoa_r+0x68e>
 8007a7e:	4621      	mov	r1, r4
 8007a80:	2205      	movs	r2, #5
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 fa9a 	bl	8007fbc <__multadd>
 8007a88:	4601      	mov	r1, r0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 fcad 	bl	80083ec <__mcmp>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f77f aeb3 	ble.w	80077fe <_dtoa_r+0x68e>
 8007a98:	4656      	mov	r6, sl
 8007a9a:	2331      	movs	r3, #49	@ 0x31
 8007a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	e6ae      	b.n	8007806 <_dtoa_r+0x696>
 8007aa8:	9c07      	ldr	r4, [sp, #28]
 8007aaa:	9704      	str	r7, [sp, #16]
 8007aac:	4625      	mov	r5, r4
 8007aae:	e7f3      	b.n	8007a98 <_dtoa_r+0x928>
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8104 	beq.w	8007cc4 <_dtoa_r+0xb54>
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	dd05      	ble.n	8007acc <_dtoa_r+0x95c>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4632      	mov	r2, r6
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f000 fc25 	bl	8008314 <__lshift>
 8007aca:	4605      	mov	r5, r0
 8007acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d05a      	beq.n	8007b88 <_dtoa_r+0xa18>
 8007ad2:	6869      	ldr	r1, [r5, #4]
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fa0f 	bl	8007ef8 <_Balloc>
 8007ada:	4606      	mov	r6, r0
 8007adc:	b928      	cbnz	r0, 8007aea <_dtoa_r+0x97a>
 8007ade:	4b84      	ldr	r3, [pc, #528]	@ (8007cf0 <_dtoa_r+0xb80>)
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ae6:	f7ff bb5a 	b.w	800719e <_dtoa_r+0x2e>
 8007aea:	692a      	ldr	r2, [r5, #16]
 8007aec:	3202      	adds	r2, #2
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	f105 010c 	add.w	r1, r5, #12
 8007af4:	300c      	adds	r0, #12
 8007af6:	f001 f803 	bl	8008b00 <memcpy>
 8007afa:	2201      	movs	r2, #1
 8007afc:	4631      	mov	r1, r6
 8007afe:	4658      	mov	r0, fp
 8007b00:	f000 fc08 	bl	8008314 <__lshift>
 8007b04:	f10a 0301 	add.w	r3, sl, #1
 8007b08:	9307      	str	r3, [sp, #28]
 8007b0a:	9b00      	ldr	r3, [sp, #0]
 8007b0c:	4453      	add	r3, sl
 8007b0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	462f      	mov	r7, r5
 8007b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	4621      	mov	r1, r4
 8007b20:	3b01      	subs	r3, #1
 8007b22:	4648      	mov	r0, r9
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	f7ff fa9a 	bl	800705e <quorem>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b32:	4648      	mov	r0, r9
 8007b34:	f000 fc5a 	bl	80083ec <__mcmp>
 8007b38:	462a      	mov	r2, r5
 8007b3a:	9008      	str	r0, [sp, #32]
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f000 fc70 	bl	8008424 <__mdiff>
 8007b44:	68c2      	ldr	r2, [r0, #12]
 8007b46:	4606      	mov	r6, r0
 8007b48:	bb02      	cbnz	r2, 8007b8c <_dtoa_r+0xa1c>
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f000 fc4d 	bl	80083ec <__mcmp>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4631      	mov	r1, r6
 8007b56:	4658      	mov	r0, fp
 8007b58:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b5a:	f000 fa0d 	bl	8007f78 <_Bfree>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b62:	9e07      	ldr	r6, [sp, #28]
 8007b64:	ea43 0102 	orr.w	r1, r3, r2
 8007b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b6a:	4319      	orrs	r1, r3
 8007b6c:	d110      	bne.n	8007b90 <_dtoa_r+0xa20>
 8007b6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b72:	d029      	beq.n	8007bc8 <_dtoa_r+0xa58>
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dd02      	ble.n	8007b80 <_dtoa_r+0xa10>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b80:	9b00      	ldr	r3, [sp, #0]
 8007b82:	f883 8000 	strb.w	r8, [r3]
 8007b86:	e63f      	b.n	8007808 <_dtoa_r+0x698>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	e7bb      	b.n	8007b04 <_dtoa_r+0x994>
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	e7e1      	b.n	8007b54 <_dtoa_r+0x9e4>
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	db04      	blt.n	8007ba0 <_dtoa_r+0xa30>
 8007b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	d120      	bne.n	8007be2 <_dtoa_r+0xa72>
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	dded      	ble.n	8007b80 <_dtoa_r+0xa10>
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4658      	mov	r0, fp
 8007baa:	f000 fbb3 	bl	8008314 <__lshift>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	f000 fc1b 	bl	80083ec <__mcmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	dc03      	bgt.n	8007bc2 <_dtoa_r+0xa52>
 8007bba:	d1e1      	bne.n	8007b80 <_dtoa_r+0xa10>
 8007bbc:	f018 0f01 	tst.w	r8, #1
 8007bc0:	d0de      	beq.n	8007b80 <_dtoa_r+0xa10>
 8007bc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bc6:	d1d8      	bne.n	8007b7a <_dtoa_r+0xa0a>
 8007bc8:	9a00      	ldr	r2, [sp, #0]
 8007bca:	2339      	movs	r3, #57	@ 0x39
 8007bcc:	7013      	strb	r3, [r2, #0]
 8007bce:	4633      	mov	r3, r6
 8007bd0:	461e      	mov	r6, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007bd8:	2a39      	cmp	r2, #57	@ 0x39
 8007bda:	d052      	beq.n	8007c82 <_dtoa_r+0xb12>
 8007bdc:	3201      	adds	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e612      	b.n	8007808 <_dtoa_r+0x698>
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	dd07      	ble.n	8007bf6 <_dtoa_r+0xa86>
 8007be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bea:	d0ed      	beq.n	8007bc8 <_dtoa_r+0xa58>
 8007bec:	9a00      	ldr	r2, [sp, #0]
 8007bee:	f108 0301 	add.w	r3, r8, #1
 8007bf2:	7013      	strb	r3, [r2, #0]
 8007bf4:	e608      	b.n	8007808 <_dtoa_r+0x698>
 8007bf6:	9b07      	ldr	r3, [sp, #28]
 8007bf8:	9a07      	ldr	r2, [sp, #28]
 8007bfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d028      	beq.n	8007c56 <_dtoa_r+0xae6>
 8007c04:	4649      	mov	r1, r9
 8007c06:	2300      	movs	r3, #0
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 f9d6 	bl	8007fbc <__multadd>
 8007c10:	42af      	cmp	r7, r5
 8007c12:	4681      	mov	r9, r0
 8007c14:	f04f 0300 	mov.w	r3, #0
 8007c18:	f04f 020a 	mov.w	r2, #10
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4658      	mov	r0, fp
 8007c20:	d107      	bne.n	8007c32 <_dtoa_r+0xac2>
 8007c22:	f000 f9cb 	bl	8007fbc <__multadd>
 8007c26:	4607      	mov	r7, r0
 8007c28:	4605      	mov	r5, r0
 8007c2a:	9b07      	ldr	r3, [sp, #28]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	9307      	str	r3, [sp, #28]
 8007c30:	e774      	b.n	8007b1c <_dtoa_r+0x9ac>
 8007c32:	f000 f9c3 	bl	8007fbc <__multadd>
 8007c36:	4629      	mov	r1, r5
 8007c38:	4607      	mov	r7, r0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f000 f9bc 	bl	8007fbc <__multadd>
 8007c44:	4605      	mov	r5, r0
 8007c46:	e7f0      	b.n	8007c2a <_dtoa_r+0xaba>
 8007c48:	9b00      	ldr	r3, [sp, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfcc      	ite	gt
 8007c4e:	461e      	movgt	r6, r3
 8007c50:	2601      	movle	r6, #1
 8007c52:	4456      	add	r6, sl
 8007c54:	2700      	movs	r7, #0
 8007c56:	4649      	mov	r1, r9
 8007c58:	2201      	movs	r2, #1
 8007c5a:	4658      	mov	r0, fp
 8007c5c:	f000 fb5a 	bl	8008314 <__lshift>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4681      	mov	r9, r0
 8007c64:	f000 fbc2 	bl	80083ec <__mcmp>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	dcb0      	bgt.n	8007bce <_dtoa_r+0xa5e>
 8007c6c:	d102      	bne.n	8007c74 <_dtoa_r+0xb04>
 8007c6e:	f018 0f01 	tst.w	r8, #1
 8007c72:	d1ac      	bne.n	8007bce <_dtoa_r+0xa5e>
 8007c74:	4633      	mov	r3, r6
 8007c76:	461e      	mov	r6, r3
 8007c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c7c:	2a30      	cmp	r2, #48	@ 0x30
 8007c7e:	d0fa      	beq.n	8007c76 <_dtoa_r+0xb06>
 8007c80:	e5c2      	b.n	8007808 <_dtoa_r+0x698>
 8007c82:	459a      	cmp	sl, r3
 8007c84:	d1a4      	bne.n	8007bd0 <_dtoa_r+0xa60>
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	2331      	movs	r3, #49	@ 0x31
 8007c8e:	f88a 3000 	strb.w	r3, [sl]
 8007c92:	e5b9      	b.n	8007808 <_dtoa_r+0x698>
 8007c94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007cf4 <_dtoa_r+0xb84>
 8007c9a:	b11b      	cbz	r3, 8007ca4 <_dtoa_r+0xb34>
 8007c9c:	f10a 0308 	add.w	r3, sl, #8
 8007ca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	b019      	add	sp, #100	@ 0x64
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	f77f ae37 	ble.w	8007922 <_dtoa_r+0x7b2>
 8007cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e655      	b.n	8007968 <_dtoa_r+0x7f8>
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f77f aed6 	ble.w	8007a70 <_dtoa_r+0x900>
 8007cc4:	4656      	mov	r6, sl
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4648      	mov	r0, r9
 8007cca:	f7ff f9c8 	bl	800705e <quorem>
 8007cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cd2:	f806 8b01 	strb.w	r8, [r6], #1
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	eba6 020a 	sub.w	r2, r6, sl
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	ddb3      	ble.n	8007c48 <_dtoa_r+0xad8>
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 f968 	bl	8007fbc <__multadd>
 8007cec:	4681      	mov	r9, r0
 8007cee:	e7ea      	b.n	8007cc6 <_dtoa_r+0xb56>
 8007cf0:	08008e94 	.word	0x08008e94
 8007cf4:	08008e18 	.word	0x08008e18

08007cf8 <_free_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d041      	beq.n	8007d84 <_free_r+0x8c>
 8007d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d04:	1f0c      	subs	r4, r1, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfb8      	it	lt
 8007d0a:	18e4      	addlt	r4, r4, r3
 8007d0c:	f000 f8e8 	bl	8007ee0 <__malloc_lock>
 8007d10:	4a1d      	ldr	r2, [pc, #116]	@ (8007d88 <_free_r+0x90>)
 8007d12:	6813      	ldr	r3, [r2, #0]
 8007d14:	b933      	cbnz	r3, 8007d24 <_free_r+0x2c>
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	6014      	str	r4, [r2, #0]
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d20:	f000 b8e4 	b.w	8007eec <__malloc_unlock>
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	d908      	bls.n	8007d3a <_free_r+0x42>
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	1821      	adds	r1, r4, r0
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	bf01      	itttt	eq
 8007d30:	6819      	ldreq	r1, [r3, #0]
 8007d32:	685b      	ldreq	r3, [r3, #4]
 8007d34:	1809      	addeq	r1, r1, r0
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	e7ed      	b.n	8007d16 <_free_r+0x1e>
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	b10b      	cbz	r3, 8007d44 <_free_r+0x4c>
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d9fa      	bls.n	8007d3a <_free_r+0x42>
 8007d44:	6811      	ldr	r1, [r2, #0]
 8007d46:	1850      	adds	r0, r2, r1
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d10b      	bne.n	8007d64 <_free_r+0x6c>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	4401      	add	r1, r0
 8007d50:	1850      	adds	r0, r2, r1
 8007d52:	4283      	cmp	r3, r0
 8007d54:	6011      	str	r1, [r2, #0]
 8007d56:	d1e0      	bne.n	8007d1a <_free_r+0x22>
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6053      	str	r3, [r2, #4]
 8007d5e:	4408      	add	r0, r1
 8007d60:	6010      	str	r0, [r2, #0]
 8007d62:	e7da      	b.n	8007d1a <_free_r+0x22>
 8007d64:	d902      	bls.n	8007d6c <_free_r+0x74>
 8007d66:	230c      	movs	r3, #12
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	e7d6      	b.n	8007d1a <_free_r+0x22>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	1821      	adds	r1, r4, r0
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf04      	itt	eq
 8007d74:	6819      	ldreq	r1, [r3, #0]
 8007d76:	685b      	ldreq	r3, [r3, #4]
 8007d78:	6063      	str	r3, [r4, #4]
 8007d7a:	bf04      	itt	eq
 8007d7c:	1809      	addeq	r1, r1, r0
 8007d7e:	6021      	streq	r1, [r4, #0]
 8007d80:	6054      	str	r4, [r2, #4]
 8007d82:	e7ca      	b.n	8007d1a <_free_r+0x22>
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	200004b0 	.word	0x200004b0

08007d8c <malloc>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	@ (8007d98 <malloc+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f000 b825 	b.w	8007de0 <_malloc_r>
 8007d96:	bf00      	nop
 8007d98:	20000018 	.word	0x20000018

08007d9c <sbrk_aligned>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ddc <sbrk_aligned+0x40>)
 8007da0:	460c      	mov	r4, r1
 8007da2:	6831      	ldr	r1, [r6, #0]
 8007da4:	4605      	mov	r5, r0
 8007da6:	b911      	cbnz	r1, 8007dae <sbrk_aligned+0x12>
 8007da8:	f000 fe9a 	bl	8008ae0 <_sbrk_r>
 8007dac:	6030      	str	r0, [r6, #0]
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 fe95 	bl	8008ae0 <_sbrk_r>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d103      	bne.n	8007dc2 <sbrk_aligned+0x26>
 8007dba:	f04f 34ff 	mov.w	r4, #4294967295
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	bd70      	pop	{r4, r5, r6, pc}
 8007dc2:	1cc4      	adds	r4, r0, #3
 8007dc4:	f024 0403 	bic.w	r4, r4, #3
 8007dc8:	42a0      	cmp	r0, r4
 8007dca:	d0f8      	beq.n	8007dbe <sbrk_aligned+0x22>
 8007dcc:	1a21      	subs	r1, r4, r0
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 fe86 	bl	8008ae0 <_sbrk_r>
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d1f2      	bne.n	8007dbe <sbrk_aligned+0x22>
 8007dd8:	e7ef      	b.n	8007dba <sbrk_aligned+0x1e>
 8007dda:	bf00      	nop
 8007ddc:	200004ac 	.word	0x200004ac

08007de0 <_malloc_r>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	1ccd      	adds	r5, r1, #3
 8007de6:	f025 0503 	bic.w	r5, r5, #3
 8007dea:	3508      	adds	r5, #8
 8007dec:	2d0c      	cmp	r5, #12
 8007dee:	bf38      	it	cc
 8007df0:	250c      	movcc	r5, #12
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	4606      	mov	r6, r0
 8007df6:	db01      	blt.n	8007dfc <_malloc_r+0x1c>
 8007df8:	42a9      	cmp	r1, r5
 8007dfa:	d904      	bls.n	8007e06 <_malloc_r+0x26>
 8007dfc:	230c      	movs	r3, #12
 8007dfe:	6033      	str	r3, [r6, #0]
 8007e00:	2000      	movs	r0, #0
 8007e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007edc <_malloc_r+0xfc>
 8007e0a:	f000 f869 	bl	8007ee0 <__malloc_lock>
 8007e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e12:	461c      	mov	r4, r3
 8007e14:	bb44      	cbnz	r4, 8007e68 <_malloc_r+0x88>
 8007e16:	4629      	mov	r1, r5
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff ffbf 	bl	8007d9c <sbrk_aligned>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	4604      	mov	r4, r0
 8007e22:	d158      	bne.n	8007ed6 <_malloc_r+0xf6>
 8007e24:	f8d8 4000 	ldr.w	r4, [r8]
 8007e28:	4627      	mov	r7, r4
 8007e2a:	2f00      	cmp	r7, #0
 8007e2c:	d143      	bne.n	8007eb6 <_malloc_r+0xd6>
 8007e2e:	2c00      	cmp	r4, #0
 8007e30:	d04b      	beq.n	8007eca <_malloc_r+0xea>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	4639      	mov	r1, r7
 8007e36:	4630      	mov	r0, r6
 8007e38:	eb04 0903 	add.w	r9, r4, r3
 8007e3c:	f000 fe50 	bl	8008ae0 <_sbrk_r>
 8007e40:	4581      	cmp	r9, r0
 8007e42:	d142      	bne.n	8007eca <_malloc_r+0xea>
 8007e44:	6821      	ldr	r1, [r4, #0]
 8007e46:	1a6d      	subs	r5, r5, r1
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ffa6 	bl	8007d9c <sbrk_aligned>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d03a      	beq.n	8007eca <_malloc_r+0xea>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	442b      	add	r3, r5
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	bb62      	cbnz	r2, 8007ebc <_malloc_r+0xdc>
 8007e62:	f8c8 7000 	str.w	r7, [r8]
 8007e66:	e00f      	b.n	8007e88 <_malloc_r+0xa8>
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	1b52      	subs	r2, r2, r5
 8007e6c:	d420      	bmi.n	8007eb0 <_malloc_r+0xd0>
 8007e6e:	2a0b      	cmp	r2, #11
 8007e70:	d917      	bls.n	8007ea2 <_malloc_r+0xc2>
 8007e72:	1961      	adds	r1, r4, r5
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	6025      	str	r5, [r4, #0]
 8007e78:	bf18      	it	ne
 8007e7a:	6059      	strne	r1, [r3, #4]
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	bf08      	it	eq
 8007e80:	f8c8 1000 	streq.w	r1, [r8]
 8007e84:	5162      	str	r2, [r4, r5]
 8007e86:	604b      	str	r3, [r1, #4]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 f82f 	bl	8007eec <__malloc_unlock>
 8007e8e:	f104 000b 	add.w	r0, r4, #11
 8007e92:	1d23      	adds	r3, r4, #4
 8007e94:	f020 0007 	bic.w	r0, r0, #7
 8007e98:	1ac2      	subs	r2, r0, r3
 8007e9a:	bf1c      	itt	ne
 8007e9c:	1a1b      	subne	r3, r3, r0
 8007e9e:	50a3      	strne	r3, [r4, r2]
 8007ea0:	e7af      	b.n	8007e02 <_malloc_r+0x22>
 8007ea2:	6862      	ldr	r2, [r4, #4]
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	bf0c      	ite	eq
 8007ea8:	f8c8 2000 	streq.w	r2, [r8]
 8007eac:	605a      	strne	r2, [r3, #4]
 8007eae:	e7eb      	b.n	8007e88 <_malloc_r+0xa8>
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	6864      	ldr	r4, [r4, #4]
 8007eb4:	e7ae      	b.n	8007e14 <_malloc_r+0x34>
 8007eb6:	463c      	mov	r4, r7
 8007eb8:	687f      	ldr	r7, [r7, #4]
 8007eba:	e7b6      	b.n	8007e2a <_malloc_r+0x4a>
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d1fb      	bne.n	8007ebc <_malloc_r+0xdc>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6053      	str	r3, [r2, #4]
 8007ec8:	e7de      	b.n	8007e88 <_malloc_r+0xa8>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	6033      	str	r3, [r6, #0]
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f000 f80c 	bl	8007eec <__malloc_unlock>
 8007ed4:	e794      	b.n	8007e00 <_malloc_r+0x20>
 8007ed6:	6005      	str	r5, [r0, #0]
 8007ed8:	e7d6      	b.n	8007e88 <_malloc_r+0xa8>
 8007eda:	bf00      	nop
 8007edc:	200004b0 	.word	0x200004b0

08007ee0 <__malloc_lock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	@ (8007ee8 <__malloc_lock+0x8>)
 8007ee2:	f7ff b8ba 	b.w	800705a <__retarget_lock_acquire_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	200004a8 	.word	0x200004a8

08007eec <__malloc_unlock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	@ (8007ef4 <__malloc_unlock+0x8>)
 8007eee:	f7ff b8b5 	b.w	800705c <__retarget_lock_release_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200004a8 	.word	0x200004a8

08007ef8 <_Balloc>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	69c6      	ldr	r6, [r0, #28]
 8007efc:	4604      	mov	r4, r0
 8007efe:	460d      	mov	r5, r1
 8007f00:	b976      	cbnz	r6, 8007f20 <_Balloc+0x28>
 8007f02:	2010      	movs	r0, #16
 8007f04:	f7ff ff42 	bl	8007d8c <malloc>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	61e0      	str	r0, [r4, #28]
 8007f0c:	b920      	cbnz	r0, 8007f18 <_Balloc+0x20>
 8007f0e:	4b18      	ldr	r3, [pc, #96]	@ (8007f70 <_Balloc+0x78>)
 8007f10:	4818      	ldr	r0, [pc, #96]	@ (8007f74 <_Balloc+0x7c>)
 8007f12:	216b      	movs	r1, #107	@ 0x6b
 8007f14:	f000 fe02 	bl	8008b1c <__assert_func>
 8007f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f1c:	6006      	str	r6, [r0, #0]
 8007f1e:	60c6      	str	r6, [r0, #12]
 8007f20:	69e6      	ldr	r6, [r4, #28]
 8007f22:	68f3      	ldr	r3, [r6, #12]
 8007f24:	b183      	cbz	r3, 8007f48 <_Balloc+0x50>
 8007f26:	69e3      	ldr	r3, [r4, #28]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f2e:	b9b8      	cbnz	r0, 8007f60 <_Balloc+0x68>
 8007f30:	2101      	movs	r1, #1
 8007f32:	fa01 f605 	lsl.w	r6, r1, r5
 8007f36:	1d72      	adds	r2, r6, #5
 8007f38:	0092      	lsls	r2, r2, #2
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fe0c 	bl	8008b58 <_calloc_r>
 8007f40:	b160      	cbz	r0, 8007f5c <_Balloc+0x64>
 8007f42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f46:	e00e      	b.n	8007f66 <_Balloc+0x6e>
 8007f48:	2221      	movs	r2, #33	@ 0x21
 8007f4a:	2104      	movs	r1, #4
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fe03 	bl	8008b58 <_calloc_r>
 8007f52:	69e3      	ldr	r3, [r4, #28]
 8007f54:	60f0      	str	r0, [r6, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e4      	bne.n	8007f26 <_Balloc+0x2e>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	6802      	ldr	r2, [r0, #0]
 8007f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f66:	2300      	movs	r3, #0
 8007f68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f6c:	e7f7      	b.n	8007f5e <_Balloc+0x66>
 8007f6e:	bf00      	nop
 8007f70:	08008e25 	.word	0x08008e25
 8007f74:	08008ea5 	.word	0x08008ea5

08007f78 <_Bfree>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	69c6      	ldr	r6, [r0, #28]
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b976      	cbnz	r6, 8007fa0 <_Bfree+0x28>
 8007f82:	2010      	movs	r0, #16
 8007f84:	f7ff ff02 	bl	8007d8c <malloc>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	61e8      	str	r0, [r5, #28]
 8007f8c:	b920      	cbnz	r0, 8007f98 <_Bfree+0x20>
 8007f8e:	4b09      	ldr	r3, [pc, #36]	@ (8007fb4 <_Bfree+0x3c>)
 8007f90:	4809      	ldr	r0, [pc, #36]	@ (8007fb8 <_Bfree+0x40>)
 8007f92:	218f      	movs	r1, #143	@ 0x8f
 8007f94:	f000 fdc2 	bl	8008b1c <__assert_func>
 8007f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f9c:	6006      	str	r6, [r0, #0]
 8007f9e:	60c6      	str	r6, [r0, #12]
 8007fa0:	b13c      	cbz	r4, 8007fb2 <_Bfree+0x3a>
 8007fa2:	69eb      	ldr	r3, [r5, #28]
 8007fa4:	6862      	ldr	r2, [r4, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fac:	6021      	str	r1, [r4, #0]
 8007fae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	08008e25 	.word	0x08008e25
 8007fb8:	08008ea5 	.word	0x08008ea5

08007fbc <__multadd>:
 8007fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc0:	690d      	ldr	r5, [r1, #16]
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	f101 0c14 	add.w	ip, r1, #20
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f8dc 3000 	ldr.w	r3, [ip]
 8007fd2:	b299      	uxth	r1, r3
 8007fd4:	fb02 6101 	mla	r1, r2, r1, r6
 8007fd8:	0c1e      	lsrs	r6, r3, #16
 8007fda:	0c0b      	lsrs	r3, r1, #16
 8007fdc:	fb02 3306 	mla	r3, r2, r6, r3
 8007fe0:	b289      	uxth	r1, r1
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fe8:	4285      	cmp	r5, r0
 8007fea:	f84c 1b04 	str.w	r1, [ip], #4
 8007fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ff2:	dcec      	bgt.n	8007fce <__multadd+0x12>
 8007ff4:	b30e      	cbz	r6, 800803a <__multadd+0x7e>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dc19      	bgt.n	8008030 <__multadd+0x74>
 8007ffc:	6861      	ldr	r1, [r4, #4]
 8007ffe:	4638      	mov	r0, r7
 8008000:	3101      	adds	r1, #1
 8008002:	f7ff ff79 	bl	8007ef8 <_Balloc>
 8008006:	4680      	mov	r8, r0
 8008008:	b928      	cbnz	r0, 8008016 <__multadd+0x5a>
 800800a:	4602      	mov	r2, r0
 800800c:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <__multadd+0x84>)
 800800e:	480d      	ldr	r0, [pc, #52]	@ (8008044 <__multadd+0x88>)
 8008010:	21ba      	movs	r1, #186	@ 0xba
 8008012:	f000 fd83 	bl	8008b1c <__assert_func>
 8008016:	6922      	ldr	r2, [r4, #16]
 8008018:	3202      	adds	r2, #2
 800801a:	f104 010c 	add.w	r1, r4, #12
 800801e:	0092      	lsls	r2, r2, #2
 8008020:	300c      	adds	r0, #12
 8008022:	f000 fd6d 	bl	8008b00 <memcpy>
 8008026:	4621      	mov	r1, r4
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ffa5 	bl	8007f78 <_Bfree>
 800802e:	4644      	mov	r4, r8
 8008030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008034:	3501      	adds	r5, #1
 8008036:	615e      	str	r6, [r3, #20]
 8008038:	6125      	str	r5, [r4, #16]
 800803a:	4620      	mov	r0, r4
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008040:	08008e94 	.word	0x08008e94
 8008044:	08008ea5 	.word	0x08008ea5

08008048 <__hi0bits>:
 8008048:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800804c:	4603      	mov	r3, r0
 800804e:	bf36      	itet	cc
 8008050:	0403      	lslcc	r3, r0, #16
 8008052:	2000      	movcs	r0, #0
 8008054:	2010      	movcc	r0, #16
 8008056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800805a:	bf3c      	itt	cc
 800805c:	021b      	lslcc	r3, r3, #8
 800805e:	3008      	addcc	r0, #8
 8008060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008064:	bf3c      	itt	cc
 8008066:	011b      	lslcc	r3, r3, #4
 8008068:	3004      	addcc	r0, #4
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806e:	bf3c      	itt	cc
 8008070:	009b      	lslcc	r3, r3, #2
 8008072:	3002      	addcc	r0, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	db05      	blt.n	8008084 <__hi0bits+0x3c>
 8008078:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800807c:	f100 0001 	add.w	r0, r0, #1
 8008080:	bf08      	it	eq
 8008082:	2020      	moveq	r0, #32
 8008084:	4770      	bx	lr

08008086 <__lo0bits>:
 8008086:	6803      	ldr	r3, [r0, #0]
 8008088:	4602      	mov	r2, r0
 800808a:	f013 0007 	ands.w	r0, r3, #7
 800808e:	d00b      	beq.n	80080a8 <__lo0bits+0x22>
 8008090:	07d9      	lsls	r1, r3, #31
 8008092:	d421      	bmi.n	80080d8 <__lo0bits+0x52>
 8008094:	0798      	lsls	r0, r3, #30
 8008096:	bf49      	itett	mi
 8008098:	085b      	lsrmi	r3, r3, #1
 800809a:	089b      	lsrpl	r3, r3, #2
 800809c:	2001      	movmi	r0, #1
 800809e:	6013      	strmi	r3, [r2, #0]
 80080a0:	bf5c      	itt	pl
 80080a2:	6013      	strpl	r3, [r2, #0]
 80080a4:	2002      	movpl	r0, #2
 80080a6:	4770      	bx	lr
 80080a8:	b299      	uxth	r1, r3
 80080aa:	b909      	cbnz	r1, 80080b0 <__lo0bits+0x2a>
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	2010      	movs	r0, #16
 80080b0:	b2d9      	uxtb	r1, r3
 80080b2:	b909      	cbnz	r1, 80080b8 <__lo0bits+0x32>
 80080b4:	3008      	adds	r0, #8
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	0719      	lsls	r1, r3, #28
 80080ba:	bf04      	itt	eq
 80080bc:	091b      	lsreq	r3, r3, #4
 80080be:	3004      	addeq	r0, #4
 80080c0:	0799      	lsls	r1, r3, #30
 80080c2:	bf04      	itt	eq
 80080c4:	089b      	lsreq	r3, r3, #2
 80080c6:	3002      	addeq	r0, #2
 80080c8:	07d9      	lsls	r1, r3, #31
 80080ca:	d403      	bmi.n	80080d4 <__lo0bits+0x4e>
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	f100 0001 	add.w	r0, r0, #1
 80080d2:	d003      	beq.n	80080dc <__lo0bits+0x56>
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	4770      	bx	lr
 80080d8:	2000      	movs	r0, #0
 80080da:	4770      	bx	lr
 80080dc:	2020      	movs	r0, #32
 80080de:	4770      	bx	lr

080080e0 <__i2b>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	2101      	movs	r1, #1
 80080e6:	f7ff ff07 	bl	8007ef8 <_Balloc>
 80080ea:	4602      	mov	r2, r0
 80080ec:	b928      	cbnz	r0, 80080fa <__i2b+0x1a>
 80080ee:	4b05      	ldr	r3, [pc, #20]	@ (8008104 <__i2b+0x24>)
 80080f0:	4805      	ldr	r0, [pc, #20]	@ (8008108 <__i2b+0x28>)
 80080f2:	f240 1145 	movw	r1, #325	@ 0x145
 80080f6:	f000 fd11 	bl	8008b1c <__assert_func>
 80080fa:	2301      	movs	r3, #1
 80080fc:	6144      	str	r4, [r0, #20]
 80080fe:	6103      	str	r3, [r0, #16]
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	08008e94 	.word	0x08008e94
 8008108:	08008ea5 	.word	0x08008ea5

0800810c <__multiply>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4614      	mov	r4, r2
 8008112:	690a      	ldr	r2, [r1, #16]
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	429a      	cmp	r2, r3
 8008118:	bfa8      	it	ge
 800811a:	4623      	movge	r3, r4
 800811c:	460f      	mov	r7, r1
 800811e:	bfa4      	itt	ge
 8008120:	460c      	movge	r4, r1
 8008122:	461f      	movge	r7, r3
 8008124:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008128:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800812c:	68a3      	ldr	r3, [r4, #8]
 800812e:	6861      	ldr	r1, [r4, #4]
 8008130:	eb0a 0609 	add.w	r6, sl, r9
 8008134:	42b3      	cmp	r3, r6
 8008136:	b085      	sub	sp, #20
 8008138:	bfb8      	it	lt
 800813a:	3101      	addlt	r1, #1
 800813c:	f7ff fedc 	bl	8007ef8 <_Balloc>
 8008140:	b930      	cbnz	r0, 8008150 <__multiply+0x44>
 8008142:	4602      	mov	r2, r0
 8008144:	4b44      	ldr	r3, [pc, #272]	@ (8008258 <__multiply+0x14c>)
 8008146:	4845      	ldr	r0, [pc, #276]	@ (800825c <__multiply+0x150>)
 8008148:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800814c:	f000 fce6 	bl	8008b1c <__assert_func>
 8008150:	f100 0514 	add.w	r5, r0, #20
 8008154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008158:	462b      	mov	r3, r5
 800815a:	2200      	movs	r2, #0
 800815c:	4543      	cmp	r3, r8
 800815e:	d321      	bcc.n	80081a4 <__multiply+0x98>
 8008160:	f107 0114 	add.w	r1, r7, #20
 8008164:	f104 0214 	add.w	r2, r4, #20
 8008168:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800816c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	1b13      	subs	r3, r2, r4
 8008174:	3b15      	subs	r3, #21
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	3304      	adds	r3, #4
 800817c:	f104 0715 	add.w	r7, r4, #21
 8008180:	42ba      	cmp	r2, r7
 8008182:	bf38      	it	cc
 8008184:	2304      	movcc	r3, #4
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	9103      	str	r1, [sp, #12]
 800818c:	428b      	cmp	r3, r1
 800818e:	d80c      	bhi.n	80081aa <__multiply+0x9e>
 8008190:	2e00      	cmp	r6, #0
 8008192:	dd03      	ble.n	800819c <__multiply+0x90>
 8008194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008198:	2b00      	cmp	r3, #0
 800819a:	d05b      	beq.n	8008254 <__multiply+0x148>
 800819c:	6106      	str	r6, [r0, #16]
 800819e:	b005      	add	sp, #20
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	f843 2b04 	str.w	r2, [r3], #4
 80081a8:	e7d8      	b.n	800815c <__multiply+0x50>
 80081aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80081ae:	f1ba 0f00 	cmp.w	sl, #0
 80081b2:	d024      	beq.n	80081fe <__multiply+0xf2>
 80081b4:	f104 0e14 	add.w	lr, r4, #20
 80081b8:	46a9      	mov	r9, r5
 80081ba:	f04f 0c00 	mov.w	ip, #0
 80081be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081c2:	f8d9 3000 	ldr.w	r3, [r9]
 80081c6:	fa1f fb87 	uxth.w	fp, r7
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80081d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80081d4:	f8d9 7000 	ldr.w	r7, [r9]
 80081d8:	4463      	add	r3, ip
 80081da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081de:	fb0a c70b 	mla	r7, sl, fp, ip
 80081e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081ec:	4572      	cmp	r2, lr
 80081ee:	f849 3b04 	str.w	r3, [r9], #4
 80081f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081f6:	d8e2      	bhi.n	80081be <__multiply+0xb2>
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	f845 c003 	str.w	ip, [r5, r3]
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008204:	3104      	adds	r1, #4
 8008206:	f1b9 0f00 	cmp.w	r9, #0
 800820a:	d021      	beq.n	8008250 <__multiply+0x144>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	f104 0c14 	add.w	ip, r4, #20
 8008212:	46ae      	mov	lr, r5
 8008214:	f04f 0a00 	mov.w	sl, #0
 8008218:	f8bc b000 	ldrh.w	fp, [ip]
 800821c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008220:	fb09 770b 	mla	r7, r9, fp, r7
 8008224:	4457      	add	r7, sl
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800822c:	f84e 3b04 	str.w	r3, [lr], #4
 8008230:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008234:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008238:	f8be 3000 	ldrh.w	r3, [lr]
 800823c:	fb09 330a 	mla	r3, r9, sl, r3
 8008240:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008244:	4562      	cmp	r2, ip
 8008246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800824a:	d8e5      	bhi.n	8008218 <__multiply+0x10c>
 800824c:	9f01      	ldr	r7, [sp, #4]
 800824e:	51eb      	str	r3, [r5, r7]
 8008250:	3504      	adds	r5, #4
 8008252:	e799      	b.n	8008188 <__multiply+0x7c>
 8008254:	3e01      	subs	r6, #1
 8008256:	e79b      	b.n	8008190 <__multiply+0x84>
 8008258:	08008e94 	.word	0x08008e94
 800825c:	08008ea5 	.word	0x08008ea5

08008260 <__pow5mult>:
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4615      	mov	r5, r2
 8008266:	f012 0203 	ands.w	r2, r2, #3
 800826a:	4607      	mov	r7, r0
 800826c:	460e      	mov	r6, r1
 800826e:	d007      	beq.n	8008280 <__pow5mult+0x20>
 8008270:	4c25      	ldr	r4, [pc, #148]	@ (8008308 <__pow5mult+0xa8>)
 8008272:	3a01      	subs	r2, #1
 8008274:	2300      	movs	r3, #0
 8008276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800827a:	f7ff fe9f 	bl	8007fbc <__multadd>
 800827e:	4606      	mov	r6, r0
 8008280:	10ad      	asrs	r5, r5, #2
 8008282:	d03d      	beq.n	8008300 <__pow5mult+0xa0>
 8008284:	69fc      	ldr	r4, [r7, #28]
 8008286:	b97c      	cbnz	r4, 80082a8 <__pow5mult+0x48>
 8008288:	2010      	movs	r0, #16
 800828a:	f7ff fd7f 	bl	8007d8c <malloc>
 800828e:	4602      	mov	r2, r0
 8008290:	61f8      	str	r0, [r7, #28]
 8008292:	b928      	cbnz	r0, 80082a0 <__pow5mult+0x40>
 8008294:	4b1d      	ldr	r3, [pc, #116]	@ (800830c <__pow5mult+0xac>)
 8008296:	481e      	ldr	r0, [pc, #120]	@ (8008310 <__pow5mult+0xb0>)
 8008298:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800829c:	f000 fc3e 	bl	8008b1c <__assert_func>
 80082a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a4:	6004      	str	r4, [r0, #0]
 80082a6:	60c4      	str	r4, [r0, #12]
 80082a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082b0:	b94c      	cbnz	r4, 80082c6 <__pow5mult+0x66>
 80082b2:	f240 2171 	movw	r1, #625	@ 0x271
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ff12 	bl	80080e0 <__i2b>
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c2:	4604      	mov	r4, r0
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	f04f 0900 	mov.w	r9, #0
 80082ca:	07eb      	lsls	r3, r5, #31
 80082cc:	d50a      	bpl.n	80082e4 <__pow5mult+0x84>
 80082ce:	4631      	mov	r1, r6
 80082d0:	4622      	mov	r2, r4
 80082d2:	4638      	mov	r0, r7
 80082d4:	f7ff ff1a 	bl	800810c <__multiply>
 80082d8:	4631      	mov	r1, r6
 80082da:	4680      	mov	r8, r0
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff fe4b 	bl	8007f78 <_Bfree>
 80082e2:	4646      	mov	r6, r8
 80082e4:	106d      	asrs	r5, r5, #1
 80082e6:	d00b      	beq.n	8008300 <__pow5mult+0xa0>
 80082e8:	6820      	ldr	r0, [r4, #0]
 80082ea:	b938      	cbnz	r0, 80082fc <__pow5mult+0x9c>
 80082ec:	4622      	mov	r2, r4
 80082ee:	4621      	mov	r1, r4
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ff0b 	bl	800810c <__multiply>
 80082f6:	6020      	str	r0, [r4, #0]
 80082f8:	f8c0 9000 	str.w	r9, [r0]
 80082fc:	4604      	mov	r4, r0
 80082fe:	e7e4      	b.n	80082ca <__pow5mult+0x6a>
 8008300:	4630      	mov	r0, r6
 8008302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008306:	bf00      	nop
 8008308:	08008f00 	.word	0x08008f00
 800830c:	08008e25 	.word	0x08008e25
 8008310:	08008ea5 	.word	0x08008ea5

08008314 <__lshift>:
 8008314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	6849      	ldr	r1, [r1, #4]
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	4607      	mov	r7, r0
 8008326:	4691      	mov	r9, r2
 8008328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800832c:	f108 0601 	add.w	r6, r8, #1
 8008330:	42b3      	cmp	r3, r6
 8008332:	db0b      	blt.n	800834c <__lshift+0x38>
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff fddf 	bl	8007ef8 <_Balloc>
 800833a:	4605      	mov	r5, r0
 800833c:	b948      	cbnz	r0, 8008352 <__lshift+0x3e>
 800833e:	4602      	mov	r2, r0
 8008340:	4b28      	ldr	r3, [pc, #160]	@ (80083e4 <__lshift+0xd0>)
 8008342:	4829      	ldr	r0, [pc, #164]	@ (80083e8 <__lshift+0xd4>)
 8008344:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008348:	f000 fbe8 	bl	8008b1c <__assert_func>
 800834c:	3101      	adds	r1, #1
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	e7ee      	b.n	8008330 <__lshift+0x1c>
 8008352:	2300      	movs	r3, #0
 8008354:	f100 0114 	add.w	r1, r0, #20
 8008358:	f100 0210 	add.w	r2, r0, #16
 800835c:	4618      	mov	r0, r3
 800835e:	4553      	cmp	r3, sl
 8008360:	db33      	blt.n	80083ca <__lshift+0xb6>
 8008362:	6920      	ldr	r0, [r4, #16]
 8008364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008368:	f104 0314 	add.w	r3, r4, #20
 800836c:	f019 091f 	ands.w	r9, r9, #31
 8008370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008374:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008378:	d02b      	beq.n	80083d2 <__lshift+0xbe>
 800837a:	f1c9 0e20 	rsb	lr, r9, #32
 800837e:	468a      	mov	sl, r1
 8008380:	2200      	movs	r2, #0
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	fa00 f009 	lsl.w	r0, r0, r9
 8008388:	4310      	orrs	r0, r2
 800838a:	f84a 0b04 	str.w	r0, [sl], #4
 800838e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008392:	459c      	cmp	ip, r3
 8008394:	fa22 f20e 	lsr.w	r2, r2, lr
 8008398:	d8f3      	bhi.n	8008382 <__lshift+0x6e>
 800839a:	ebac 0304 	sub.w	r3, ip, r4
 800839e:	3b15      	subs	r3, #21
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	3304      	adds	r3, #4
 80083a6:	f104 0015 	add.w	r0, r4, #21
 80083aa:	4584      	cmp	ip, r0
 80083ac:	bf38      	it	cc
 80083ae:	2304      	movcc	r3, #4
 80083b0:	50ca      	str	r2, [r1, r3]
 80083b2:	b10a      	cbz	r2, 80083b8 <__lshift+0xa4>
 80083b4:	f108 0602 	add.w	r6, r8, #2
 80083b8:	3e01      	subs	r6, #1
 80083ba:	4638      	mov	r0, r7
 80083bc:	612e      	str	r6, [r5, #16]
 80083be:	4621      	mov	r1, r4
 80083c0:	f7ff fdda 	bl	8007f78 <_Bfree>
 80083c4:	4628      	mov	r0, r5
 80083c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ce:	3301      	adds	r3, #1
 80083d0:	e7c5      	b.n	800835e <__lshift+0x4a>
 80083d2:	3904      	subs	r1, #4
 80083d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083dc:	459c      	cmp	ip, r3
 80083de:	d8f9      	bhi.n	80083d4 <__lshift+0xc0>
 80083e0:	e7ea      	b.n	80083b8 <__lshift+0xa4>
 80083e2:	bf00      	nop
 80083e4:	08008e94 	.word	0x08008e94
 80083e8:	08008ea5 	.word	0x08008ea5

080083ec <__mcmp>:
 80083ec:	690a      	ldr	r2, [r1, #16]
 80083ee:	4603      	mov	r3, r0
 80083f0:	6900      	ldr	r0, [r0, #16]
 80083f2:	1a80      	subs	r0, r0, r2
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	d10e      	bne.n	8008416 <__mcmp+0x2a>
 80083f8:	3314      	adds	r3, #20
 80083fa:	3114      	adds	r1, #20
 80083fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008400:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008404:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800840c:	4295      	cmp	r5, r2
 800840e:	d003      	beq.n	8008418 <__mcmp+0x2c>
 8008410:	d205      	bcs.n	800841e <__mcmp+0x32>
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	bd30      	pop	{r4, r5, pc}
 8008418:	42a3      	cmp	r3, r4
 800841a:	d3f3      	bcc.n	8008404 <__mcmp+0x18>
 800841c:	e7fb      	b.n	8008416 <__mcmp+0x2a>
 800841e:	2001      	movs	r0, #1
 8008420:	e7f9      	b.n	8008416 <__mcmp+0x2a>
	...

08008424 <__mdiff>:
 8008424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	4689      	mov	r9, r1
 800842a:	4606      	mov	r6, r0
 800842c:	4611      	mov	r1, r2
 800842e:	4648      	mov	r0, r9
 8008430:	4614      	mov	r4, r2
 8008432:	f7ff ffdb 	bl	80083ec <__mcmp>
 8008436:	1e05      	subs	r5, r0, #0
 8008438:	d112      	bne.n	8008460 <__mdiff+0x3c>
 800843a:	4629      	mov	r1, r5
 800843c:	4630      	mov	r0, r6
 800843e:	f7ff fd5b 	bl	8007ef8 <_Balloc>
 8008442:	4602      	mov	r2, r0
 8008444:	b928      	cbnz	r0, 8008452 <__mdiff+0x2e>
 8008446:	4b3f      	ldr	r3, [pc, #252]	@ (8008544 <__mdiff+0x120>)
 8008448:	f240 2137 	movw	r1, #567	@ 0x237
 800844c:	483e      	ldr	r0, [pc, #248]	@ (8008548 <__mdiff+0x124>)
 800844e:	f000 fb65 	bl	8008b1c <__assert_func>
 8008452:	2301      	movs	r3, #1
 8008454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008458:	4610      	mov	r0, r2
 800845a:	b003      	add	sp, #12
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	bfbc      	itt	lt
 8008462:	464b      	movlt	r3, r9
 8008464:	46a1      	movlt	r9, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800846c:	bfba      	itte	lt
 800846e:	461c      	movlt	r4, r3
 8008470:	2501      	movlt	r5, #1
 8008472:	2500      	movge	r5, #0
 8008474:	f7ff fd40 	bl	8007ef8 <_Balloc>
 8008478:	4602      	mov	r2, r0
 800847a:	b918      	cbnz	r0, 8008484 <__mdiff+0x60>
 800847c:	4b31      	ldr	r3, [pc, #196]	@ (8008544 <__mdiff+0x120>)
 800847e:	f240 2145 	movw	r1, #581	@ 0x245
 8008482:	e7e3      	b.n	800844c <__mdiff+0x28>
 8008484:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008488:	6926      	ldr	r6, [r4, #16]
 800848a:	60c5      	str	r5, [r0, #12]
 800848c:	f109 0310 	add.w	r3, r9, #16
 8008490:	f109 0514 	add.w	r5, r9, #20
 8008494:	f104 0e14 	add.w	lr, r4, #20
 8008498:	f100 0b14 	add.w	fp, r0, #20
 800849c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	46d9      	mov	r9, fp
 80084a8:	f04f 0c00 	mov.w	ip, #0
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	fa1f f38a 	uxth.w	r3, sl
 80084bc:	4619      	mov	r1, r3
 80084be:	b283      	uxth	r3, r0
 80084c0:	1acb      	subs	r3, r1, r3
 80084c2:	0c00      	lsrs	r0, r0, #16
 80084c4:	4463      	add	r3, ip
 80084c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084d4:	4576      	cmp	r6, lr
 80084d6:	f849 3b04 	str.w	r3, [r9], #4
 80084da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084de:	d8e5      	bhi.n	80084ac <__mdiff+0x88>
 80084e0:	1b33      	subs	r3, r6, r4
 80084e2:	3b15      	subs	r3, #21
 80084e4:	f023 0303 	bic.w	r3, r3, #3
 80084e8:	3415      	adds	r4, #21
 80084ea:	3304      	adds	r3, #4
 80084ec:	42a6      	cmp	r6, r4
 80084ee:	bf38      	it	cc
 80084f0:	2304      	movcc	r3, #4
 80084f2:	441d      	add	r5, r3
 80084f4:	445b      	add	r3, fp
 80084f6:	461e      	mov	r6, r3
 80084f8:	462c      	mov	r4, r5
 80084fa:	4544      	cmp	r4, r8
 80084fc:	d30e      	bcc.n	800851c <__mdiff+0xf8>
 80084fe:	f108 0103 	add.w	r1, r8, #3
 8008502:	1b49      	subs	r1, r1, r5
 8008504:	f021 0103 	bic.w	r1, r1, #3
 8008508:	3d03      	subs	r5, #3
 800850a:	45a8      	cmp	r8, r5
 800850c:	bf38      	it	cc
 800850e:	2100      	movcc	r1, #0
 8008510:	440b      	add	r3, r1
 8008512:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008516:	b191      	cbz	r1, 800853e <__mdiff+0x11a>
 8008518:	6117      	str	r7, [r2, #16]
 800851a:	e79d      	b.n	8008458 <__mdiff+0x34>
 800851c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008520:	46e6      	mov	lr, ip
 8008522:	0c08      	lsrs	r0, r1, #16
 8008524:	fa1c fc81 	uxtah	ip, ip, r1
 8008528:	4471      	add	r1, lr
 800852a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800852e:	b289      	uxth	r1, r1
 8008530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008534:	f846 1b04 	str.w	r1, [r6], #4
 8008538:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800853c:	e7dd      	b.n	80084fa <__mdiff+0xd6>
 800853e:	3f01      	subs	r7, #1
 8008540:	e7e7      	b.n	8008512 <__mdiff+0xee>
 8008542:	bf00      	nop
 8008544:	08008e94 	.word	0x08008e94
 8008548:	08008ea5 	.word	0x08008ea5

0800854c <__d2b>:
 800854c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008550:	460f      	mov	r7, r1
 8008552:	2101      	movs	r1, #1
 8008554:	ec59 8b10 	vmov	r8, r9, d0
 8008558:	4616      	mov	r6, r2
 800855a:	f7ff fccd 	bl	8007ef8 <_Balloc>
 800855e:	4604      	mov	r4, r0
 8008560:	b930      	cbnz	r0, 8008570 <__d2b+0x24>
 8008562:	4602      	mov	r2, r0
 8008564:	4b23      	ldr	r3, [pc, #140]	@ (80085f4 <__d2b+0xa8>)
 8008566:	4824      	ldr	r0, [pc, #144]	@ (80085f8 <__d2b+0xac>)
 8008568:	f240 310f 	movw	r1, #783	@ 0x30f
 800856c:	f000 fad6 	bl	8008b1c <__assert_func>
 8008570:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008574:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008578:	b10d      	cbz	r5, 800857e <__d2b+0x32>
 800857a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	f1b8 0300 	subs.w	r3, r8, #0
 8008584:	d023      	beq.n	80085ce <__d2b+0x82>
 8008586:	4668      	mov	r0, sp
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	f7ff fd7c 	bl	8008086 <__lo0bits>
 800858e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008592:	b1d0      	cbz	r0, 80085ca <__d2b+0x7e>
 8008594:	f1c0 0320 	rsb	r3, r0, #32
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	430b      	orrs	r3, r1
 800859e:	40c2      	lsrs	r2, r0
 80085a0:	6163      	str	r3, [r4, #20]
 80085a2:	9201      	str	r2, [sp, #4]
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	61a3      	str	r3, [r4, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf0c      	ite	eq
 80085ac:	2201      	moveq	r2, #1
 80085ae:	2202      	movne	r2, #2
 80085b0:	6122      	str	r2, [r4, #16]
 80085b2:	b1a5      	cbz	r5, 80085de <__d2b+0x92>
 80085b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085b8:	4405      	add	r5, r0
 80085ba:	603d      	str	r5, [r7, #0]
 80085bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085c0:	6030      	str	r0, [r6, #0]
 80085c2:	4620      	mov	r0, r4
 80085c4:	b003      	add	sp, #12
 80085c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ca:	6161      	str	r1, [r4, #20]
 80085cc:	e7ea      	b.n	80085a4 <__d2b+0x58>
 80085ce:	a801      	add	r0, sp, #4
 80085d0:	f7ff fd59 	bl	8008086 <__lo0bits>
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	6163      	str	r3, [r4, #20]
 80085d8:	3020      	adds	r0, #32
 80085da:	2201      	movs	r2, #1
 80085dc:	e7e8      	b.n	80085b0 <__d2b+0x64>
 80085de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085e6:	6038      	str	r0, [r7, #0]
 80085e8:	6918      	ldr	r0, [r3, #16]
 80085ea:	f7ff fd2d 	bl	8008048 <__hi0bits>
 80085ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085f2:	e7e5      	b.n	80085c0 <__d2b+0x74>
 80085f4:	08008e94 	.word	0x08008e94
 80085f8:	08008ea5 	.word	0x08008ea5

080085fc <__sfputc_r>:
 80085fc:	6893      	ldr	r3, [r2, #8]
 80085fe:	3b01      	subs	r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	b410      	push	{r4}
 8008604:	6093      	str	r3, [r2, #8]
 8008606:	da08      	bge.n	800861a <__sfputc_r+0x1e>
 8008608:	6994      	ldr	r4, [r2, #24]
 800860a:	42a3      	cmp	r3, r4
 800860c:	db01      	blt.n	8008612 <__sfputc_r+0x16>
 800860e:	290a      	cmp	r1, #10
 8008610:	d103      	bne.n	800861a <__sfputc_r+0x1e>
 8008612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008616:	f7fe bc0e 	b.w	8006e36 <__swbuf_r>
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	1c58      	adds	r0, r3, #1
 800861e:	6010      	str	r0, [r2, #0]
 8008620:	7019      	strb	r1, [r3, #0]
 8008622:	4608      	mov	r0, r1
 8008624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008628:	4770      	bx	lr

0800862a <__sfputs_r>:
 800862a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	4614      	mov	r4, r2
 8008632:	18d5      	adds	r5, r2, r3
 8008634:	42ac      	cmp	r4, r5
 8008636:	d101      	bne.n	800863c <__sfputs_r+0x12>
 8008638:	2000      	movs	r0, #0
 800863a:	e007      	b.n	800864c <__sfputs_r+0x22>
 800863c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008640:	463a      	mov	r2, r7
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ffda 	bl	80085fc <__sfputc_r>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d1f3      	bne.n	8008634 <__sfputs_r+0xa>
 800864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008650 <_vfiprintf_r>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	460d      	mov	r5, r1
 8008656:	b09d      	sub	sp, #116	@ 0x74
 8008658:	4614      	mov	r4, r2
 800865a:	4698      	mov	r8, r3
 800865c:	4606      	mov	r6, r0
 800865e:	b118      	cbz	r0, 8008668 <_vfiprintf_r+0x18>
 8008660:	6a03      	ldr	r3, [r0, #32]
 8008662:	b90b      	cbnz	r3, 8008668 <_vfiprintf_r+0x18>
 8008664:	f7fe fafe 	bl	8006c64 <__sinit>
 8008668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	d405      	bmi.n	800867a <_vfiprintf_r+0x2a>
 800866e:	89ab      	ldrh	r3, [r5, #12]
 8008670:	059a      	lsls	r2, r3, #22
 8008672:	d402      	bmi.n	800867a <_vfiprintf_r+0x2a>
 8008674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008676:	f7fe fcf0 	bl	800705a <__retarget_lock_acquire_recursive>
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	071b      	lsls	r3, r3, #28
 800867e:	d501      	bpl.n	8008684 <_vfiprintf_r+0x34>
 8008680:	692b      	ldr	r3, [r5, #16]
 8008682:	b99b      	cbnz	r3, 80086ac <_vfiprintf_r+0x5c>
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f7fe fc14 	bl	8006eb4 <__swsetup_r>
 800868c:	b170      	cbz	r0, 80086ac <_vfiprintf_r+0x5c>
 800868e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008690:	07dc      	lsls	r4, r3, #31
 8008692:	d504      	bpl.n	800869e <_vfiprintf_r+0x4e>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	b01d      	add	sp, #116	@ 0x74
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	0598      	lsls	r0, r3, #22
 80086a2:	d4f7      	bmi.n	8008694 <_vfiprintf_r+0x44>
 80086a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086a6:	f7fe fcd9 	bl	800705c <__retarget_lock_release_recursive>
 80086aa:	e7f3      	b.n	8008694 <_vfiprintf_r+0x44>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b0:	2320      	movs	r3, #32
 80086b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ba:	2330      	movs	r3, #48	@ 0x30
 80086bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800886c <_vfiprintf_r+0x21c>
 80086c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086c4:	f04f 0901 	mov.w	r9, #1
 80086c8:	4623      	mov	r3, r4
 80086ca:	469a      	mov	sl, r3
 80086cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d0:	b10a      	cbz	r2, 80086d6 <_vfiprintf_r+0x86>
 80086d2:	2a25      	cmp	r2, #37	@ 0x25
 80086d4:	d1f9      	bne.n	80086ca <_vfiprintf_r+0x7a>
 80086d6:	ebba 0b04 	subs.w	fp, sl, r4
 80086da:	d00b      	beq.n	80086f4 <_vfiprintf_r+0xa4>
 80086dc:	465b      	mov	r3, fp
 80086de:	4622      	mov	r2, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ffa1 	bl	800862a <__sfputs_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	f000 80a7 	beq.w	800883c <_vfiprintf_r+0x1ec>
 80086ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f0:	445a      	add	r2, fp
 80086f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086f4:	f89a 3000 	ldrb.w	r3, [sl]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 809f 	beq.w	800883c <_vfiprintf_r+0x1ec>
 80086fe:	2300      	movs	r3, #0
 8008700:	f04f 32ff 	mov.w	r2, #4294967295
 8008704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008708:	f10a 0a01 	add.w	sl, sl, #1
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008714:	931a      	str	r3, [sp, #104]	@ 0x68
 8008716:	4654      	mov	r4, sl
 8008718:	2205      	movs	r2, #5
 800871a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871e:	4853      	ldr	r0, [pc, #332]	@ (800886c <_vfiprintf_r+0x21c>)
 8008720:	f7f7 fd76 	bl	8000210 <memchr>
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	b9d8      	cbnz	r0, 8008760 <_vfiprintf_r+0x110>
 8008728:	06d1      	lsls	r1, r2, #27
 800872a:	bf44      	itt	mi
 800872c:	2320      	movmi	r3, #32
 800872e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008732:	0713      	lsls	r3, r2, #28
 8008734:	bf44      	itt	mi
 8008736:	232b      	movmi	r3, #43	@ 0x2b
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800873c:	f89a 3000 	ldrb.w	r3, [sl]
 8008740:	2b2a      	cmp	r3, #42	@ 0x2a
 8008742:	d015      	beq.n	8008770 <_vfiprintf_r+0x120>
 8008744:	9a07      	ldr	r2, [sp, #28]
 8008746:	4654      	mov	r4, sl
 8008748:	2000      	movs	r0, #0
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	4621      	mov	r1, r4
 8008750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008754:	3b30      	subs	r3, #48	@ 0x30
 8008756:	2b09      	cmp	r3, #9
 8008758:	d94b      	bls.n	80087f2 <_vfiprintf_r+0x1a2>
 800875a:	b1b0      	cbz	r0, 800878a <_vfiprintf_r+0x13a>
 800875c:	9207      	str	r2, [sp, #28]
 800875e:	e014      	b.n	800878a <_vfiprintf_r+0x13a>
 8008760:	eba0 0308 	sub.w	r3, r0, r8
 8008764:	fa09 f303 	lsl.w	r3, r9, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	46a2      	mov	sl, r4
 800876e:	e7d2      	b.n	8008716 <_vfiprintf_r+0xc6>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d19      	adds	r1, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9103      	str	r1, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfbb      	ittet	lt
 800877c:	425b      	neglt	r3, r3
 800877e:	f042 0202 	orrlt.w	r2, r2, #2
 8008782:	9307      	strge	r3, [sp, #28]
 8008784:	9307      	strlt	r3, [sp, #28]
 8008786:	bfb8      	it	lt
 8008788:	9204      	strlt	r2, [sp, #16]
 800878a:	7823      	ldrb	r3, [r4, #0]
 800878c:	2b2e      	cmp	r3, #46	@ 0x2e
 800878e:	d10a      	bne.n	80087a6 <_vfiprintf_r+0x156>
 8008790:	7863      	ldrb	r3, [r4, #1]
 8008792:	2b2a      	cmp	r3, #42	@ 0x2a
 8008794:	d132      	bne.n	80087fc <_vfiprintf_r+0x1ac>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	1d1a      	adds	r2, r3, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	9203      	str	r2, [sp, #12]
 800879e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087a2:	3402      	adds	r4, #2
 80087a4:	9305      	str	r3, [sp, #20]
 80087a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800887c <_vfiprintf_r+0x22c>
 80087aa:	7821      	ldrb	r1, [r4, #0]
 80087ac:	2203      	movs	r2, #3
 80087ae:	4650      	mov	r0, sl
 80087b0:	f7f7 fd2e 	bl	8000210 <memchr>
 80087b4:	b138      	cbz	r0, 80087c6 <_vfiprintf_r+0x176>
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	eba0 000a 	sub.w	r0, r0, sl
 80087bc:	2240      	movs	r2, #64	@ 0x40
 80087be:	4082      	lsls	r2, r0
 80087c0:	4313      	orrs	r3, r2
 80087c2:	3401      	adds	r4, #1
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ca:	4829      	ldr	r0, [pc, #164]	@ (8008870 <_vfiprintf_r+0x220>)
 80087cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087d0:	2206      	movs	r2, #6
 80087d2:	f7f7 fd1d 	bl	8000210 <memchr>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d03f      	beq.n	800885a <_vfiprintf_r+0x20a>
 80087da:	4b26      	ldr	r3, [pc, #152]	@ (8008874 <_vfiprintf_r+0x224>)
 80087dc:	bb1b      	cbnz	r3, 8008826 <_vfiprintf_r+0x1d6>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	f023 0307 	bic.w	r3, r3, #7
 80087e6:	3308      	adds	r3, #8
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ec:	443b      	add	r3, r7
 80087ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f0:	e76a      	b.n	80086c8 <_vfiprintf_r+0x78>
 80087f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f6:	460c      	mov	r4, r1
 80087f8:	2001      	movs	r0, #1
 80087fa:	e7a8      	b.n	800874e <_vfiprintf_r+0xfe>
 80087fc:	2300      	movs	r3, #0
 80087fe:	3401      	adds	r4, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0c0a 	mov.w	ip, #10
 8008808:	4620      	mov	r0, r4
 800880a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880e:	3a30      	subs	r2, #48	@ 0x30
 8008810:	2a09      	cmp	r2, #9
 8008812:	d903      	bls.n	800881c <_vfiprintf_r+0x1cc>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0c6      	beq.n	80087a6 <_vfiprintf_r+0x156>
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	e7c4      	b.n	80087a6 <_vfiprintf_r+0x156>
 800881c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008820:	4604      	mov	r4, r0
 8008822:	2301      	movs	r3, #1
 8008824:	e7f0      	b.n	8008808 <_vfiprintf_r+0x1b8>
 8008826:	ab03      	add	r3, sp, #12
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	462a      	mov	r2, r5
 800882c:	4b12      	ldr	r3, [pc, #72]	@ (8008878 <_vfiprintf_r+0x228>)
 800882e:	a904      	add	r1, sp, #16
 8008830:	4630      	mov	r0, r6
 8008832:	f7fd fdd3 	bl	80063dc <_printf_float>
 8008836:	4607      	mov	r7, r0
 8008838:	1c78      	adds	r0, r7, #1
 800883a:	d1d6      	bne.n	80087ea <_vfiprintf_r+0x19a>
 800883c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	d405      	bmi.n	800884e <_vfiprintf_r+0x1fe>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	059a      	lsls	r2, r3, #22
 8008846:	d402      	bmi.n	800884e <_vfiprintf_r+0x1fe>
 8008848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800884a:	f7fe fc07 	bl	800705c <__retarget_lock_release_recursive>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	065b      	lsls	r3, r3, #25
 8008852:	f53f af1f 	bmi.w	8008694 <_vfiprintf_r+0x44>
 8008856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008858:	e71e      	b.n	8008698 <_vfiprintf_r+0x48>
 800885a:	ab03      	add	r3, sp, #12
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	462a      	mov	r2, r5
 8008860:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <_vfiprintf_r+0x228>)
 8008862:	a904      	add	r1, sp, #16
 8008864:	4630      	mov	r0, r6
 8008866:	f7fe f851 	bl	800690c <_printf_i>
 800886a:	e7e4      	b.n	8008836 <_vfiprintf_r+0x1e6>
 800886c:	08009000 	.word	0x08009000
 8008870:	0800900a 	.word	0x0800900a
 8008874:	080063dd 	.word	0x080063dd
 8008878:	0800862b 	.word	0x0800862b
 800887c:	08009006 	.word	0x08009006

08008880 <__sflush_r>:
 8008880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	0716      	lsls	r6, r2, #28
 800888a:	4605      	mov	r5, r0
 800888c:	460c      	mov	r4, r1
 800888e:	d454      	bmi.n	800893a <__sflush_r+0xba>
 8008890:	684b      	ldr	r3, [r1, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc02      	bgt.n	800889c <__sflush_r+0x1c>
 8008896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	dd48      	ble.n	800892e <__sflush_r+0xae>
 800889c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800889e:	2e00      	cmp	r6, #0
 80088a0:	d045      	beq.n	800892e <__sflush_r+0xae>
 80088a2:	2300      	movs	r3, #0
 80088a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088a8:	682f      	ldr	r7, [r5, #0]
 80088aa:	6a21      	ldr	r1, [r4, #32]
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	d030      	beq.n	8008912 <__sflush_r+0x92>
 80088b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	0759      	lsls	r1, r3, #29
 80088b6:	d505      	bpl.n	80088c4 <__sflush_r+0x44>
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	1ad2      	subs	r2, r2, r3
 80088bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088be:	b10b      	cbz	r3, 80088c4 <__sflush_r+0x44>
 80088c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	2300      	movs	r3, #0
 80088c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088c8:	6a21      	ldr	r1, [r4, #32]
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b0      	blx	r6
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	d106      	bne.n	80088e2 <__sflush_r+0x62>
 80088d4:	6829      	ldr	r1, [r5, #0]
 80088d6:	291d      	cmp	r1, #29
 80088d8:	d82b      	bhi.n	8008932 <__sflush_r+0xb2>
 80088da:	4a2a      	ldr	r2, [pc, #168]	@ (8008984 <__sflush_r+0x104>)
 80088dc:	410a      	asrs	r2, r1
 80088de:	07d6      	lsls	r6, r2, #31
 80088e0:	d427      	bmi.n	8008932 <__sflush_r+0xb2>
 80088e2:	2200      	movs	r2, #0
 80088e4:	6062      	str	r2, [r4, #4]
 80088e6:	04d9      	lsls	r1, r3, #19
 80088e8:	6922      	ldr	r2, [r4, #16]
 80088ea:	6022      	str	r2, [r4, #0]
 80088ec:	d504      	bpl.n	80088f8 <__sflush_r+0x78>
 80088ee:	1c42      	adds	r2, r0, #1
 80088f0:	d101      	bne.n	80088f6 <__sflush_r+0x76>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	b903      	cbnz	r3, 80088f8 <__sflush_r+0x78>
 80088f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80088f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088fa:	602f      	str	r7, [r5, #0]
 80088fc:	b1b9      	cbz	r1, 800892e <__sflush_r+0xae>
 80088fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008902:	4299      	cmp	r1, r3
 8008904:	d002      	beq.n	800890c <__sflush_r+0x8c>
 8008906:	4628      	mov	r0, r5
 8008908:	f7ff f9f6 	bl	8007cf8 <_free_r>
 800890c:	2300      	movs	r3, #0
 800890e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008910:	e00d      	b.n	800892e <__sflush_r+0xae>
 8008912:	2301      	movs	r3, #1
 8008914:	4628      	mov	r0, r5
 8008916:	47b0      	blx	r6
 8008918:	4602      	mov	r2, r0
 800891a:	1c50      	adds	r0, r2, #1
 800891c:	d1c9      	bne.n	80088b2 <__sflush_r+0x32>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0c6      	beq.n	80088b2 <__sflush_r+0x32>
 8008924:	2b1d      	cmp	r3, #29
 8008926:	d001      	beq.n	800892c <__sflush_r+0xac>
 8008928:	2b16      	cmp	r3, #22
 800892a:	d11e      	bne.n	800896a <__sflush_r+0xea>
 800892c:	602f      	str	r7, [r5, #0]
 800892e:	2000      	movs	r0, #0
 8008930:	e022      	b.n	8008978 <__sflush_r+0xf8>
 8008932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008936:	b21b      	sxth	r3, r3
 8008938:	e01b      	b.n	8008972 <__sflush_r+0xf2>
 800893a:	690f      	ldr	r7, [r1, #16]
 800893c:	2f00      	cmp	r7, #0
 800893e:	d0f6      	beq.n	800892e <__sflush_r+0xae>
 8008940:	0793      	lsls	r3, r2, #30
 8008942:	680e      	ldr	r6, [r1, #0]
 8008944:	bf08      	it	eq
 8008946:	694b      	ldreq	r3, [r1, #20]
 8008948:	600f      	str	r7, [r1, #0]
 800894a:	bf18      	it	ne
 800894c:	2300      	movne	r3, #0
 800894e:	eba6 0807 	sub.w	r8, r6, r7
 8008952:	608b      	str	r3, [r1, #8]
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	dde9      	ble.n	800892e <__sflush_r+0xae>
 800895a:	6a21      	ldr	r1, [r4, #32]
 800895c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800895e:	4643      	mov	r3, r8
 8008960:	463a      	mov	r2, r7
 8008962:	4628      	mov	r0, r5
 8008964:	47b0      	blx	r6
 8008966:	2800      	cmp	r0, #0
 8008968:	dc08      	bgt.n	800897c <__sflush_r+0xfc>
 800896a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	4407      	add	r7, r0
 800897e:	eba8 0800 	sub.w	r8, r8, r0
 8008982:	e7e7      	b.n	8008954 <__sflush_r+0xd4>
 8008984:	dfbffffe 	.word	0xdfbffffe

08008988 <_fflush_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	690b      	ldr	r3, [r1, #16]
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	b913      	cbnz	r3, 8008998 <_fflush_r+0x10>
 8008992:	2500      	movs	r5, #0
 8008994:	4628      	mov	r0, r5
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	b118      	cbz	r0, 80089a2 <_fflush_r+0x1a>
 800899a:	6a03      	ldr	r3, [r0, #32]
 800899c:	b90b      	cbnz	r3, 80089a2 <_fflush_r+0x1a>
 800899e:	f7fe f961 	bl	8006c64 <__sinit>
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f3      	beq.n	8008992 <_fflush_r+0xa>
 80089aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089ac:	07d0      	lsls	r0, r2, #31
 80089ae:	d404      	bmi.n	80089ba <_fflush_r+0x32>
 80089b0:	0599      	lsls	r1, r3, #22
 80089b2:	d402      	bmi.n	80089ba <_fflush_r+0x32>
 80089b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089b6:	f7fe fb50 	bl	800705a <__retarget_lock_acquire_recursive>
 80089ba:	4628      	mov	r0, r5
 80089bc:	4621      	mov	r1, r4
 80089be:	f7ff ff5f 	bl	8008880 <__sflush_r>
 80089c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089c4:	07da      	lsls	r2, r3, #31
 80089c6:	4605      	mov	r5, r0
 80089c8:	d4e4      	bmi.n	8008994 <_fflush_r+0xc>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	059b      	lsls	r3, r3, #22
 80089ce:	d4e1      	bmi.n	8008994 <_fflush_r+0xc>
 80089d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089d2:	f7fe fb43 	bl	800705c <__retarget_lock_release_recursive>
 80089d6:	e7dd      	b.n	8008994 <_fflush_r+0xc>

080089d8 <__swhatbuf_r>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2900      	cmp	r1, #0
 80089e2:	b096      	sub	sp, #88	@ 0x58
 80089e4:	4615      	mov	r5, r2
 80089e6:	461e      	mov	r6, r3
 80089e8:	da0d      	bge.n	8008a06 <__swhatbuf_r+0x2e>
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089f0:	f04f 0100 	mov.w	r1, #0
 80089f4:	bf14      	ite	ne
 80089f6:	2340      	movne	r3, #64	@ 0x40
 80089f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089fc:	2000      	movs	r0, #0
 80089fe:	6031      	str	r1, [r6, #0]
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	b016      	add	sp, #88	@ 0x58
 8008a04:	bd70      	pop	{r4, r5, r6, pc}
 8008a06:	466a      	mov	r2, sp
 8008a08:	f000 f848 	bl	8008a9c <_fstat_r>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	dbec      	blt.n	80089ea <__swhatbuf_r+0x12>
 8008a10:	9901      	ldr	r1, [sp, #4]
 8008a12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a1a:	4259      	negs	r1, r3
 8008a1c:	4159      	adcs	r1, r3
 8008a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a22:	e7eb      	b.n	80089fc <__swhatbuf_r+0x24>

08008a24 <__smakebuf_r>:
 8008a24:	898b      	ldrh	r3, [r1, #12]
 8008a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a28:	079d      	lsls	r5, r3, #30
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	d507      	bpl.n	8008a40 <__smakebuf_r+0x1c>
 8008a30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	6163      	str	r3, [r4, #20]
 8008a3c:	b003      	add	sp, #12
 8008a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a40:	ab01      	add	r3, sp, #4
 8008a42:	466a      	mov	r2, sp
 8008a44:	f7ff ffc8 	bl	80089d8 <__swhatbuf_r>
 8008a48:	9f00      	ldr	r7, [sp, #0]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff f9c6 	bl	8007de0 <_malloc_r>
 8008a54:	b948      	cbnz	r0, 8008a6a <__smakebuf_r+0x46>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	059a      	lsls	r2, r3, #22
 8008a5c:	d4ee      	bmi.n	8008a3c <__smakebuf_r+0x18>
 8008a5e:	f023 0303 	bic.w	r3, r3, #3
 8008a62:	f043 0302 	orr.w	r3, r3, #2
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	e7e2      	b.n	8008a30 <__smakebuf_r+0xc>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	6020      	str	r0, [r4, #0]
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a7a:	b15b      	cbz	r3, 8008a94 <__smakebuf_r+0x70>
 8008a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f81d 	bl	8008ac0 <_isatty_r>
 8008a86:	b128      	cbz	r0, 8008a94 <__smakebuf_r+0x70>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	431d      	orrs	r5, r3
 8008a98:	81a5      	strh	r5, [r4, #12]
 8008a9a:	e7cf      	b.n	8008a3c <__smakebuf_r+0x18>

08008a9c <_fstat_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	@ (8008abc <_fstat_r+0x20>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f7f9 fe4d 	bl	8002748 <_fstat>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d102      	bne.n	8008ab8 <_fstat_r+0x1c>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	b103      	cbz	r3, 8008ab8 <_fstat_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	bf00      	nop
 8008abc:	200004a4 	.word	0x200004a4

08008ac0 <_isatty_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_isatty_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f9 fe4c 	bl	8002768 <_isatty>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_isatty_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_isatty_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200004a4 	.word	0x200004a4

08008ae0 <_sbrk_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	@ (8008afc <_sbrk_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f9 fe54 	bl	8002798 <_sbrk>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_sbrk_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_sbrk_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	200004a4 	.word	0x200004a4

08008b00 <memcpy>:
 8008b00:	440a      	add	r2, r1
 8008b02:	4291      	cmp	r1, r2
 8008b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b08:	d100      	bne.n	8008b0c <memcpy+0xc>
 8008b0a:	4770      	bx	lr
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b16:	4291      	cmp	r1, r2
 8008b18:	d1f9      	bne.n	8008b0e <memcpy+0xe>
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <__assert_func>:
 8008b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b1e:	4614      	mov	r4, r2
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <__assert_func+0x2c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4605      	mov	r5, r0
 8008b28:	68d8      	ldr	r0, [r3, #12]
 8008b2a:	b954      	cbnz	r4, 8008b42 <__assert_func+0x26>
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <__assert_func+0x30>)
 8008b2e:	461c      	mov	r4, r3
 8008b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b34:	9100      	str	r1, [sp, #0]
 8008b36:	462b      	mov	r3, r5
 8008b38:	4905      	ldr	r1, [pc, #20]	@ (8008b50 <__assert_func+0x34>)
 8008b3a:	f000 f841 	bl	8008bc0 <fiprintf>
 8008b3e:	f000 f851 	bl	8008be4 <abort>
 8008b42:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <__assert_func+0x38>)
 8008b44:	e7f4      	b.n	8008b30 <__assert_func+0x14>
 8008b46:	bf00      	nop
 8008b48:	20000018 	.word	0x20000018
 8008b4c:	08009056 	.word	0x08009056
 8008b50:	08009028 	.word	0x08009028
 8008b54:	0800901b 	.word	0x0800901b

08008b58 <_calloc_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b5e:	b93c      	cbnz	r4, 8008b70 <_calloc_r+0x18>
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7ff f93d 	bl	8007de0 <_malloc_r>
 8008b66:	4606      	mov	r6, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <_calloc_r+0x1e>
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	220c      	movs	r2, #12
 8008b72:	6002      	str	r2, [r0, #0]
 8008b74:	e7f9      	b.n	8008b6a <_calloc_r+0x12>
 8008b76:	462a      	mov	r2, r5
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7fe f9f1 	bl	8006f60 <memset>
 8008b7e:	e7f5      	b.n	8008b6c <_calloc_r+0x14>

08008b80 <__ascii_mbtowc>:
 8008b80:	b082      	sub	sp, #8
 8008b82:	b901      	cbnz	r1, 8008b86 <__ascii_mbtowc+0x6>
 8008b84:	a901      	add	r1, sp, #4
 8008b86:	b142      	cbz	r2, 8008b9a <__ascii_mbtowc+0x1a>
 8008b88:	b14b      	cbz	r3, 8008b9e <__ascii_mbtowc+0x1e>
 8008b8a:	7813      	ldrb	r3, [r2, #0]
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	1e10      	subs	r0, r2, #0
 8008b92:	bf18      	it	ne
 8008b94:	2001      	movne	r0, #1
 8008b96:	b002      	add	sp, #8
 8008b98:	4770      	bx	lr
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	e7fb      	b.n	8008b96 <__ascii_mbtowc+0x16>
 8008b9e:	f06f 0001 	mvn.w	r0, #1
 8008ba2:	e7f8      	b.n	8008b96 <__ascii_mbtowc+0x16>

08008ba4 <__ascii_wctomb>:
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	b141      	cbz	r1, 8008bbc <__ascii_wctomb+0x18>
 8008baa:	2aff      	cmp	r2, #255	@ 0xff
 8008bac:	d904      	bls.n	8008bb8 <__ascii_wctomb+0x14>
 8008bae:	228a      	movs	r2, #138	@ 0x8a
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb6:	4770      	bx	lr
 8008bb8:	700a      	strb	r2, [r1, #0]
 8008bba:	2001      	movs	r0, #1
 8008bbc:	4770      	bx	lr
	...

08008bc0 <fiprintf>:
 8008bc0:	b40e      	push	{r1, r2, r3}
 8008bc2:	b503      	push	{r0, r1, lr}
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	ab03      	add	r3, sp, #12
 8008bc8:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <fiprintf+0x20>)
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	6800      	ldr	r0, [r0, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	f7ff fd3d 	bl	8008650 <_vfiprintf_r>
 8008bd6:	b002      	add	sp, #8
 8008bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bdc:	b003      	add	sp, #12
 8008bde:	4770      	bx	lr
 8008be0:	20000018 	.word	0x20000018

08008be4 <abort>:
 8008be4:	b508      	push	{r3, lr}
 8008be6:	2006      	movs	r0, #6
 8008be8:	f000 f82c 	bl	8008c44 <raise>
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7f9 fd77 	bl	80026e0 <_exit>

08008bf2 <_raise_r>:
 8008bf2:	291f      	cmp	r1, #31
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	d904      	bls.n	8008c06 <_raise_r+0x14>
 8008bfc:	2316      	movs	r3, #22
 8008bfe:	6003      	str	r3, [r0, #0]
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	bd38      	pop	{r3, r4, r5, pc}
 8008c06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c08:	b112      	cbz	r2, 8008c10 <_raise_r+0x1e>
 8008c0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c0e:	b94b      	cbnz	r3, 8008c24 <_raise_r+0x32>
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f831 	bl	8008c78 <_getpid_r>
 8008c16:	4622      	mov	r2, r4
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c20:	f000 b818 	b.w	8008c54 <_kill_r>
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d00a      	beq.n	8008c3e <_raise_r+0x4c>
 8008c28:	1c59      	adds	r1, r3, #1
 8008c2a:	d103      	bne.n	8008c34 <_raise_r+0x42>
 8008c2c:	2316      	movs	r3, #22
 8008c2e:	6003      	str	r3, [r0, #0]
 8008c30:	2001      	movs	r0, #1
 8008c32:	e7e7      	b.n	8008c04 <_raise_r+0x12>
 8008c34:	2100      	movs	r1, #0
 8008c36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4798      	blx	r3
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e7e0      	b.n	8008c04 <_raise_r+0x12>
	...

08008c44 <raise>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	@ (8008c50 <raise+0xc>)
 8008c46:	4601      	mov	r1, r0
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f7ff bfd2 	b.w	8008bf2 <_raise_r>
 8008c4e:	bf00      	nop
 8008c50:	20000018 	.word	0x20000018

08008c54 <_kill_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	@ (8008c74 <_kill_r+0x20>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f7f9 fd2d 	bl	80026c0 <_kill>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d102      	bne.n	8008c70 <_kill_r+0x1c>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	b103      	cbz	r3, 8008c70 <_kill_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	200004a4 	.word	0x200004a4

08008c78 <_getpid_r>:
 8008c78:	f7f9 bd1a 	b.w	80026b0 <_getpid>

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
